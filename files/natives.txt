namespace SYSTEM
{
 void WAIT(int ms)
 int START_NEW_SCRIPT(const char* scriptName, int stackSize)
 int START_NEW_SCRIPT_WITH_ARGS(const char* scriptName, Any* args, int argCount, int stackSize)
 int START_NEW_SCRIPT_WITH_NAME_HASH(Hash scriptHash, int stackSize)
 int START_NEW_SCRIPT_WITH_NAME_HASH_AND_ARGS(Hash scriptHash, Any* args, int argCount, int stackSize)
 int TIMERA()
 int TIMERB()
 void SETTIMERA(int value)
 void SETTIMERB(int value)
 float TIMESTEP()
 float SIN(float value)
 float COS(float value)
 float SQRT(float value)
 float POW(float base, float exponent)
 float _LOG10(float value)
 float VMAG(float x, float y, float z)
 float VMAG2(float x, float y, float z)
 float VDIST(float x1, float y1, float z1, float x2, float y2, float z2)
 float VDIST2(float x1, float y1, float z1, float x2, float y2, float z2)
 int SHIFT_LEFT(int value, int bitShift)
 int SHIFT_RIGHT(int value, int bitShift)
 int FLOOR(float value)
 int CEIL(float value)
 int ROUND(float value)
 float TO_FLOAT(int value)
 void _SET_THREAD_PRIORITY(int priority)
}

namespace APP
{
 BOOL APP_DATA_VALID()
 int APP_GET_INT(const char* property)
 float APP_GET_FLOAT(const char* property)
 const char* APP_GET_STRING(const char* property)
 void APP_SET_INT(const char* property, int value)
 void APP_SET_FLOAT(const char* property, float value)
 void APP_SET_STRING(const char* property, const char* value)
 void APP_SET_APP(const char* appName)
 void APP_SET_BLOCK(const char* blockName)
 void APP_CLEAR_BLOCK()
 void APP_CLOSE_APP()
 void APP_CLOSE_BLOCK()
 BOOL APP_HAS_LINKED_SOCIAL_CLUB_ACCOUNT()
 BOOL APP_HAS_SYNCED_DATA(const char* appName)
 void APP_SAVE_DATA()
 int APP_GET_DELETED_FILE_STATUS()
 BOOL APP_DELETE_APP_DATA(const char* appName)
}

namespace AUDIO
{
 void PLAY_PED_RINGTONE(const char* ringtoneName, Ped ped, BOOL p2)
 BOOL IS_PED_RINGTONE_PLAYING(Ped ped)
 void STOP_PED_RINGTONE(Ped ped)
 BOOL IS_MOBILE_PHONE_CALL_ONGOING()
 BOOL _0xC8B1B2425604CDD0()
 void CREATE_NEW_SCRIPTED_CONVERSATION()
 void ADD_LINE_TO_CONVERSATION(int index, const char* p1, const char* p2, int p3, int p4, BOOL p5, BOOL p6, BOOL p7, BOOL p8, int p9, BOOL p10, BOOL p11, BOOL p12)
 void ADD_PED_TO_CONVERSATION(int index, Ped ped, const char* p2)
 void _0x33E3C6C6F2F0B506(Any p0, float p1, float p2, float p3)
 void _0x892B6AB8F33606F5(int p0, Entity entity)
 void SET_MICROPHONE_POSITION(BOOL p0, float x1, float y1, float z1, float x2, float y2, float z2, float x3, float y3, float z3)
 void _0x0B568201DD99F0EB(BOOL p0)
 void _0x61631F5DF50D1C34(BOOL p0)
 void START_SCRIPT_PHONE_CONVERSATION(BOOL p0, BOOL p1)
 void PRELOAD_SCRIPT_PHONE_CONVERSATION(BOOL p0, BOOL p1)
 void START_SCRIPT_CONVERSATION(BOOL p0, BOOL p1, BOOL p2, BOOL p3)
 void PRELOAD_SCRIPT_CONVERSATION(BOOL p0, BOOL p1, BOOL p2, BOOL p3)
 void START_PRELOADED_CONVERSATION()
 BOOL GET_IS_PRELOADED_CONVERSATION_READY()
 BOOL IS_SCRIPTED_CONVERSATION_ONGOING()
 BOOL IS_SCRIPTED_CONVERSATION_LOADED()
 int GET_CURRENT_SCRIPTED_CONVERSATION_LINE()
 void PAUSE_SCRIPTED_CONVERSATION(BOOL p0)
 void RESTART_SCRIPTED_CONVERSATION()
 int STOP_SCRIPTED_CONVERSATION(BOOL p0)
 void SKIP_TO_NEXT_SCRIPTED_CONVERSATION_LINE()
 void INTERRUPT_CONVERSATION(Any p0, Any* p1, Any* p2)
 void INTERRUPT_CONVERSATION_AND_PAUSE(Ped p0, const char* p1, const char* p2)
 Any _0xAA19F5572C38B564(Any* p0)
 void _0xB542DE8C3D1CB210(BOOL p0)
 void REGISTER_SCRIPT_WITH_AUDIO(int p0)
 void UNREGISTER_SCRIPT_WITH_AUDIO()
 BOOL REQUEST_MISSION_AUDIO_BANK(const char* p0, BOOL p1, Any p2)
 BOOL REQUEST_AMBIENT_AUDIO_BANK(const char* p0, BOOL p1, Any p2)
 BOOL REQUEST_SCRIPT_AUDIO_BANK(const char* p0, BOOL p1, Any p2)
 Any _0x40763EA7B9B783E7(Any p0, Any p1, Any p2)
 Any HINT_AMBIENT_AUDIO_BANK(Any p0, Any p1, Any p2)
 Any HINT_SCRIPT_AUDIO_BANK(Any p0, Any p1, Any p2)
 void RELEASE_MISSION_AUDIO_BANK()
 void RELEASE_AMBIENT_AUDIO_BANK()
 void RELEASE_NAMED_SCRIPT_AUDIO_BANK(const char* audioBank)
 void RELEASE_SCRIPT_AUDIO_BANK()
 void _0x19AF7ED9B9D23058()
 void _0x9AC92EED5E4793AB()
 void _0x11579D940949C49E(Any p0)
 int GET_SOUND_ID()
 void RELEASE_SOUND_ID(int soundId)
 void PLAY_SOUND(int soundId, const char* audioName, const char* audioRef, BOOL p3, Any p4, BOOL p5)
 void PLAY_SOUND_FRONTEND(int soundId, const char* audioName, const char* audioRef, BOOL p3)
 void PLAY_DEFERRED_SOUND_FRONTEND(const char* soundName, const char* soundsetName)
 void PLAY_SOUND_FROM_ENTITY(int soundId, const char* audioName, Entity entity, const char* audioRef, BOOL isNetwork, Any p5)
 void _0x5B9853296731E88D(Any p0, Any p1, Any p2, Any p3, Any p4, Any p5)
 void PLAY_SOUND_FROM_COORD(int soundId, const char* audioName, float x, float y, float z, const char* audioRef, BOOL isNetwork, int range, BOOL p8)
 void _0x7EC3C679D0E7E46B(Any p0, Any p1, Any p2, Any p3)
 void STOP_SOUND(int soundId)
 int GET_NETWORK_ID_FROM_SOUND_ID(int soundId)
 int GET_SOUND_ID_FROM_NETWORK_ID(int netId)
 void SET_VARIABLE_ON_SOUND(int soundId, Any* p1, float p2)
 void SET_VARIABLE_ON_STREAM(const char* p0, float p1)
 void OVERRIDE_UNDERWATER_STREAM(Any* p0, BOOL p1)
 void SET_VARIABLE_ON_UNDER_WATER_STREAM(const char* variableName, float value)
 BOOL HAS_SOUND_FINISHED(int soundId)
 void _PLAY_AMBIENT_SPEECH1(Ped ped, const char* speechName, const char* speechParam, Any p3)
 void _PLAY_AMBIENT_SPEECH2(Ped ped, const char* speechName, const char* speechParam, Any p3)
 void _PLAY_AMBIENT_SPEECH_WITH_VOICE(Ped p0, const char* speechName, const char* voiceName, const char* speechParam, BOOL p4)
 void _PLAY_AMBIENT_SPEECH_AT_COORDS(const char* p0, const char* p1, float p2, float p3, float p4, const char* p5)
 void OVERRIDE_TREVOR_RAGE(const char* p0)
 void RESET_TREVOR_RAGE()
 void SET_PLAYER_ANGRY(Ped ped, BOOL toggle)
 void PLAY_PAIN(Ped ped, int painID, int p1, Any p3)
 void RELEASE_WEAPON_AUDIO()
 void ACTIVATE_AUDIO_SLOWMO_MODE(const char* p0)
 void DEACTIVATE_AUDIO_SLOWMO_MODE(const char* p0)
 void SET_AMBIENT_VOICE_NAME(Ped ped, const char* name)
 void _SET_AMBIENT_VOICE_NAME_HASH(Ped ped, Hash hash)
 Hash _GET_AMBIENT_VOICE_NAME_HASH(Ped ped)
 void _SET_PED_SCREAM(Ped ped)
 void _0x1B7ABE26CBCBF8C7(Ped ped, Any p1, Any p2)
 void _SET_PED_VOICE_GROUP(Ped ped, Hash voiceGroupHash)
 void _0xA5342D390CDA41D6(Ped ped, BOOL p1)
 void STOP_CURRENT_PLAYING_SPEECH(Ped ped)
 void STOP_CURRENT_PLAYING_AMBIENT_SPEECH(Ped ped)
 BOOL IS_AMBIENT_SPEECH_PLAYING(Ped ped)
 BOOL IS_SCRIPTED_SPEECH_PLAYING(Any p0)
 BOOL IS_ANY_SPEECH_PLAYING(Ped ped)
 BOOL _CAN_PED_SPEAK(Ped ped, const char* speechName, BOOL unk)
 BOOL IS_PED_IN_CURRENT_CONVERSATION(Ped ped)
 void SET_PED_IS_DRUNK(Ped ped, BOOL toggle)
 void PLAY_ANIMAL_VOCALIZATION(Ped pedHandle, Any p1, Any* p2)
 BOOL IS_ANIMAL_VOCALIZATION_PLAYING(Ped pedHandle)
 void SET_ANIMAL_MOOD(Ped animal, int mood)
 BOOL IS_MOBILE_PHONE_RADIO_ACTIVE()
 void SET_MOBILE_PHONE_RADIO_STATE(BOOL state)
 int GET_PLAYER_RADIO_STATION_INDEX()
 const char* GET_PLAYER_RADIO_STATION_NAME()
 const char* GET_RADIO_STATION_NAME(int radioStation)
 int GET_PLAYER_RADIO_STATION_GENRE()
 BOOL IS_RADIO_RETUNING()
 BOOL IS_RADIO_FADED_OUT()
 void _0xFF266D1D0EB1195D()
 void _0xDD6BCF9E94425DF9()
 void SET_RADIO_TO_STATION_NAME(const char* stationName)
 void SET_VEH_RADIO_STATION(Vehicle vehicle, const char* radioStation)
 BOOL _0x0BE4BE946463F917(Vehicle vehicle)
 void _0xC1805D05E6D4FE10(Vehicle vehicle)
 void SET_EMITTER_RADIO_STATION(const char* emitterName, const char* radioStation)
 void SET__EMITTER_ENABLED(const char* emitterName, BOOL toggle)
 void _LINK__EMITTER_TO_ENTITY(const char* emitterName, Entity entity)
 void SET_RADIO_TO_STATION_INDEX(int radioStation)
 void SET_FRONTEND_RADIO_ACTIVE(BOOL active)
 void UNLOCK_MISSION_NEWS_STORY(int newsStory)
 BOOL IS_MISSION_NEWS_STORY_UNLOCKED(int newsStory)
 int GET_AUDIBLE_MUSIC_TRACK_TEXT_ID()
 void PLAY_END_CREDITS_MUSIC(BOOL play)
 void SKIP_RADIO_FORWARD()
 void FREEZE_RADIO_STATION(const char* radioStation)
 void UNFREEZE_RADIO_STATION(const char* radioStation)
 void SET_RADIO_AUTO_UNFREEZE(BOOL toggle)
 void SET_INITIAL_PLAYER_STATION(const char* radioStation)
 void SET_USER_RADIO_CONTROL_ENABLED(BOOL toggle)
 void SET_RADIO_TRACK(const char* radioStation, const char* radioTrack)
 void _SET_RADIO_TRACK_MIX(const char* radioStationName, const char* mixName, int p2)
 void SET_VEHICLE_RADIO_LOUD(Vehicle vehicle, BOOL toggle)
 BOOL _IS_VEHICLE_RADIO_LOUD(Vehicle vehicle)
 void SET_MOBILE_RADIO_ENABLED_DURING_GAMEPLAY(BOOL toggle)
 BOOL DOES_PLAYER_VEH_HAVE_RADIO()
 BOOL IS_PLAYER_VEH_RADIO_ENABLE()
 void SET_VEHICLE_RADIO_ENABLED(Vehicle vehicle, BOOL toggle)
 void _0xDA07819E452FFE8F(Any p0)
 void SET_CUSTOM_RADIO_TRACK_LIST(const char* radioStation, const char* trackListName, BOOL p2)
 void CLEAR_CUSTOM_RADIO_TRACK_LIST(const char* radioStation)
 int GET_NUM_UNLOCKED_RADIO_STATIONS()
 int FIND_RADIO_STATION_INDEX(int station)
 void SET_RADIO_STATION_MUSIC_ONLY(const char* radioStation, BOOL toggle)
 void SET_RADIO_FRONTEND_FADE_TIME(float p0)
 void UNLOCK_RADIO_STATION_TRACK_LIST(const char* radioStation, const char* trackListName)
 void _UPDATE_LSUR(BOOL enableMixes)
 void _LOCK_RADIO_STATION(const char* radioStationName, BOOL toggle)
 BOOL _0xC64A06D939F826F5(float* p0, Any* p1, int* p2)
 int _0x3E65CDE5215832C1(const char* radioStationName)
 Hash _0x34D66BC058019CE0(const char* radioStationName)
 void _0xF3365489E0DD50F9(Vehicle vehicle, BOOL toggle)
 void SET_AMBIENT_ZONE_STATE(const char* zoneName, BOOL p1, BOOL p2)
 void CLEAR_AMBIENT_ZONE_STATE(const char* zoneName, BOOL p1)
 void SET_AMBIENT_ZONE_LIST_STATE(Any* p0, BOOL p1, BOOL p2)
 void CLEAR_AMBIENT_ZONE_LIST_STATE(Any* p0, BOOL p1)
 void SET_AMBIENT_ZONE_STATE_PERSISTENT(const char* ambientZone, BOOL p1, BOOL p2)
 void SET_AMBIENT_ZONE_LIST_STATE_PERSISTENT(const char* ambientZone, BOOL p1, BOOL p2)
 BOOL IS_AMBIENT_ZONE_ENABLED(const char* ambientZone)
 void _0x5D2BFAAB8D956E0E()
 void SET_CUTSCENE_AUDIO_OVERRIDE(const char* name)
 void _SET_VARIABLE_ON_CUTSCENE_AUDIO(const char* variableName, float value)
 int PLAY_POLICE_REPORT(const char* name, float p1)
 void _CANCEL_CURRENT_POLICE_REPORT()
 void BLIP_SIREN(Vehicle vehicle)
 void OVERRIDE_VEH_HORN(Vehicle vehicle, BOOL mute, int p2)
 BOOL IS_HORN_ACTIVE(Vehicle vehicle)
 void SET_AGGRESSIVE_HORNS(BOOL toggle)
 void _0x02E93C796ABD3A97(BOOL p0)
 void _0x58BB377BEC7CD5F4(BOOL p0, BOOL p1)
 void _0x9BD7BD55E4533183(Any p0, Any p1, Any p2)
 BOOL IS_STREAM_PLAYING()
 int GET_STREAM_PLAY_TIME()
 BOOL LOAD_STREAM(const char* streamName, const char* soundSet)
 BOOL LOAD_STREAM_WITH_START_OFFSET(const char* streamName, int startOffset, const char* soundSet)
 void PLAY_STREAM_FROM_PED(Ped ped)
 void PLAY_STREAM_FROM_VEHICLE(Vehicle vehicle)
 void PLAY_STREAM_FROM_OBJECT(Object object)
 void PLAY_STREAM_FRONTEND()
 void PLAY_STREAM_FROM_POSITION(float x, float y, float z)
 void STOP_STREAM()
 void STOP_PED_SPEAKING(Ped ped, BOOL shaking)
 void _0xF8AD2EED7C47E8FE(Ped ped, BOOL p1, BOOL p2)
 void DISABLE_PED_PAIN_AUDIO(Ped ped, BOOL toggle)
 BOOL IS_AMBIENT_SPEECH_DISABLED(Ped ped)
 void _0xA8A7D434AFB4B97B(const char* p0, int p1)
 void _0x2ACABED337622DF2(const char* p0)
 void SET_SIREN_WITH_NO_DRIVER(Vehicle vehicle, BOOL toggle)
 void _0x66C3FB05206041BA(Any p0)
 void _SOUND_VEHICLE_HORN_THIS_FRAME(Vehicle vehicle)
 void SET_HORN_ENABLED(Vehicle vehicle, BOOL toggle)
 void SET_AUDIO_VEHICLE_PRIORITY(Vehicle vehicle, Any p1)
 void _0x9D3AF56E94C9AE98(Vehicle vehicle, float p1)
 void USE_SIREN_AS_HORN(Vehicle vehicle, BOOL toggle)
 void _FORCE_VEHICLE_ENGINE_AUDIO(Vehicle vehicle, const char* audioName)
 void _0xCA4CEA6AE0000A7E(Any p0)
 void _0xF1F8157B8C3F171C(Vehicle vehicle, const char* p1, const char* p2)
 void _0xD2DCCD8E16E20997(Any p0)
 BOOL _0x5DB8010EE71FDEF2(Vehicle vehicle)
 void SET_VEHICLE_AUDIO_ENGINE_DAMAGE_FACTOR(Vehicle vehicle, float damageFactor)
 void _0x01BB4D577D38BD9E(Vehicle vehicle, float p1)
 void _0x1C073274E065C6D2(Vehicle vehicle, BOOL toggle)
 void ENABLE_VEHICLE_EXHAUST_POPS(Vehicle vehicle, BOOL toggle)
 void SET_VEHICLE_BOOST_ACTIVE(Vehicle vehicle, BOOL toggle)
 void _0x6FDDAD856E36988A(Vehicle vehicle, BOOL toggle)
 void SET_SCRIPT_UPDATE_DOOR_AUDIO(Hash doorHash, BOOL toggle)
 void PLAY_VEHICLE_DOOR_OPEN_SOUND(Vehicle vehicle, int doorIndex)
 void PLAY_VEHICLE_DOOR_CLOSE_SOUND(Vehicle vehicle, int doorIndex)
 void ENABLE_STALL_WARNING_SOUNDS(Vehicle vehicle, BOOL toggle)
 BOOL IS_GAME_IN_CONTROL_OF_MUSIC()
 void SET_GPS_ACTIVE(BOOL active)
 void PLAY_MISSION_COMPLETE_AUDIO(const char* audioName)
 BOOL IS_MISSION_COMPLETE_PLAYING()
 BOOL IS_MISSION_COMPLETE_READY_FOR_UI()
 void BLOCK_DEATH_JINGLE(BOOL toggle)
 BOOL START_AUDIO_SCENE(const char* scene)
 void STOP_AUDIO_SCENE(const char* scene)
 void STOP_AUDIO_SCENES()
 BOOL IS_AUDIO_SCENE_ACTIVE(const char* scene)
 void SET_AUDIO_SCENE_VARIABLE(const char* scene, const char* variable, float value)
 void _0xA5F377B175A699C5(int p0)
 void ADD_ENTITY_TO_AUDIO_MIX_GROUP(Entity entity, const char* groupName, float p2)
 void REMOVE_ENTITY_FROM_AUDIO_MIX_GROUP(Entity entity, float p1)
 BOOL AUDIO_IS_SCRIPTED_MUSIC_PLAYING()
 Any _0x2DD39BF3E2F9C47F()
 BOOL PREPARE_MUSIC_EVENT(const char* eventName)
 BOOL CANCEL_MUSIC_EVENT(const char* eventName)
 BOOL TRIGGER_MUSIC_EVENT(const char* eventName)
 BOOL IS_MUSIC_ONESHOT_PLAYING()
 int GET_MUSIC_PLAYTIME()
 void _0x159B7318403A1CD8(Any p0)
 void RECORD_BROKEN_GLASS(float x, float y, float z, float radius)
 void CLEAR_ALL_BROKEN_GLASS()
 void _0x70B8EC8FC108A634(BOOL p0, Any p1)
 void _0x149AEE66F0CB3A99(float p0, float p1)
 void _0x8BF907833BE275DE(float p0, float p1)
 void _0x062D5EAD4DA2FA6A()
 BOOL PREPARE_ALARM(const char* alarmName)
 void START_ALARM(const char* alarmName, BOOL p2)
 void STOP_ALARM(const char* alarmName, BOOL toggle)
 void STOP_ALL_ALARMS(BOOL stop)
 BOOL IS_ALARM_PLAYING(const char* alarmName)
 Hash GET_VEHICLE_DEFAULT_HORN(Vehicle vehicle)
 Hash GET_VEHICLE_DEFAULT_HORN_IGNORE_MODS(Vehicle vehicle)
 void RESET_PED_AUDIO_FLAGS(Ped ped)
 void _0x0653B735BFBDFE87(Ped ped, BOOL toggle)
 void _0x29DA3CA8D8B2692D(Ped ped, BOOL toggle)
 void OVERRIDE_PLAYER_GROUND_MATERIAL(Hash hash, BOOL toggle)
 void _0xBF4DC1784BE94DFA(Ped ped, BOOL p1, Hash hash)
 void _OVERRIDE_MICROPHONE_SETTINGS(Hash hash, BOOL toggle)
 void FREEZE_MICROPHONE()
 void DISTANT_COP_CAR_SIRENS(BOOL value)
 void _0x43FA0DFC5DF87815(Vehicle vehicle, BOOL p1)
 void _0xB81CF134AEB56FFB()
 void SET_AUDIO_FLAG(const char* flagName, BOOL toggle)
 Any PREPARE_SYNCHRONIZED_AUDIO_EVENT(const char* p0, Any p1)
 BOOL PREPARE_SYNCHRONIZED_AUDIO_EVENT_FOR_SCENE(Any p0, Any* p1)
 BOOL PLAY_SYNCHRONIZED_AUDIO_EVENT(Any p0)
 BOOL STOP_SYNCHRONIZED_AUDIO_EVENT(Any p0)
 void _0xC8EDE9BDBCCBA6D4(Any* p0, float p1, float p2, float p3)
 void _SET_SYNCHRONIZED_AUDIO_EVENT_POSITION_THIS_FRAME(const char* p0, Entity p1)
 void SET_AUDIO_SPECIAL_EFFECT_MODE(int mode)
 void SET_PORTAL_SETTINGS_OVERRIDE(const char* p0, const char* p1)
 void REMOVE_PORTAL_SETTINGS_OVERRIDE(const char* p0)
 void _0xE4E6DD5566D28C82()
 Any _0x3A48AB4445D499BE()
 void _SET_PED_TALK(Ped ped)
 void _0x0150B6FF25A9E2E5()
 void _0xBEF34B1D9624D5DD(BOOL p0)
 void STOP_CUTSCENE_AUDIO()
 BOOL _HAS_MULTIPLAYER_AUDIO_DATA_LOADED()
 BOOL _HAS_MULTIPLAYER_AUDIO_DATA_UNLOADED()
 int _GET_VEHICLE_DEFAULT_HORN_VARIATION(Vehicle vehicle)
 void _SET_VEHICLE_HORN_VARIATION(Vehicle vehicle, int value)
}

namespace BRAIN
{
 void ADD_SCRIPT_TO_RANDOM_PED(const char* name, Hash model, float p2, float p3)
 void REGISTER_OBJECT_SCRIPT_BRAIN(const char* scriptName, Hash modelHash, int p2, float activationRange, int p4, int p5)
 BOOL IS_OBJECT_WITHIN_BRAIN_ACTIVATION_RANGE(Object object)
 void REGISTER_WORLD_POINT_SCRIPT_BRAIN(const char* scriptName, float activationRange, int p2)
 BOOL IS_WORLD_POINT_WITHIN_BRAIN_ACTIVATION_RANGE()
 void ENABLE_SCRIPT_BRAIN_SET(int brainSet)
 void DISABLE_SCRIPT_BRAIN_SET(int brainSet)
 void _0x0B40ED49D7D6FF84()
 void _0x4D953DF78EBF8158()
 void _0x6D6840CEE8845831(const char* action)
 void _0x6E91B04E08773030(const char* action)
}

namespace CAM
{
 void RENDER_SCRIPT_CAMS(BOOL render, BOOL ease, int easeTime, BOOL p3, BOOL p4, Any p5)
 void _RENDER_FIRST_PERSON_CAM(BOOL render, float p1, int p2, Any p3)
 Cam CREATE_CAM(const char* camName, BOOL p1)
 Cam CREATE_CAM_WITH_PARAMS(const char* camName, float posX, float posY, float posZ, float rotX, float rotY, float rotZ, float fov, BOOL p8, int p9)
 Cam CREATE_CAMERA(Hash camHash, BOOL p1)
 Cam CREATE_CAMERA_WITH_PARAMS(Hash camHash, float posX, float posY, float posZ, float rotX, float rotY, float rotZ, float fov, BOOL p8, Any p9)
 void DESTROY_CAM(Cam cam, BOOL thisScriptCheck)
 void DESTROY_ALL_CAMS(BOOL thisScriptCheck)
 BOOL DOES_CAM_EXIST(Cam cam)
 void SET_CAM_ACTIVE(Cam cam, BOOL active)
 BOOL IS_CAM_ACTIVE(Cam cam)
 BOOL IS_CAM_RENDERING(Cam cam)
 Cam GET_RENDERING_CAM()
 Vector3 GET_CAM_COORD(Cam cam)
 Vector3 GET_CAM_ROT(Cam cam, int rotationOrder)
 float GET_CAM_FOV(Cam cam)
 float GET_CAM_NEAR_CLIP(Cam cam)
 float GET_CAM_FAR_CLIP(Cam cam)
 float GET_CAM_FAR_DOF(Cam cam)
 void SET_CAM_PARAMS(Cam cam, float posX, float posY, float posZ, float rotX, float rotY, float rotZ, float fieldOfView, Any p8, int p9, int p10, int p11)
 void SET_CAM_COORD(Cam cam, float posX, float posY, float posZ)
 void SET_CAM_ROT(Cam cam, float rotX, float rotY, float rotZ, int rotationOrder)
 void SET_CAM_FOV(Cam cam, float fieldOfView)
 void SET_CAM_NEAR_CLIP(Cam cam, float nearClip)
 void SET_CAM_FAR_CLIP(Cam cam, float farClip)
 void SET_CAM_MOTION_BLUR_STRENGTH(Cam cam, float strength)
 void SET_CAM_NEAR_DOF(Cam cam, float nearDOF)
 void SET_CAM_FAR_DOF(Cam cam, float farDOF)
 void SET_CAM_DOF_STRENGTH(Cam cam, float dofStrength)
 void SET_CAM_DOF_PLANES(Cam cam, float p1, float p2, float p3, float p4)
 void SET_CAM_USE_SHALLOW_DOF_MODE(Cam cam, BOOL toggle)
 void SET_USE_HI_DOF()
 void _0xF55E4046F6F831DC(Any p0, float p1)
 void _0xE111A7C0D200CBC5(Any p0, float p1)
 void _SET_CAM_DOF_FNUMBER_OF_LENS(Cam camera, float p1)
 void _SET_CAM_DOF_FOCAL_LENGTH_MULTIPLIER(Any p0, Any p1)
 void _SET_CAM_DOF_FOCUS_DISTANCE_BIAS(Cam camera, float p1)
 void _SET_CAM_DOF_MAX_NEAR_IN_FOCUS_DISTANCE(Cam camera, float p1)
 void _SET_CAM_DOF_MAX_NEAR_IN_FOCUS_DISTANCE_BLEND_LEVEL(Cam camera, float p1)
 void ATTACH_CAM_TO_ENTITY(Cam cam, Entity entity, float xOffset, float yOffset, float zOffset, BOOL isRelative)
 void ATTACH_CAM_TO_PED_BONE(Cam cam, Ped ped, int boneIndex, float x, float y, float z, BOOL heading)
 void _ATTACH_CAM_TO_PED_BONE_2(Cam cam, Ped ped, int boneIndex, float p3, float p4, float p5, float p6, float p7, float p8, BOOL p9)
 void _ATTACH_CAM_TO_VEHICLE_BONE(Cam cam, Vehicle vehicle, int boneIndex, BOOL p3, float p4, float p5, float p6, float p7, float p8, float p9, BOOL p10)
 void DETACH_CAM(Cam cam)
 void SET_CAM_INHERIT_ROLL_VEHICLE(Cam cam, BOOL p1)
 void POINT_CAM_AT_COORD(Cam cam, float x, float y, float z)
 void POINT_CAM_AT_ENTITY(Cam cam, Entity entity, float p2, float p3, float p4, BOOL p5)
 void POINT_CAM_AT_PED_BONE(Cam cam, Ped ped, int boneIndex, float x, float y, float z, BOOL p6)
 void STOP_CAM_POINTING(Cam cam)
 void SET_CAM_AFFECTS_AIMING(Cam cam, BOOL toggle)
 void _0x661B5C8654ADD825(Cam cam, BOOL p1)
 void _0xA2767257A320FC82(Any p0, BOOL p1)
 void _0x271017B9BA825366(Any p0, BOOL p1)
 void SET_CAM_DEBUG_NAME(Cam camera, const char* name)
 void ADD_CAM_SPLINE_NODE(Cam camera, float x, float y, float z, float xRot, float yRot, float zRot, int length, int p8, int p9)
 void ADD_CAM_SPLINE_NODE_USING_CAMERA_FRAME(Cam cam, Cam cam2, int p2, int p3)
 void ADD_CAM_SPLINE_NODE_USING_CAMERA(Cam cam, Cam cam2, int p2, int p3)
 void ADD_CAM_SPLINE_NODE_USING_GAMEPLAY_FRAME(Cam cam, int p1, int p2)
 void SET_CAM_SPLINE_PHASE(Cam cam, float p1)
 float GET_CAM_SPLINE_PHASE(Cam cam)
 float GET_CAM_SPLINE_NODE_PHASE(Cam cam)
 void SET_CAM_SPLINE_DURATION(Cam cam, int timeDuration)
 void SET_CAM_SPLINE_SMOOTHING_STYLE(Cam cam, int smoothingStyle)
 int GET_CAM_SPLINE_NODE_INDEX(Cam cam)
 void SET_CAM_SPLINE_NODE_EASE(Cam cam, int p1, int p2, float p3)
 void SET_CAM_SPLINE_NODE_VELOCITY_SCALE(Cam cam, int p1, float scale)
 void OVERRIDE_CAM_SPLINE_VELOCITY(Cam cam, int p1, float p2, float p3)
 void OVERRIDE_CAM_SPLINE_MOTION_BLUR(Cam cam, int p1, float p2, float p3)
 void SET_CAM_SPLINE_NODE_EXTRA_FLAGS(Cam cam, int p1, int flags)
 BOOL IS_CAM_SPLINE_PAUSED(Any p0)
 void SET_CAM_ACTIVE_WITH_INTERP(Cam camTo, Cam camFrom, int duration, int easeLocation, int easeRotation)
 BOOL IS_CAM_INTERPOLATING(Cam cam)
 void SHAKE_CAM(Cam cam, const char* type, float amplitude)
 void ANIMATED_SHAKE_CAM(Cam cam, const char* p1, const char* p2, const char* p3, float amplitude)
 BOOL IS_CAM_SHAKING(Cam cam)
 void SET_CAM_SHAKE_AMPLITUDE(Cam cam, float amplitude)
 void STOP_CAM_SHAKING(Cam cam, BOOL p1)
 void SHAKE_SCRIPT_GLOBAL(const char* p0, float p1)
 void ANIMATED_SHAKE_SCRIPT_GLOBAL(const char* p0, const char* p1, const char* p2, float p3)
 BOOL IS_SCRIPT_GLOBAL_SHAKING()
 void STOP_SCRIPT_GLOBAL_SHAKING(BOOL p0)
 BOOL PLAY_CAM_ANIM(Cam cam, const char* animName, const char* animDictionary, float x, float y, float z, float xRot, float yRot, float zRot, BOOL p9, int p10)
 BOOL IS_CAM_PLAYING_ANIM(Cam cam, const char* animName, const char* animDictionary)
 void SET_CAM_ANIM_CURRENT_PHASE(Cam cam, float phase)
 float GET_CAM_ANIM_CURRENT_PHASE(Cam cam)
 BOOL PLAY_SYNCHRONIZED_CAM_ANIM(Any p0, Any p1, const char* animName, const char* animDictionary)
 void SET_FLY_CAM_HORIZONTAL_RESPONSE(Cam cam, float p1, float p2, float p3)
 void _SET_FLY_CAM_VERTICAL_SPEED_MULTIPLIER(Cam cam, float p1, float p2, float p3)
 void SET_FLY_CAM_MAX_HEIGHT(Cam cam, float height)
 void SET_FLY_CAM_COORD_AND_CONSTRAIN(Cam cam, float x, float y, float z)
 void _0xC8B5C4A79CC18B94(Cam cam)
 BOOL _0x5C48A1D6E3B33179(Cam cam)
 BOOL IS_SCREEN_FADED_OUT()
 BOOL IS_SCREEN_FADED_IN()
 BOOL IS_SCREEN_FADING_OUT()
 BOOL IS_SCREEN_FADING_IN()
 void DO_SCREEN_FADE_IN(int duration)
 void DO_SCREEN_FADE_OUT(int duration)
 void SET_WIDESCREEN_BORDERS(BOOL p0, int p1)
 BOOL _0x4879E4FE39074CDF()
 Vector3 GET_GAMEPLAY_CAM_COORD()
 Vector3 GET_GAMEPLAY_CAM_ROT(int rotationOrder)
 float GET_GAMEPLAY_CAM_FOV()
 void _0x487A82C650EB7799(float p0)
 void _0x0225778816FDC28C(float p0)
 float GET_GAMEPLAY_CAM_RELATIVE_HEADING()
 void SET_GAMEPLAY_CAM_RELATIVE_HEADING(float heading)
 float GET_GAMEPLAY_CAM_RELATIVE_PITCH()
 void SET_GAMEPLAY_CAM_RELATIVE_PITCH(float x, float Value2)
 void _SET_GAMEPLAY_CAM_RELATIVE_ROTATION(Any p0, Any p1, Any p2)
 void _0x28B022A17B068A3A(float p0, float p1)
 void _SET_GAMEPLAY_CAM_RAW_YAW(float yaw, Any p1)
 void _SET_GAMEPLAY_CAM_RAW_PITCH(float pitch)
 void _0x469F2ECDEC046337(BOOL p0)
 void SHAKE_GAMEPLAY_CAM(const char* shakeName, float intensity)
 BOOL IS_GAMEPLAY_CAM_SHAKING()
 void SET_GAMEPLAY_CAM_SHAKE_AMPLITUDE(float amplitude)
 void STOP_GAMEPLAY_CAM_SHAKING(BOOL p0)
 void _0x8BBACBF51DA047A8(Any p0)
 BOOL IS_GAMEPLAY_CAM_RENDERING()
 BOOL _0x3044240D2E0FA842()
 BOOL _0x705A276EBFF3133D()
 void _0xDB90C6CCA48940F1(BOOL p0)
 void _ENABLE_CROSSHAIR_THIS_FRAME()
 BOOL IS_GAMEPLAY_CAM_LOOKING_BEHIND()
 void _0x2AED6301F67007D5(Entity entity)
 void _0x49482F9FCD825AAA(Entity entity)
 void _0xFD3151CD37EA2245(Entity entity)
 void _0xB1381B97F70C7B30()
 void _0xDD79DF9F4D26E1C9()
 BOOL IS_SPHERE_VISIBLE(float x, float y, float z, float radius)
 BOOL IS_FOLLOW_PED_CAM_ACTIVE()
 BOOL SET_FOLLOW_PED_CAM_THIS_UPDATE(const char* camName, int p1)
 void _0x271401846BD26E92(BOOL p0, BOOL p1)
 void _0xC8391C309684595A()
 void _CLAMP_GAMEPLAY_CAM_YAW(float minimum, float maximum)
 void _CLAMP_GAMEPLAY_CAM_PITCH(float minimum, float maximum)
 void _ANIMATE_GAMEPLAY_CAM_ZOOM(float p0, float distance)
 void _0xE9EA16D6E54CDCA4(Vehicle p0, int p1)
 void _DISABLE_FIRST_PERSON_CAM_THIS_FRAME()
 void _0x59424BD75174C9B1()
 void _0x9F97DA93681F87EA()
 int GET_FOLLOW_PED_CAM_ZOOM_LEVEL()
 int GET_FOLLOW_PED_CAM_VIEW_MODE()
 void SET_FOLLOW_PED_CAM_VIEW_MODE(int viewMode)
 BOOL IS_FOLLOW_VEHICLE_CAM_ACTIVE()
 void _0x91EF6EE6419E5B97(BOOL p0)
 void _0x9DFE13ECDC1EC196(BOOL p0, BOOL p1)
 BOOL _0x79C0E43EB9B944E2(Hash hash)
 int GET_FOLLOW_VEHICLE_CAM_ZOOM_LEVEL()
 void SET_FOLLOW_VEHICLE_CAM_ZOOM_LEVEL(int zoomLevel)
 int GET_FOLLOW_VEHICLE_CAM_VIEW_MODE()
 void SET_FOLLOW_VEHICLE_CAM_VIEW_MODE(int viewMode)
 Any _0xEE778F8C7E1142E2(Any p0)
 void _0x2A2173E46DAECD12(Any p0, Any p1)
 Any _0x19CAFA3C87F7C2FF()
 void _USE_STUNT_CAMERA_THIS_FRAME()
 void _0x425A920FDB9A0DDA(const char* camName)
 void _0x0AA27680A0BD43FA()
 void _0x5C90CAB09951A12F(Any p0)
 BOOL IS_AIM_CAM_ACTIVE()
 BOOL _IS_AIM_CAM_THIRD_PERSON_ACTIVE()
 BOOL IS_FIRST_PERSON_AIM_CAM_ACTIVE()
 void DISABLE_AIM_CAM_THIS_UPDATE()
 float GET_FIRST_PERSON_AIM_CAM_ZOOM_FACTOR()
 void SET_FIRST_PERSON_AIM_CAM_ZOOM_FACTOR(float p0)
 void _0xCED08CBE8EBB97C7(float p0, float p1)
 void _0x2F7F2B26DD3F18EE(float p0, float p1)
 void _SET_FIRST_PERSON_CAM_PITCH_RANGE(float p0, float p1)
 void _SET_FIRST_PERSON_CAM_NEAR_CLIP(float p0)
 void _SET_THIRD_PERSON_AIM_CAM_NEAR_CLIP(float p0)
 void _0x4008EDF7D6E48175(BOOL p0)
 void _0x380B4968D1E09E55()
 Vector3 GET_FINAL_RENDERED_CAM_COORD()
 Vector3 GET_FINAL_RENDERED_CAM_ROT(int rotationOrder)
 Vector3 GET_FINAL_RENDERED_IN_WHEN_FRIENDLY_ROT(Any p0, Any p1)
 float GET_FINAL_RENDERED_CAM_FOV()
 float GET_FINAL_RENDERED_IN_WHEN_FRIENDLY_FOV(Any p0)
 float GET_FINAL_RENDERED_CAM_NEAR_CLIP()
 float GET_FINAL_RENDERED_CAM_FAR_CLIP()
 float GET_FINAL_RENDERED_CAM_NEAR_DOF()
 float GET_FINAL_RENDERED_CAM_FAR_DOF()
 float GET_FINAL_RENDERED_CAM_MOTION_BLUR_STRENGTH()
 void SET_GAMEPLAY_COORD_HINT(float x, float y, float z, int duration, int blendOutDuration, int blendInDuration, int unk)
 void SET_GAMEPLAY_PED_HINT(Ped p0, float x1, float y1, float z1, BOOL p4, Any p5, Any p6, Any p7)
 void SET_GAMEPLAY_VEHICLE_HINT(Any p0, float p1, float p2, float p3, BOOL p4, Any p5, Any p6, Any p7)
 void SET_GAMEPLAY_OBJECT_HINT(Any p0, float p1, float p2, float p3, BOOL p4, Any p5, Any p6, Any p7)
 void SET_GAMEPLAY_ENTITY_HINT(Entity entity, float xOffset, float yOffset, float zOffset, BOOL p4, int p5, int p6, int p7, Any p8)
 BOOL IS_GAMEPLAY_HINT_ACTIVE()
 void STOP_GAMEPLAY_HINT(BOOL p0)
 void _0xCCD078C2665D2973(BOOL p0)
 void _0x247ACBC4ABBC9D1C(BOOL p0)
 Any _0xBF72910D0F26F025()
 void SET_GAMEPLAY_HINT_FOV(float FOV)
 void _SET_GAMEPLAY_HINT_ANIM_OFFSETZ(float p0)
 void _SET_GAMEPLAY_HINT_ANGLE(float p0)
 void _SET_GAMEPLAY_HINT_ANIM_OFFSETX(float p0)
 void _SET_GAMEPLAY_HINT_ANIM_OFFSETY(float p0)
 void _SET_GAMEPLAY_HINT_ANIM_CLOSEUP(BOOL p0)
 void SET_CINEMATIC_BUTTON_ACTIVE(BOOL p0)
 BOOL IS_CINEMATIC_CAM_RENDERING()
 void SHAKE_CINEMATIC_CAM(const char* p0, float p1)
 BOOL IS_CINEMATIC_CAM_SHAKING()
 void SET_CINEMATIC_CAM_SHAKE_AMPLITUDE(float p0)
 void STOP_CINEMATIC_CAM_SHAKING(BOOL p0)
 void _DISABLE_VEHICLE_FIRST_PERSON_CAM_THIS_FRAME()
 void _0x62ECFCFDEE7885D6()
 void _0x9E4CFFF989258472()
 void INVALIDATE_IDLE_CAM()
 BOOL _0xCA9D2AA3E326D720()
 BOOL _IS_IN_VEHICLE_CAM_DISABLED()
 void CREATE_CINEMATIC_SHOT(Any p0, int p1, Any p2, Entity entity)
 BOOL IS_CINEMATIC_SHOT_ACTIVE(Any p0)
 void STOP_CINEMATIC_SHOT(Any p0)
 void _0xA41BCD7213805AAC(BOOL p0)
 void _0xDC9DA9E8789F5246()
 void SET_CINEMATIC_MODE_ACTIVE(BOOL p0)
 Any _0x1F2300CB7FA7B7F6()
 Any _0x17FCA7199A530203()
 Any _0xD7360051C885628B()
 BOOL _0xF5F1E89A970B7796()
 void _0x7B8A361C1813FBEF()
 void STOP_CUTSCENE_CAM_SHAKING()
 void _0x324C5AA411DA7737(Any p0)
 void _0x12DED8CA53D47EA5(float p0)
 Ped GET_FOCUS_PED_ON_SCREEN(float p0, int p1, float p2, float p3, float p4, float p5, float p6, int p7, int p8)
 void _0x5A43C76F7FC7BA5F()
 void _SET_CAM_EFFECT(int p0)
 void _0x5C41E6BABC9E2112(Any p0)
 void _SET_GAMEPLAY_CAM_VEHICLE_CAMERA(const char* vehicleName)
 void _SET_GAMEPLAY_CAM_VEHICLE_CAMERA_NAME(Any p0)
 Any _0xEAF0FA793D05C592()
 void _0x62374889A4D59F72()
 float _REPLAY_FREE_CAM_GET_MAX_RANGE()
}

namespace CLOCK
{
 void SET_CLOCK_TIME(int hour, int minute, int second)
 void PAUSE_CLOCK(BOOL toggle)
 void ADVANCE_CLOCK_TIME_TO(int hour, int minute, int second)
 void ADD_TO_CLOCK_TIME(int hours, int minutes, int seconds)
 int GET_CLOCK_HOURS()
 int GET_CLOCK_MINUTES()
 int GET_CLOCK_SECONDS()
 void SET_CLOCK_DATE(int day, int month, int year)
 int GET_CLOCK_DAY_OF_WEEK()
 int GET_CLOCK_DAY_OF_MONTH()
 int GET_CLOCK_MONTH()
 int GET_CLOCK_YEAR()
 int GET_MILLISECONDS_PER_GAME_MINUTE()
 void GET_POSIX_TIME(int* year, int* month, int* day, int* hour, int* minute, int* second)
 void GET_UTC_TIME(int* year, int* month, int* day, int* hour, int* minute, int* second)
 void GET_LOCAL_TIME(int* year, int* month, int* day, int* hour, int* minute, int* second)
}

namespace CUTSCENE
{
 void REQUEST_CUTSCENE(const char* cutsceneName, int flags)
 void REQUEST_CUTSCENE_WITH_PLAYBACK_LIST(const char* cutsceneName, int playbackFlags, int flags)
 void REMOVE_CUTSCENE()
 BOOL HAS_CUTSCENE_LOADED()
 BOOL HAS_THIS_CUTSCENE_LOADED(const char* cutsceneName)
 void _0x8D9DF6ECA8768583(int threadId)
 BOOL CAN_REQUEST_ASSETS_FOR_CUTSCENE_ENTITY()
 BOOL IS_CUTSCENE_PLAYBACK_FLAG_SET(int flag)
 void SET_CUTSCENE_ENTITY_STREAMING_FLAGS(const char* cutsceneEntName, int p1, int p2)
 void REQUEST_CUT_FILE(const char* cutsceneName)
 BOOL HAS_CUT_FILE_LOADED(const char* cutsceneName)
 void REMOVE_CUT_FILE(const char* cutsceneName)
 int _GET_CUT_FILE_NUM_SECTIONS(const char* cutsceneName)
 void START_CUTSCENE(int flags)
 void START_CUTSCENE_AT_COORDS(float x, float y, float z, int flags)
 void STOP_CUTSCENE(BOOL p0)
 void STOP_CUTSCENE_IMMEDIATELY()
 void SET_CUTSCENE_ORIGIN(float x, float y, float z, float p3, int p4)
 void _0x011883F41211432A(float x1, float y1, float z1, float x2, float y2, float z2, int p6)
 int GET_CUTSCENE_TIME()
 int GET_CUTSCENE_TOTAL_DURATION()
 int _0x971D7B15BCDBEF99()
 BOOL WAS_CUTSCENE_SKIPPED()
 BOOL HAS_CUTSCENE_FINISHED()
 BOOL IS_CUTSCENE_ACTIVE()
 BOOL IS_CUTSCENE_PLAYING()
 int GET_CUTSCENE_SECTION_PLAYING()
 Entity GET_ENTITY_INDEX_OF_CUTSCENE_ENTITY(const char* cutsceneEntName, Hash modelHash)
 int _0x583DF8E3D4AFBD98()
 BOOL _0x4CEBC1ED31E8925E(const char* cutsceneName)
 Any _0x4FCD976DA686580C(Any p0)
 void REGISTER_ENTITY_FOR_CUTSCENE(Ped cutscenePed, const char* cutsceneEntName, int p2, Hash modelHash, int p4)
 Entity GET_ENTITY_INDEX_OF_REGISTERED_ENTITY(const char* cutsceneEntName, Hash modelHash)
 void _0x7F96F23FA9B73327(Hash modelHash)
 void SET_CUTSCENE_TRIGGER_AREA(float p0, float p1, float p2, float p3, float p4, float p5)
 BOOL CAN_SET_ENTER_STATE_FOR_REGISTERED_ENTITY(const char* cutsceneEntName, Hash modelHash)
 BOOL CAN_SET_EXIT_STATE_FOR_REGISTERED_ENTITY(const char* cutsceneEntName, Hash modelHash)
 BOOL CAN_SET_EXIT_STATE_FOR_CAMERA(BOOL p0)
 void _0xC61B86C9F61EB404(BOOL toggle)
 void SET_CUTSCENE_FADE_VALUES(BOOL p0, BOOL p1, BOOL p2, BOOL p3)
 void _0x20746F7B1032A3C7(BOOL p0, BOOL p1, BOOL p2, BOOL p3)
 void _0x06EE9048FD080382(BOOL p0)
 int _0xA0FE76168A189DDB()
 void _0x2F137B508DE238F2(BOOL p0)
 void _0xE36A98D8AB3D3C66(BOOL p0)
 Any _0x5EDEF0CF8C1DAB3C()
 void _0x41FAA8FB2ECE8720(BOOL p0)
 void REGISTER_SYNCHRONISED_SCRIPT_SPEECH()
 void SET_CUTSCENE_PED_COMPONENT_VARIATION(const char* cutsceneEntName, int p1, int p2, int p3, Hash modelHash)
 void SET_CUTSCENE_PED_COMPONENT_VARIATION_FROM_PED(const char* cutsceneEntName, Ped ped, Hash modelHash)
 BOOL DOES_CUTSCENE_ENTITY_EXIST(const char* cutsceneEntName, Hash modelHash)
 void SET_CUTSCENE_PED_PROP_VARIATION(const char* cutsceneEntName, int p1, int p2, int p3, Hash modelHash)
 BOOL _0x708BDD8CD795B043()
}

namespace DATAFILE
{
 void DATAFILE_WATCH_REQUEST_ID(int id)
 void DATAFILE_CLEAR_WATCH_LIST()
 BOOL DATAFILE_IS_VALID_REQUEST_ID(int index)
 BOOL DATAFILE_HAS_LOADED_FILE_DATA(Any p0)
 BOOL DATAFILE_HAS_VALID_FILE_DATA(Any p0)
 BOOL DATAFILE_SELECT_ACTIVE_FILE(Any p0)
 BOOL DATAFILE_DELETE_REQUESTED_FILE(Any p0)
 BOOL UGC_CREATE_CONTENT(Any* data, int dataCount, const char* contentName, const char* description, const char* tagsCsv, const char* contentTypeName, BOOL publish)
 BOOL UGC_CREATE_MISSION(const char* contentName, const char* description, const char* tagsCsv, const char* contentTypeName, BOOL publish)
 BOOL UGC_UPDATE_CONTENT(const char* contentId, Any* data, int dataCount, const char* contentName, const char* description, const char* tagsCsv, const char* contentTypeName)
 BOOL UGC_UPDATE_MISSION(const char* contentId, const char* contentName, const char* description, const char* tagsCsv, const char* contentTypeName)
 BOOL UGC_SET_PLAYER_DATA(const char* contentId, float rating, const char* contentTypeName)
 BOOL DATAFILE_SELECT_UGC_DATA(int p0)
 BOOL DATAFILE_SELECT_UGC_STATS(int p0, BOOL p1)
 BOOL DATAFILE_SELECT_UGC_PLAYER_DATA(int p0)
 BOOL DATAFILE_SELECT_CREATOR_STATS(int p0)
 BOOL DATAFILE_LOAD_OFFLINE_UGC(const char* filename)
 void DATAFILE_CREATE()
 void DATAFILE_DELETE()
 void DATAFILE_STORE_MISSION_HEADER()
 void DATAFILE_FLUSH_MISSION_HEADER()
 const char* DATAFILE_GET_FILE_DICT()
 BOOL DATAFILE_START_SAVE_TO_CLOUD(const char* filename)
 BOOL DATAFILE_UPDATE_SAVE_TO_CLOUD(BOOL* p0)
 BOOL DATAFILE_IS_SAVE_PENDING()
 void _OBJECT_VALUE_ADD_BOOLEAN(Any* objectData, const char* key, BOOL value)
 void _OBJECT_VALUE_ADD_INTEGER(Any* objectData, const char* key, int value)
 void _OBJECT_VALUE_ADD_FLOAT(Any* objectData, const char* key, float value)
 void _OBJECT_VALUE_ADD_STRING(Any* objectData, const char* key, const char* value)
 void _OBJECT_VALUE_ADD_VECTOR3(Any* objectData, const char* key, float valueX, float valueY, float valueZ)
 Any* _OBJECT_VALUE_ADD_OBJECT(Any* objectData, const char* key)
 Any* _OBJECT_VALUE_ADD_ARRAY(Any* objectData, const char* key)
 BOOL _OBJECT_VALUE_GET_BOOLEAN(Any* objectData, const char* key)
 int _OBJECT_VALUE_GET_INTEGER(Any* objectData, const char* key)
 float _OBJECT_VALUE_GET_FLOAT(Any* objectData, const char* key)
 const char* _OBJECT_VALUE_GET_STRING(Any* objectData, const char* key)
 Vector3 _OBJECT_VALUE_GET_VECTOR3(Any* objectData, const char* key)
 Any* _OBJECT_VALUE_GET_OBJECT(Any* objectData, const char* key)
 Any* _OBJECT_VALUE_GET_ARRAY(Any* objectData, const char* key)
 int _OBJECT_VALUE_GET_TYPE(Any* objectData, const char* key)
 void _ARRAY_VALUE_ADD_BOOLEAN(Any* arrayData, BOOL value)
 void _ARRAY_VALUE_ADD_INTEGER(Any* arrayData, int value)
 void _ARRAY_VALUE_ADD_FLOAT(Any* arrayData, float value)
 void _ARRAY_VALUE_ADD_STRING(Any* arrayData, const char* value)
 void _ARRAY_VALUE_ADD_VECTOR3(Any* arrayData, float valueX, float valueY, float valueZ)
 Any* _ARRAY_VALUE_ADD_OBJECT(Any* arrayData)
 BOOL _ARRAY_VALUE_GET_BOOLEAN(Any* arrayData, int arrayIndex)
 int _ARRAY_VALUE_GET_INTEGER(Any* arrayData, int arrayIndex)
 float _ARRAY_VALUE_GET_FLOAT(Any* arrayData, int arrayIndex)
 const char* _ARRAY_VALUE_GET_STRING(Any* arrayData, int arrayIndex)
 Vector3 _ARRAY_VALUE_GET_VECTOR3(Any* arrayData, int arrayIndex)
 Any* _ARRAY_VALUE_GET_OBJECT(Any* arrayData, int arrayIndex)
 int _ARRAY_VALUE_GET_SIZE(Any* arrayData)
 int _ARRAY_VALUE_GET_TYPE(Any* arrayData, int arrayIndex)
}

namespace DECORATOR
{
 BOOL DECOR_SET_TIME(Entity entity, const char* propertyName, int timestamp)
 BOOL DECOR_SET_BOOL(Entity entity, const char* propertyName, BOOL value)
 BOOL DECOR_SET_FLOAT(Entity entity, const char* propertyName, float value)
 BOOL DECOR_SET_INT(Entity entity, const char* propertyName, int value)
 BOOL DECOR_GET_BOOL(Entity entity, const char* propertyName)
 float DECOR_GET_FLOAT(Entity entity, const char* propertyName)
 int DECOR_GET_INT(Entity entity, const char* propertyName)
 BOOL DECOR_EXIST_ON(Entity entity, const char* propertyName)
 BOOL DECOR_REMOVE(Entity entity, const char* propertyName)
 void DECOR_REGISTER(const char* propertyName, int type)
 BOOL DECOR_IS_REGISTERED_AS_TYPE(const char* propertyName, int type)
 void DECOR_REGISTER_LOCK()
}

namespace DLC
{
 BOOL _0x241FCA5B1AA14F75()
 BOOL IS_DLC_PRESENT(Hash dlcHash)
 BOOL _0xF2E07819EF1A5289()
 BOOL _0x9489659372A81585()
 BOOL _0xA213B11DFF526300()
 BOOL _GET_EXTRA_CONTENT_PACK_HAS_BEEN_INSTALLED()
 BOOL GET_IS_LOADING_SCREEN_ACTIVE()
 BOOL _0xC4637A6D03C24CC3()
 BOOL HAS_CLOUD_REQUESTS_FINISHED(BOOL* p0, Any unused)
 void ON_ENTER_SP()
 void ON_ENTER_MP()
}

namespace ENTITY
{
 BOOL DOES_ENTITY_EXIST(Entity entity)
 BOOL DOES_ENTITY_BELONG_TO_THIS_SCRIPT(Entity entity, BOOL p1)
 BOOL DOES_ENTITY_HAVE_DRAWABLE(Entity entity)
 BOOL DOES_ENTITY_HAVE_PHYSICS(Entity entity)
 BOOL HAS_ENTITY_ANIM_FINISHED(Entity entity, const char* animDict, const char* animName, int p3)
 BOOL HAS_ENTITY_BEEN_DAMAGED_BY_ANY_OBJECT(Entity entity)
 BOOL HAS_ENTITY_BEEN_DAMAGED_BY_ANY_PED(Entity entity)
 BOOL HAS_ENTITY_BEEN_DAMAGED_BY_ANY_VEHICLE(Entity entity)
 BOOL HAS_ENTITY_BEEN_DAMAGED_BY_ENTITY(Entity entity1, Entity entity2, BOOL p2)
 BOOL HAS_ENTITY_CLEAR_LOS_TO_ENTITY(Entity entity1, Entity entity2, int traceType)
 BOOL HAS_ENTITY_CLEAR_LOS_TO_ENTITY_IN_FRONT(Entity entity1, Entity entity2)
 BOOL HAS_ENTITY_COLLIDED_WITH_ANYTHING(Entity entity)
 Hash GET_LAST_MATERIAL_HIT_BY_ENTITY(Entity entity)
 Vector3 GET_COLLISION_NORMAL_OF_LAST_HIT_FOR_ENTITY(Entity entity)
 void FORCE_ENTITY_AI_AND_ANIMATION_UPDATE(Entity entity)
 float GET_ENTITY_ANIM_CURRENT_TIME(Entity entity, const char* animDict, const char* animName)
 float GET_ENTITY_ANIM_TOTAL_TIME(Entity entity, const char* animDict, const char* animName)
 float GET_ANIM_DURATION(const char* animDict, const char* animName)
 Entity GET_ENTITY_ATTACHED_TO(Entity entity)
 Vector3 GET_ENTITY_COORDS(Entity entity, BOOL alive)
 Vector3 GET_ENTITY_FORWARD_VECTOR(Hash entity)
 float GET_ENTITY_FORWARD_X(Entity entity)
 float GET_ENTITY_FORWARD_Y(Entity entity)
 float GET_ENTITY_HEADING(Entity entity)
 float _GET_ENTITY_PHYSICS_HEADING(Entity entity)
 int GET_ENTITY_HEALTH(Entity entity)
 int GET_ENTITY_MAX_HEALTH(Entity entity)
 void SET_ENTITY_MAX_HEALTH(Entity entity, int value)
 float GET_ENTITY_HEIGHT(Entity entity, float X, float Y, float Z, BOOL atTop, BOOL inWorldCoords)
 float GET_ENTITY_HEIGHT_ABOVE_GROUND(Entity entity)
 void GET_ENTITY_MATRIX(Entity entity, Vector3* rightVector, Vector3* forwardVector, Vector3* upVector, Vector3* position)
 Hash GET_ENTITY_MODEL(Entity entity)
 Vector3 GET_OFFSET_FROM_ENTITY_GIVEN_WORLD_COORDS(Entity entity, float posX, float posY, float posZ)
 Vector3 GET_OFFSET_FROM_ENTITY_IN_WORLD_COORDS(Entity entity, float offsetX, float offsetY, float offsetZ)
 float GET_ENTITY_PITCH(Entity entity)
 void GET_ENTITY_QUATERNION(Entity entity, float* x, float* y, float* z, float* w)
 float GET_ENTITY_ROLL(Entity entity)
 Vector3 GET_ENTITY_ROTATION(Entity entity, int rotationOrder)
 Vector3 GET_ENTITY_ROTATION_VELOCITY(Entity entity)
 const char* GET_ENTITY_SCRIPT(Entity entity, ScrHandle* script)
 float GET_ENTITY_SPEED(Entity entity)
 Vector3 GET_ENTITY_SPEED_VECTOR(Entity entity, BOOL relative)
 float GET_ENTITY_UPRIGHT_VALUE(Entity entity)
 Vector3 GET_ENTITY_VELOCITY(Entity entity)
 Object GET_OBJECT_INDEX_FROM_ENTITY_INDEX(Entity entity)
 Ped GET_PED_INDEX_FROM_ENTITY_INDEX(Entity entity)
 Vehicle GET_VEHICLE_INDEX_FROM_ENTITY_INDEX(Entity entity)
 Vector3 GET_WORLD_POSITION_OF_ENTITY_BONE(Entity entity, int boneIndex)
 Player GET_NEAREST_PLAYER_TO_ENTITY(Entity entity)
 Player GET_NEAREST_PLAYER_TO_ENTITY_ON_TEAM(Entity entity, int team)
 int GET_ENTITY_TYPE(Entity entity)
 int GET_ENTITY_POPULATION_TYPE(Entity entity)
 BOOL IS_AN_ENTITY(int handle)
 BOOL IS_ENTITY_A_PED(Entity entity)
 BOOL IS_ENTITY_A_MISSION_ENTITY(Entity entity)
 BOOL IS_ENTITY_A_VEHICLE(Entity entity)
 BOOL IS_ENTITY_AN_OBJECT(Entity entity)
 BOOL IS_ENTITY_AT_COORD(Entity entity, float xPos, float yPos, float zPos, float xSize, float ySize, float zSize, BOOL p7, BOOL p8, int p9)
 BOOL IS_ENTITY_AT_ENTITY(Entity entity1, Entity entity2, float xSize, float ySize, float zSize, BOOL p5, BOOL p6, int p7)
 BOOL IS_ENTITY_ATTACHED(Entity entity)
 BOOL IS_ENTITY_ATTACHED_TO_ANY_OBJECT(Entity entity)
 BOOL IS_ENTITY_ATTACHED_TO_ANY_PED(Entity entity)
 BOOL IS_ENTITY_ATTACHED_TO_ANY_VEHICLE(Entity entity)
 BOOL IS_ENTITY_ATTACHED_TO_ENTITY(Entity from, Entity to)
 BOOL IS_ENTITY_DEAD(Entity entity, BOOL p1)
 BOOL IS_ENTITY_IN_AIR(Entity entity)
 BOOL IS_ENTITY_IN_ANGLED_AREA(Entity entity, float originX, float originY, float originZ, float edgeX, float edgeY, float edgeZ, float angle, BOOL p8, BOOL p9, Any p10)
 BOOL IS_ENTITY_IN_AREA(Entity entity, float x1, float y1, float z1, float x2, float y2, float z2, BOOL p7, BOOL p8, Any p9)
 BOOL IS_ENTITY_IN_ZONE(Entity entity, const char* zone)
 BOOL IS_ENTITY_IN_WATER(Entity entity)
 float GET_ENTITY_SUBMERGED_LEVEL(Entity entity)
 void _0x694E00132F2823ED(Entity entity, BOOL toggle)
 BOOL IS_ENTITY_ON_SCREEN(Entity entity)
 BOOL IS_ENTITY_PLAYING_ANIM(Entity entity, const char* animDict, const char* animName, int taskFlag)
 BOOL IS_ENTITY_(Entity entity)
 BOOL IS_ENTITY_TOUCHING_ENTITY(Entity entity, Entity targetEntity)
 BOOL IS_ENTITY_TOUCHING_MODEL(Entity entity, Hash modelHash)
 BOOL IS_ENTITY_UPRIGHT(Entity entity, float angle)
 BOOL IS_ENTITY_UPSIDEDOWN(Entity entity)
 BOOL IS_ENTITY_VISIBLE(Entity entity)
 BOOL IS_ENTITY_VISIBLE_TO_SCRIPT(Entity entity)
 BOOL IS_ENTITY_OCCLUDED(Entity entity)
 BOOL WOULD_ENTITY_BE_OCCLUDED(Hash entityModelHash, float x, float y, float z, BOOL p4)
 BOOL IS_ENTITY_WAITING_FOR_WORLD_COLLISION(Entity entity)
 void APPLY_FORCE_TO_ENTITY_CENTER_OF_MASS(Entity entity, int forceType, float x, float y, float z, BOOL p5, BOOL isDirectionRel, BOOL isForceRel, BOOL p8)
 void APPLY_FORCE_TO_ENTITY(Entity entity, int forceFlags, float x, float y, float z, float offX, float offY, float offZ, int boneIndex, BOOL isDirectionRel, BOOL ignoreUpVec, BOOL isForceRel, BOOL p12, BOOL p13)
 void ATTACH_ENTITY_TO_ENTITY(Entity entity1, Entity entity2, int boneIndex, float xPos, float yPos, float zPos, float xRot, float yRot, float zRot, BOOL p9, BOOL useSoftPinning, BOOL collision, BOOL isPed, int vertexIndex, BOOL fixedRot)
 void _ATTACH_ENTITY_BONE_TO_ENTITY_BONE(Any p0, Any p1, Any p2, Any p3, Any p4, Any p5)
 void _ATTACH_ENTITY_BONE_TO_ENTITY_BONE_PHYSICALLY(Any p0, Any p1, Any p2, Any p3, Any p4, Any p5)
 void ATTACH_ENTITY_TO_ENTITY_PHYSICALLY(Entity entity1, Entity entity2, int boneIndex1, int boneIndex2, float xPos1, float yPos1, float zPos1, float xPos2, float yPos2, float zPos2, float xRot, float yRot, float zRot, float breakForce, BOOL fixedRot, BOOL p15, BOOL collision, BOOL p17, int p18)
 void PROCESS_ENTITY_ATTACHMENTS(Entity entity)
 int GET_ENTITY_BONE_INDEX_BY_NAME(Entity entity, const char* boneName)
 void CLEAR_ENTITY_LAST_DAMAGE_ENTITY(Entity entity)
 void DELETE_ENTITY(Entity* entity)
 void DETACH_ENTITY(Entity entity, BOOL p1, BOOL collision)
 void FREEZE_ENTITY_POSITION(Entity entity, BOOL toggle)
 void _SET_ENTITY_SOMETHING(Entity entity, BOOL toggle)
 BOOL PLAY_ENTITY_ANIM(Entity entity, const char* animName, const char* animDict, float p3, BOOL loop, BOOL stayInAnim, BOOL p6, float delta, Any bitset)
 BOOL PLAY_SYNCHRONIZED_ENTITY_ANIM(Entity entity, int syncedScene, const char* animation, const char* propName, float p4, float p5, Any p6, float p7)
 BOOL PLAY_SYNCHRONIZED_MAP_ENTITY_ANIM(float p0, float p1, float p2, float p3, Any p4, Any p5, Any* p6, Any* p7, float p8, float p9, Any p10, float p11)
 BOOL STOP_SYNCHRONIZED_MAP_ENTITY_ANIM(float p0, float p1, float p2, float p3, Any p4, float p5)
 Any STOP_ENTITY_ANIM(Entity entity, const char* animation, const char* animGroup, float p3)
 BOOL STOP_SYNCHRONIZED_ENTITY_ANIM(Entity entity, float p1, BOOL p2)
 BOOL HAS_ANIM_EVENT_FIRED(Entity entity, Hash actionHash)
 BOOL FIND_ANIM_EVENT_PHASE(const char* animDictionary, const char* animName, const char* p2, Any* p3, Any* p4)
 void SET_ENTITY_ANIM_CURRENT_TIME(Entity entity, const char* animDictionary, const char* animName, float time)
 void SET_ENTITY_ANIM_SPEED(Entity entity, const char* animDictionary, const char* animName, float speedMultiplier)
 void SET_ENTITY_AS_MISSION_ENTITY(Entity entity, BOOL p1, BOOL p2)
 void SET_ENTITY_AS_NO_LONGER_NEEDED(Entity* entity)
 void SET_PED_AS_NO_LONGER_NEEDED(Ped* ped)
 void SET_VEHICLE_AS_NO_LONGER_NEEDED(Vehicle* vehicle)
 void SET_OBJECT_AS_NO_LONGER_NEEDED(Object* object)
 void SET_ENTITY_CAN_BE_DAMAGED(Entity entity, BOOL toggle)
 BOOL _GET_ENTITY_CAN_BE_DAMAGED(Entity entity)
 void SET_ENTITY_CAN_BE_DAMAGED_BY_RELATIONSHIP_GROUP(Entity entity, BOOL bCanBeDamaged, int relGroup)
 void _0x352E2B5CF420BF3B(Any p0, Any p1)
 void SET_ENTITY_CAN_BE_TARGETED_WITHOUT_LOS(Entity entity, BOOL toggle)
 void SET_ENTITY_COLLISION(Entity entity, BOOL toggle, BOOL keepPhysics)
 BOOL GET_ENTITY_COLLISION_DISABLED(Entity entity)
 void SET_ENTITY_COMPLETELY_DISABLE_COLLISION(Entity entity, BOOL p1, BOOL p2)
 void SET_ENTITY_COORDS(Entity entity, float xPos, float yPos, float zPos, BOOL xAxis = 0, BOOL yAxis = 0, BOOL zAxis = 0, BOOL clearArea = 0)
 void _SET_ENTITY_COORDS_2(Entity entity, float xPos, float yPos, float zPos, BOOL xAxis, BOOL yAxis, BOOL zAxis, BOOL clearArea)
 void SET_ENTITY_COORDS_NO_OFFSET(Entity entity, float xPos, float yPos, float zPos, BOOL xAxis, BOOL yAxis, BOOL zAxis)
 void SET_ENTITY_DYNAMIC(Entity entity, BOOL toggle)
 void SET_ENTITY_HEADING(Entity entity, float heading)
 void SET_ENTITY_HEALTH(Entity entity, int health, int p2)
 void SET_ENTITY_INVINCIBLE(Entity entity, BOOL toggle)
 void SET_ENTITY_IS_TARGET_PRIORITY(Entity entity, BOOL p1, float p2)
 void SET_ENTITY_LIGHTS(Entity entity, BOOL toggle)
 void SET_ENTITY_LOAD_COLLISION_FLAG(Entity entity, BOOL toggle, Any p2)
 BOOL HAS_COLLISION_LOADED_AROUND_ENTITY(Entity entity)
 void SET_ENTITY_MAX_SPEED(Entity entity, float speed)
 void SET_ENTITY_ONLY_DAMAGED_BY_PLAYER(Entity entity, BOOL toggle)
 void SET_ENTITY_ONLY_DAMAGED_BY_RELATIONSHIP_GROUP(Entity entity, BOOL p1, Any p2)
 void SET_ENTITY_PROOFS(Entity entity, BOOL bulletProof, BOOL fireProof, BOOL explosionProof, BOOL collisionProof, BOOL meleeProof, BOOL p6, BOOL p7, BOOL drownProof)
 BOOL _GET_ENTITY_PROOFS(Entity entity, BOOL* bulletProof, BOOL* fireProof, BOOL* explosionProof, BOOL* collisionProof, BOOL* meleeProof, BOOL* p6, BOOL* p7, BOOL* drownProof)
 void SET_ENTITY_QUATERNION(Entity entity, float x, float y, float z, float w)
 void SET_ENTITY_RECORDS_COLLISIONS(Entity entity, BOOL toggle)
 void SET_ENTITY_ROTATION(Entity entity, float pitch, float roll, float yaw, int rotationOrder, BOOL p5)
 void SET_ENTITY_VISIBLE(Entity entity, BOOL toggle, BOOL unk)
 void _0xC34BC448DA29F5E9(Entity entity, BOOL toggle)
 void _0xE66377CDDADA4810(Entity entity, BOOL p1)
 void SET_ENTITY_VELOCITY(Entity entity, float x, float y, float z)
 void SET_ENTITY_HAS_GRAVITY(Entity entity, BOOL toggle)
 void SET_ENTITY_LOD_DIST(Entity entity, int value)
 int GET_ENTITY_LOD_DIST(Entity entity)
 void SET_ENTITY_ALPHA(Entity entity, int alphaLevel, BOOL skin)
 int GET_ENTITY_ALPHA(Entity entity)
 void RESET_ENTITY_ALPHA(Entity entity)
 void _0x490861B88F4FD846(Any p0)
 void _0xCEA7C8E1B48FF68C(Any p0, Any p1)
 void _0x5C3B791D580E0BC2(Entity entity, float p1)
 void SET_ENTITY_ALWAYS_PRERENDER(Entity entity, BOOL toggle)
 void SET_ENTITY_RENDER_SCORCHED(Entity entity, BOOL toggle)
 void SET_ENTITY_TRAFFICLIGHT_OVERRIDE(Entity entity, int state)
 void _0x78E8E3A640178255(Entity entity)
 void CREATE_MODEL_SWAP(float x, float y, float z, float radius, Hash originalModel, Hash newModel, BOOL p6)
 void REMOVE_MODEL_SWAP(float x, float y, float z, float radius, Hash originalModel, Hash newModel, BOOL p6)
 void CREATE_MODEL_HIDE(float x, float y, float z, float radius, Hash model, BOOL p5)
 void CREATE_MODEL_HIDE_EXCLUDING_SCRIPT_OBJECTS(float x, float y, float z, float radius, Hash model, BOOL p5)
 void REMOVE_MODEL_HIDE(Any p0, Any p1, Any p2, Any p3, Any p4, Any p5)
 void CREATE_FORCED_OBJECT(float x, float y, float z, Any p3, Hash modelHash, BOOL p5)
 void REMOVE_FORCED_OBJECT(Any p0, Any p1, Any p2, Any p3, Any p4)
 void SET_ENTITY_NO_COLLISION_ENTITY(Entity entity1, Entity entity2, BOOL thisFrameOnly)
 void SET_ENTITY_MOTION_BLUR(Entity entity, BOOL toggle)
 void SET_CAN_AUTO_VAULT_ON_ENTITY(Entity entity, BOOL toggle)
 void SET_CAN_CLIMB_ON_ENTITY(Entity entity, BOOL toggle)
 void _0xDC6F8601FAF2E893(Entity entity, BOOL toggle)
 void _0x2C2E3DC128F44309(Entity entity, BOOL p1)
 void _0x1A092BB0C3808B96(Entity entity, BOOL p1)
 Any _0xCE6294A232D03786(Any p0, Any p1)
 Any _0x46F8696933A63C9B(Any p0, Any p1)
 Vector3 _0xBD8D32550E5CEBFE(Entity entity, int boneIndex)
 Any _0xB328DCC3A3AA401B(Any p0)
 void _ENABLE_ENTITY_UNK(Entity entity)
 void _0xB17BC6453F6CF5AC(Any p0, Any p1)
 void _0x68B562E124CC0AEF(Any p0, Any p1)
 void _0x36F32DE87082343E(Any p0, Any p1)
 Entity _GET_ENTITY_PICKUP(Entity entity, Hash modelHash)
 void _0xD7B80E7C3BEFC396(Any p0, Any p1)
}

namespace EVENT
{
 void SET_DECISION_MAKER(Ped ped, Hash name)
 void CLEAR_DECISION_MAKER_EVENT_RESPONSE(Hash name, int type)
 void BLOCK_DECISION_MAKER_EVENT(Hash name, int type)
 void UNBLOCK_DECISION_MAKER_EVENT(Hash name, int type)
 ScrHandle ADD_SHOCKING_EVENT_AT_POSITION(int type, float x, float y, float z, float duration)
 ScrHandle ADD_SHOCKING_EVENT_FOR_ENTITY(int type, Entity entity, float duration)
 BOOL IS_SHOCKING_EVENT_IN_SPHERE(int type, float x, float y, float z, float radius)
 BOOL REMOVE_SHOCKING_EVENT(ScrHandle event)
 void REMOVE_ALL_SHOCKING_EVENTS(BOOL p0)
 void REMOVE_SHOCKING_EVENT_SPAWN_BLOCKING_AREAS()
 void SUPPRESS_SHOCKING_EVENTS_NEXT_FRAME()
 void SUPPRESS_SHOCKING_EVENT_TYPE_NEXT_FRAME(int type)
 void SUPPRESS_AGITATION_EVENTS_NEXT_FRAME()
}

namespace FILES
{
 int _GET_NUM_DECORATIONS(int character)
 BOOL _GET_TATTOO_COLLECTION_DATA(int character, int index, Any* outComponent)
 void INIT_SHOP_PED_COMPONENT(Any* outComponent)
 void INIT_SHOP_PED_PROP(Any* outProp)
 int _0x50F457823CE6EB5F(int p0, int p1, int p2, int p3)
 int _GET_NUM_PROPS_FROM_OUTFIT(int character, int p1, int p2, BOOL p3, int p4, int componentId)
 void GET_SHOP_PED_QUERY_COMPONENT(int componentId, int* outComponent)
 void GET_SHOP_PED_COMPONENT(Hash componentHash, Any* outComponent)
 void GET_SHOP_PED_QUERY_PROP(Any p0, Any* p1)
 void GET_SHOP_PED_PROP(Hash componentHash, Any* outProp)
 Hash GET_HASH_NAME_FOR_COMPONENT(Entity entity, int componentId, int drawableVariant, int textureVariant)
 Hash GET_HASH_NAME_FOR_PROP(Entity entity, int componentId, int propIndex, int propTextureIndex)
 int GET_SHOP_PED_APPAREL_VARIANT_COMPONENT_COUNT(Hash componentHash)
 int _GET_SHOP_PED_APPAREL_VARIANT_PROP_COUNT(Hash propHash)
 void GET_VARIANT_COMPONENT(Hash componentHash, int componentId, Any* p2, Any* p3, Any* p4)
 void _GET_VARIANT_PROP(Any p0, Any p1, Any p2, Any p3, Any p4)
 int GET_SHOP_PED_APPAREL_FORCED_COMPONENT_COUNT(Hash componentHash)
 Any GET_SHOP_PED_APPAREL_FORCED_PROP_COUNT(Any p0)
 void GET_FORCED_COMPONENT(Hash componentHash, int componentId, Hash* nameHash, int* enumValue, int* componentType)
 void GET_FORCED_PROP(Any p0, Any p1, Any* p2, Any* p3, Any* p4)
 BOOL DOES_SHOP_PED_APPAREL_HAVE_RESTRICTION_TAG(Hash componentHash, Hash drawableSlotHash, int componentId)
 int _0xF3FBE2D50A6A8C28(int character, BOOL p1)
 void GET_SHOP_PED_QUERY_OUTFIT(Any p0, Any* outfit)
 void GET_SHOP_PED_OUTFIT(Any p0, Any* p1)
 int GET_SHOP_PED_OUTFIT_LOCATE(Any p0)
 BOOL GET_SHOP_PED_OUTFIT_PROP_VARIANT(Any outfit, int slot, Any* item)
 BOOL GET_SHOP_PED_OUTFIT_COMPONENT_VARIANT(Any outfit, int slot, Any* item)
 int GET_NUM_DLC_VEHICLES()
 Hash GET_DLC_VEHICLE_MODEL(int dlcVehicleIndex)
 BOOL GET_DLC_VEHICLE_DATA(int dlcVehicleIndex, int* outData)
 int GET_DLC_VEHICLE_FLAGS(int dlcVehicleIndex)
 int GET_NUM_DLC_WEAPONS()
 BOOL GET_DLC_WEAPON_DATA(int dlcWeaponIndex, int* outData)
 int GET_NUM_DLC_WEAPON_COMPONENTS(int dlcWeaponIndex)
 BOOL GET_DLC_WEAPON_COMPONENT_DATA(int dlcWeaponIndex, int dlcWeapCompIndex, int* ComponentDataPtr)
 BOOL IS_CONTENT_ITEM_LOCKED(Hash itemHash)
 BOOL IS_DLC_VEHICLE_MOD(Hash hash)
 Hash GET_DLC_VEHICLE_MOD_LOCK_HASH(Hash hash)
 void _LOAD_CONTENT_CHANGE_SET_GROUP(Hash hash)
 void _UNLOAD_CONTENT_CHANGE_SET_GROUP(Hash hash)
}

namespace FIRE
{
 FireId START_SCRIPT_FIRE(float X, float Y, float Z, int maxChildren, BOOL isGasFire)
 void REMOVE_SCRIPT_FIRE(FireId fireHandle)
 FireId START_ENTITY_FIRE(Entity entity)
 void STOP_ENTITY_FIRE(Entity entity)
 BOOL IS_ENTITY_ON_FIRE(Entity entity)
 int GET_NUMBER_OF_FIRES_IN_RANGE(float x, float y, float z, float radius)
 void _SET_FIRE_SPREAD_RATE(float p0)
 void STOP_FIRE_IN_RANGE(float x, float y, float z, float radius)
 BOOL GET_CLOSEST_FIRE_POS(Vector3* outPosition, float x, float y, float z)
 void ADD_EXPLOSION(float x, float y, float z, int explosionType, float damageScale, BOOL isAudible, BOOL isInvisible, float cameraShake, BOOL noDamage)
 void ADD_OWNED_EXPLOSION(Ped ped, float x, float y, float z, int explosionType, float damageScale, BOOL isAudible, BOOL isInvisible, float cameraShake)
 void ADD_EXPLOSION_WITH_USER_VFX(float x, float y, float z, int explosionType, Hash explosionFx, float damageScale, BOOL isAudible, BOOL isInvisible, float cameraShake)
 BOOL IS_EXPLOSION_IN_AREA(int explosionType, float x1, float y1, float z1, float x2, float y2, float z2)
 BOOL IS_EXPLOSION_ACTIVE_IN_AREA(int explosionType, float x1, float y1, float z1, float x2, float y2, float z2)
 BOOL IS_EXPLOSION_IN_SPHERE(int explosionType, float x, float y, float z, float radius)
 Entity _GET_ENTITY_INSIDE_EXPLOSION_SPHERE(int explosionType, float x, float y, float z, float radius)
 BOOL IS_EXPLOSION_IN_ANGLED_AREA(int explosionType, float x1, float y1, float z1, float x2, float y2, float z2, float angle)
 Entity _GET_ENTITY_INSIDE_EXPLOSION_AREA(int explosionType, float x1, float y1, float z1, float x2, float y2, float z2, float radius)
}

namespace GRAPHICS
{
 void SET_DEBUG_LINES_AND_SPHERES_DRAWING_ACTIVE(BOOL enabled)
 void DRAW_DEBUG_LINE(Any p0, Any p1, Any p2, Any p3, Any p4, Any p5, Any p6, Any p7, Any p8, Any p9)
 void DRAW_DEBUG_LINE_WITH_TWO_COLOURS(float x1, float y1, float z1, float x2, float y2, float z2, int r1, int g1, int b1, int r2, int g2, int b2, int alpha1, int alpha2)
 void DRAW_DEBUG_SPHERE(float x, float y, float z, float radius, int red, int green, int blue, int alpha)
 void DRAW_DEBUG_BOX(Any p0, Any p1, Any p2, Any p3, Any p4, Any p5, Any p6, Any p7, Any p8, Any p9)
 void DRAW_DEBUG_CROSS(float x, float y, float z, float size, int red, int green, int blue, int alpha)
 void DRAW_DEBUG_TEXT(const char* text, float x, float y, float z, int red, int green, int blue, int alpha)
 void DRAW_DEBUG_TEXT_2D(const char* text, float x, float y, float z, int red, int green, int blue, int alpha)
 void DRAW_LINE(float x1, float y1, float z1, float x2, float y2, float z2, int red, int green, int blue, int alpha)
 void DRAW_POLY(float x1, float y1, float z1, float x2, float y2, float z2, float x3, float y3, float z3, int red, int green, int blue, int alpha)
 void _0x29280002282F1928(Any p0, Any p1, Any p2, Any p3, Any p4, Any p5, Any p6, Any p7, Any p8, Any p9, Any p10, Any p11, Any p12, Any p13, Any p14, Any p15, Any p16, Any p17, Any p18, Any p19, Any p20, Any p21, Any p22, Any p23)
 void _0x736D7AA1B750856B(Any p0, Any p1, Any p2, Any p3, Any p4, Any p5, Any p6, Any p7, Any p8, Any p9, Any p10, Any p11, Any p12, Any p13, Any p14, Any p15, Any p16, Any p17, Any p18, Any p19, Any p20, Any p21, Any p22, Any p23, Any p24, Any p25, Any p26, Any p27, Any p28, Any p29, Any p30, Any p31)
 void DRAW_BOX(float x1, float y1, float z1, float x2, float y2, float z2, int red, int green, int blue, int alpha)
 void SET_BACKFACECULLING(BOOL toggle)
 void _0xC5C8F970D4EDFF71(Any p0)
 Any _0x1DD2139A9A20DCE8()
 Any _0x90A78ECAA4E78453()
 void _0x0A46AF8A78DC5E0A()
 BOOL _0x4862437A486F91B0(Any* p0, Any p1, Any p2, Any p3)
 int _0x1670F8D05056F257(Any* p0)
 Any _0x7FA5D82B8F58EC06()
 Any _0x5B0316762AFD4A64()
 void _0x346EF3ECAAAB149E()
 BOOL BEGIN_TAKE_HIGH_QUALITY_PHOTO()
 int GET_STATUS_OF_TAKE_HIGH_QUALITY_PHOTO()
 void _0xD801CC02177FA3F1()
 void _0x1BBC135A4D25EDDE(BOOL p0)
 void _0xF3F776ADA161E47D(Any p0, Any p1)
 BOOL SAVE_HIGH_QUALITY_PHOTO(int unused)
 int GET_STATUS_OF_SAVE_HIGH_QUALITY_PHOTO()
 BOOL _0x759650634F07B6B4(Any p0)
 Any _0xCB82A0BF0E3E3265(Any p0)
 void _0x6A12D88881435DCA()
 void _0x1072F115DAB0717E(BOOL p0, BOOL p1)
 int GET_MAXIMUM_NUMBER_OF_PHOTOS()
 int GET_MAXIMUM_NUMBER_OF_CLOUD_PHOTOS()
 int _GET_CURRENT_NUMBER_OF_PHOTOS()
 Any _0x2A893980E96B659A(Any p0)
 Any _0xF5BED327CEA362B1(Any p0)
 void _0x4AF92ACD3141D96C()
 Any _0xE791DF1F73ED2C8B(Any p0)
 Any _0xEC72C258667BE5EA(Any p0)
 int _RETURN_TWO(int p0)
 void _DRAW_LIGHT_WITH_RANGE_AND_SHADOW(float x, float y, float z, int r, int g, int b, float range, float intensity, float shadow)
 void DRAW_LIGHT_WITH_RANGE(float posX, float posY, float posZ, int colorR, int colorG, int colorB, float range, float intensity)
 void DRAW_SPOT_LIGHT(float posX, float posY, float posZ, float dirX, float dirY, float dirZ, int colorR, int colorG, int colorB, float distance, float brightness, float hardness, float radius, float falloff)
 void _DRAW_SPOT_LIGHT_WITH_SHADOW(float posX, float posY, float posZ, float dirX, float dirY, float dirZ, int colorR, int colorG, int colorB, float distance, float brightness, float roundness, float radius, float falloff, int shadowId)
 void FADE_UP_PED_LIGHT(float p0)
 void UPDATE_LIGHTS_ON_ENTITY(Entity entity)
 void _0x9641588DAB93B4B5(Any p0)
 Any _0x393BD2275CEB7793()
 void DRAW_MARKER(int type, float posX, float posY, float posZ, float dirX, float dirY, float dirZ, float rotX, float rotY, float rotZ, float scaleX, float scaleY, float scaleZ, int red, int green, int blue, int alpha, BOOL bobUpAndDown, BOOL faceCamera, int p19, BOOL rotate, const char* textureDict, const char* textureName, BOOL drawOnEnts)
 void _DRAW_MARKER_2(Any p0, Any p1, Any p2, Any p3, Any p4, Any p5, Any p6, Any p7, Any p8, Any p9, Any p10, Any p11, Any p12, Any p13, Any p14, Any p15, Any p16, Any p17, Any p18, Any p19, Any p20, Any p21, Any p22, Any p23, Any p24, Any p25)
 void _0x799017F9E3B10112(Any p0, Any p1, Any p2, Any p3, Any p4, Any p5, Any p6, Any p7)
 int CREATE_CHECKPOINT(int type, float posX1, float posY1, float posZ1, float posX2, float posY2, float posZ2, float radius, int red, int green, int blue, int alpha, int reserved)
 void _SET_CHECKPOINT_SCALE(int checkpoint, float p0)
 void _0x44621483FF966526(Any p0, Any p1)
 void SET_CHECKPOINT_CYLINDER_HEIGHT(int checkpoint, float nearHeight, float farHeight, float radius)
 void SET_CHECKPOINT_RGBA(int checkpoint, int red, int green, int blue, int alpha)
 void _SET_CHECKPOINT_ICON_RGBA(int checkpoint, int red, int green, int blue, int alpha)
 void _0xF51D36185993515D(int checkpoint, float posX, float posY, float posZ, float unkX, float unkY, float unkZ)
 void _0xFCF6788FC4860CD4(int checkpoint)
 void _0x615D3925E87A3B26(int checkpoint)
 void _0xDB1EA9411C8911EC(Any p0)
 void _0x3C788E7F6438754D(Any p0, Any p1, Any p2, Any p3)
 void DELETE_CHECKPOINT(int checkpoint)
 void _0x22A249A53034450A(BOOL p0)
 void _0xDC459CFA0CCE245B(BOOL toggle)
 void REQUEST_STREAMED_TEXTURE_DICT(const char* textureDict, BOOL p1)
 BOOL HAS_STREAMED_TEXTURE_DICT_LOADED(const char* textureDict)
 void SET_STREAMED_TEXTURE_DICT_AS_NO_LONGER_NEEDED(const char* textureDict)
 void DRAW_RECT(float x, float y, float width, float height, int r, int g, int b, int a, BOOL p8)
 void SET_SCRIPT_GFX_DRAW_BEHIND_PAUSEMENU(BOOL toggle)
 void SET_SCRIPT_GFX_DRAW_ORDER(int drawOrder)
 void SET_SCRIPT_GFX_ALIGN(int x, int y)
 void RESET_SCRIPT_GFX_ALIGN()
 void SET_SCRIPT_GFX_ALIGN_PARAMS(float x, float y, float p2, float p3)
 void _GET_SCRIPT_GFX_POSITION(float p0, float p1, float* p2, float* p3)
 float GET_SAFE_ZONE_SIZE()
 void DRAW_SPRITE(const char* textureDict, const char* textureName, float screenX, float screenY, float width, float height, float heading, int red, int green, int blue, int alpha, BOOL p11)
 void _0x2D3B147AFAD49DE0(Any p0, Any p1, Any p2, Any p3, Any p4, Any p5, Any p6, Any p7, Any p8, Any p9, Any p10, Any p11)
 void _DRAW_INTERACTIVE_SPRITE(Any p0, Any p1, Any p2, Any p3, Any p4, Any p5, Any p6, Any p7, Any p8, Any p9, Any p10)
 Any ADD_ENTITY_ICON(Entity entity, const char* icon)
 void SET_ENTITY_ICON_VISIBILITY(Entity entity, BOOL toggle)
 void SET_ENTITY_ICON_COLOR(Entity entity, int red, int green, int blue, int alpha)
 void SET_DRAW_ORIGIN(float x, float y, float z, Any p3)
 void CLEAR_DRAW_ORIGIN()
 int _SET_BINK_MOVIE_REQUESTED(const char* name)
 void _PLAY_BINK_MOVIE(int binkMovie)
 void _STOP_BINK_MOVIE(int binkMovie)
 void _RELEASE_BINK_MOVIE(int binkMovie)
 void _DRAW_BINK_MOVIE(int binkMovie, float p1, float p2, float p3, float p4, float p5, int r, int g, int b, int a)
 void _SET_BINK_MOVIE_PROGRESS(int binkMovie, float progress)
 float _GET_BINK_MOVIE_PROGRESS(int binkMovie)
 void _SET_BINK_MOVIE_UNK(int binkMovie, float value)
 void ATTACH_TV_AUDIO_TO_ENTITY(Entity entity)
 void SET_TV_AUDIO_FRONTEND(BOOL toggle)
 void _0x6805D58CAA427B72(Any p0, Any p1)
 int LOAD_MOVIE_MESH_SET(const char* movieMeshSetName)
 void RELEASE_MOVIE_MESH_SET(int movieMeshSet)
 Any _0x9B6E70C5CEEF4EEB(Any p0)
 void GET_SCREEN_RESOLUTION(int* x, int* y)
 void _GET_ACTIVE_SCREEN_RESOLUTION(int* x, int* y)
 float _GET_ASPECT_RATIO(BOOL b)
 Any _0xB2EBE8CBC58B90E9()
 BOOL GET_IS_WIDESCREEN()
 BOOL GET_IS_HIDEF()
 void _0xEFABC7722293DA7C()
 void SET_NIGHTVISION(BOOL toggle)
 BOOL GET_REQUESTINGNIGHTVISION()
 BOOL GET_USINGNIGHTVISION()
 void _0xEF398BEEE4EF45F9(BOOL p0)
 void _0x814AF7DCAACC597B(Any p0)
 void _0x43FA7CBE20DAB219(Any p0)
 void SET_NOISEOVERIDE(BOOL toggle)
 void SET_NOISINESSOVERIDE(float value)
 BOOL GET_SCREEN_COORD_FROM_WORLD_COORD(float worldX, float worldY, float worldZ, float* screenX, float* screenY)
 Vector3 GET_TEXTURE_RESOLUTION(const char* textureDict, const char* textureName)
 Any _0x95EB5E34F821BABE(Any p0, Any p1, Any p2)
 void _0xE2892E7E55D7073A(float p0)
 void SET_FLASH(float p0, float p1, float fadeIn, float duration, float fadeOut)
 void DISABLE_OCCLUSION_THIS_FRAME()
 void SET_ARTIFICIAL_LIGHTS_STATE(BOOL state)
 void _0xC35A6D07C93802B2()
 int CREATE_TRACKED_POINT()
 void SET_TRACKED_POINT_INFO(int point, float x, float y, float z, float radius)
 BOOL IS_TRACKED_POINT_VISIBLE(int point)
 void DESTROY_TRACKED_POINT(int point)
 Any _0xBE197EAA669238F4(Any p0, Any p1, Any p2, Any p3)
 void _0x61F95E5BB3E0A8C6(Any p0)
 void _0xAE51BC858F32BA66(Any p0, float p1, float p2, float p3, float p4)
 void _0x649C97D52332341A(Any p0)
 Any _0x2C42340F916C5930(Any p0)
 void _0x14FC5833464340A8()
 void _0x0218BA067D249DEA()
 void _0x1612C45F9E3E0D44()
 void _0x5DEBD9C4DC995692()
 void _0xAAE9BE70EC7C69AB(Any p0, Any p1, Any p2, Any p3, Any p4, Any p5, Any p6, Any p7)
 void _GRASS_LOD_SHRINK_SCRIPT_AREAS(Any p0, Any p1, Any p2, Any p3, Any p4, Any p5, Any p6)
 void _GRASS_LOD_RESET_SCRIPT_AREAS()
 void _0x03FC694AE06C5A20()
 void _0xD2936CAB8B58FCBD(Any p0, BOOL p1, float p2, float p3, float p4, float p5, BOOL p6, float p7)
 void _0x5F0F3F56635809EF(float p0)
 void _0x5E9DAF5A20F15908(float p0)
 void _0x36F6626459D91457(float p0)
 void _0x259BA6D4E6F808F1(Any p0)
 void _SET_FAR_SHADOWS_SUPPRESSED(BOOL toggle)
 void _0x25FC3E33A31AD0C9(BOOL p0)
 void _CASCADESHADOWS_SET_TYPE(const char* type)
 void _CASCADESHADOWS_RESET_TYPE()
 void _0x6DDBF9DFFC4AC080(BOOL p0)
 void _0xD39D13C9FEBF0511(BOOL p0)
 void _0x02AC28F3A01FA04A(float p0)
 void _0x0AE73D8DF3A762B2(BOOL p0)
 void _0xCA465D9CC0D231BA(Any p0)
 void GOLF_TRAIL_SET_ENABLED(BOOL toggle)
 void GOLF_TRAIL_SET_PATH(float p0, float p1, float p2, float p3, float p4, float p5, float p6, float p7, BOOL p8)
 void GOLF_TRAIL_SET_RADIUS(float p0, float p1, float p2)
 void GOLF_TRAIL_SET_COLOUR(int p0, int p1, int p2, int p3, int p4, int p5, int p6, int p7, int p8, int p9, int p10, int p11)
 void GOLF_TRAIL_SET_TESSELLATION(int p0, int p1)
 void _0xC0416B061F2B7E5E(BOOL p0)
 void GOLF_TRAIL_SET_FIXED_CONTROL_POINT(int type, float xPos, float yPos, float zPos, float p4, int red, int green, int blue, int alpha)
 void GOLF_TRAIL_SET_SHADER_PARAMS(float p0, float p1, float p2, float p3, float p4)
 void GOLF_TRAIL_SET_FACING(BOOL p0)
 Any _0xA4819F5E23E2FFAD()
 Vector3 _0xA4664972A9B8F8BA(Any p0)
 void SET_SEETHROUGH(BOOL toggle)
 BOOL GET_USINGSEETHROUGH()
 void SEETHROUGH_RESET()
 void _SEETHROUGH_SET_FADE_START_DISTANCE(float distance)
 void _SEETHROUGH_SET_FADE_END_DISTANCE(float distance)
 float _SEETHROUGH_GET_MAX_THICKNESS()
 void _SEETHROUGH_SET_MAX_THICKNESS(float thickness)
 void _SEETHROUGH_SET_NOISE_AMOUNT_MIN(float amount)
 void _SEETHROUGH_SET_NOISE_AMOUNT_MAX(float amount)
 void _SEETHROUGH_SET_HI_LIGHT_INTENSITY(float intensity)
 void _SEETHROUGH_SET_HI_LIGHT_NOISE(float noise)
 void SEETHROUGH_SET_HEATSCALE(int index, float heatScale)
 void _SEETHROUGH_SET_COLOR_NEAR(int red, int green, int blue)
 void _0xB3C641F3630BF6DA(float p0)
 float _0xE59343E9E96529E7()
 void _0x6A51F78772175A51(BOOL toggle)
 void _0xE63D7C6EECECB66B(BOOL toggle)
 void _0xE3E2C1B4C59DBC77(int unk)
 BOOL TRIGGER_SCREENBLUR_FADE_IN(float transitionTime)
 BOOL TRIGGER_SCREENBLUR_FADE_OUT(float transitionTime)
 void _0xDE81239437E8C5A8()
 float GET_SCREENBLUR_FADE_CURRENT_TIME()
 BOOL IS_SCREENBLUR_FADE_RUNNING()
 void TOGGLE_PAUSED_RENDERPHASES(BOOL toggle)
 BOOL GET_TOGGLE_PAUSED_RENDERPHASES_STATUS()
 void RESET_PAUSED_RENDERPHASES()
 void _0x851CD923176EBA7C()
 void _SET_HIDOF_ENV_BLUR_PARAMS(BOOL p0, BOOL p1, float p2, float p3, float p4, float p5)
 void _0xB569F41F3E7E83A4(Any p0)
 BOOL _0x7AC24EAB6D74118D(BOOL p0)
 Any _0xBCEDB009461DA156()
 BOOL _0x27FEB5254759CDE3(const char* textureDict, BOOL p1)
 int START_PARTICLE_FX_NON_LOOPED_AT_COORD(const char* effectName, float xPos, float yPos, float zPos, float xRot, float yRot, float zRot, float scale, BOOL xAxis, BOOL yAxis, BOOL zAxis)
 BOOL START_NETWORKED_PARTICLE_FX_NON_LOOPED_AT_COORD(const char* effectName, float xPos, float yPos, float zPos, float xRot, float yRot, float zRot, float scale, BOOL xAxis, BOOL yAxis, BOOL zAxis, BOOL p11)
 BOOL START_PARTICLE_FX_NON_LOOPED_ON_PED_BONE(const char* effectName, Ped ped, float offsetX, float offsetY, float offsetZ, float rotX, float rotY, float rotZ, int boneIndex, float scale, BOOL axisX, BOOL axisY, BOOL axisZ)
 BOOL START_NETWORKED_PARTICLE_FX_NON_LOOPED_ON_PED_BONE(const char* effectName, Ped ped, float offsetX, float offsetY, float offsetZ, float rotX, float rotY, float rotZ, int boneIndex, float scale, BOOL axisX, BOOL axisY, BOOL axisZ)
 BOOL START_PARTICLE_FX_NON_LOOPED_ON_ENTITY(const char* effectName, Entity entity, float offsetX, float offsetY, float offsetZ, float rotX, float rotY, float rotZ, float scale, BOOL axisX, BOOL axisY, BOOL axisZ)
 BOOL START_NETWORKED_PARTICLE_FX_NON_LOOPED_ON_ENTITY(const char* effectName, Entity entity, float offsetX, float offsetY, float offsetZ, float rotX, float rotY, float rotZ, float scale, BOOL axisX, BOOL axisY, BOOL axisZ)
 void SET_PARTICLE_FX_NON_LOOPED_COLOUR(float r, float g, float b)
 void SET_PARTICLE_FX_NON_LOOPED_ALPHA(float alpha)
 void _0x8CDE909A0370BB3A(BOOL toggle)
 int START_PARTICLE_FX_LOOPED_AT_COORD(const char* effectName, float x, float y, float z, float xRot, float yRot, float zRot, float scale, BOOL xAxis, BOOL yAxis, BOOL zAxis, BOOL p11)
 int START_PARTICLE_FX_LOOPED_ON_PED_BONE(const char* effectName, Ped ped, float xOffset, float yOffset, float zOffset, float xRot, float yRot, float zRot, int boneIndex, float scale, BOOL xAxis, BOOL yAxis, BOOL zAxis)
 int START_PARTICLE_FX_LOOPED_ON_ENTITY(const char* effectName, Entity entity, float xOffset, float yOffset, float zOffset, float xRot, float yRot, float zRot, float scale, BOOL xAxis, BOOL yAxis, BOOL zAxis)
 int START_PARTICLE_FX_LOOPED_ON_ENTITY_BONE(const char* effectName, Entity entity, float xOffset, float yOffset, float zOffset, float xRot, float yRot, float zRot, int boneIndex, float scale, BOOL xAxis, BOOL yAxis, BOOL zAxis)
 int START_NETWORKED_PARTICLE_FX_LOOPED_ON_ENTITY(const char* effectName, Entity entity, float xOffset, float yOffset, float zOffset, float xRot, float yRot, float zRot, float scale, BOOL xAxis, BOOL yAxis, BOOL zAxis, Any p12, Any p13, Any p14, Any p15)
 int START_NETWORKED_PARTICLE_FX_LOOPED_ON_ENTITY_BONE(const char* effectName, Entity entity, float xOffset, float yOffset, float zOffset, float xRot, float yRot, float zRot, int boneIndex, float scale, BOOL xAxis, BOOL yAxis, BOOL zAxis, Any p13, Any p14, Any p15, Any p16)
 void STOP_PARTICLE_FX_LOOPED(int ptfxHandle, BOOL p1)
 void REMOVE_PARTICLE_FX(int ptfxHandle, BOOL p1)
 void REMOVE_PARTICLE_FX_FROM_ENTITY(Entity entity)
 void REMOVE_PARTICLE_FX_IN_RANGE(float X, float Y, float Z, float radius)
 void _0xBA0127DA25FD54C9(Any p0, Any p1)
 BOOL DOES_PARTICLE_FX_LOOPED_EXIST(int ptfxHandle)
 void SET_PARTICLE_FX_LOOPED_OFFSETS(int ptfxHandle, float x, float y, float z, float rotX, float rotY, float rotZ)
 void SET_PARTICLE_FX_LOOPED_EVOLUTION(int ptfxHandle, const char* propertyName, float amount, BOOL noNetwork)
 void SET_PARTICLE_FX_LOOPED_COLOUR(int ptfxHandle, float r, float g, float b, BOOL p4)
 void SET_PARTICLE_FX_LOOPED_ALPHA(int ptfxHandle, float alpha)
 void SET_PARTICLE_FX_LOOPED_SCALE(int ptfxHandle, float scale)
 void SET_PARTICLE_FX_LOOPED_FAR_CLIP_DIST(int ptfxHandle, float range)
 void SET_PARTICLE_FX_CAM_INSIDE_VEHICLE(BOOL p0)
 void SET_PARTICLE_FX_CAM_INSIDE_NONPLAYER_VEHICLE(Vehicle vehicle, BOOL p1)
 void SET_PARTICLE_FX_SHOOTOUT_BOAT(Any p0)
 void _0x2A251AA48B2B46DB()
 void _0x908311265D42A820(Any p0)
 void _0x5F6DF3D92271E8A1(BOOL toggle)
 void _0x2B40A97646381508(Any p0)
 void ENABLE_CLOWN_BLOOD_VFX(BOOL toggle)
 void ENABLE_ALIEN_BLOOD_VFX(BOOL toggle)
 void _0x27E32866E9A5C416(float p0)
 void _0xBB90E12CAC1DAB25(float p0)
 void _0xCA4AE345A153D573(BOOL p0)
 void _0x54E22EA2C1956A8D(float p0)
 void _0x949F397A288B28B3(float p0)
 void _0xBA3D194057C79A7B(const char* p0)
 void _0x5DBF05DB5926D089(Any p0)
 void _0x9B079E5221D984D3(BOOL p0)
 void USE_PARTICLE_FX_ASSET(const char* name)
 void SET_PARTICLE_FX_OVERRIDE(const char* oldAsset, const char* newAsset)
 void RESET_PARTICLE_FX_OVERRIDE(const char* name)
 void _0xA46B73FAA3460AE1(BOOL p0)
 void _0xF78B803082D4386F(float p0)
 void WASH_DECALS_IN_RANGE(Any p0, Any p1, Any p2, Any p3, Any p4)
 void WASH_DECALS_FROM_VEHICLE(Vehicle vehicle, float p1)
 void FADE_DECALS_IN_RANGE(Any p0, Any p1, Any p2, Any p3, Any p4)
 void REMOVE_DECALS_IN_RANGE(float x, float y, float z, float range)
 void REMOVE_DECALS_FROM_OBJECT(Object obj)
 void REMOVE_DECALS_FROM_OBJECT_FACING(Object obj, float x, float y, float z)
 void REMOVE_DECALS_FROM_VEHICLE(Vehicle vehicle)
 int ADD_DECAL(int decalType, float posX, float posY, float posZ, float p4, float p5, float p6, float p7, float p8, float p9, float width, float height, float rCoef, float gCoef, float bCoef, float opacity, float timeout, BOOL p17, BOOL p18, BOOL p19)
 Any ADD_PETROL_DECAL(float x, float y, float z, float groundLvl, float width, float transparency)
 void START_PETROL_TRAIL_DECALS(float p0)
 void ADD_PETROL_TRAIL_DECAL_INFO(float x, float y, float z, float p3)
 void END_PETROL_TRAIL_DECALS()
 void REMOVE_DECAL(int decal)
 BOOL IS_DECAL_ALIVE(int decal)
 float GET_DECAL_WASH_LEVEL(int decal)
 void _0xD9454B5752C857DC()
 void _0x27CFB1B1E078CB2D()
 void _0x4B5CFC83122DF602()
 BOOL GET_IS_PETROL_DECAL_IN_RANGE(float xCoord, float yCoord, float zCoord, float radius)
 void _OVERRIDE_DECAL_TEXTURE(int decalType, const char* textureDict, const char* textureName)
 void _UNDO_DECAL_TEXTURE_OVERRIDE(int decalType)
 void MOVE_VEHICLE_DECALS(Any p0, Any p1)
 BOOL ADD_VEHICLE_CREW_EMBLEM(Vehicle vehicle, Ped ped, int boneIndex, float x1, float x2, float x3, float y1, float y2, float y3, float z1, float z2, float z3, float scale, Any p13, int alpha)
 Any _0x82ACC484FFA3B05F(Any p0)
 void REMOVE_VEHICLE_CREW_EMBLEM(Vehicle vehicle, int p1)
 int GET_VEHICLE_CREW_EMBLEM_REQUEST_STATE(Vehicle vehicle, int p1)
 BOOL DOES_VEHICLE_HAVE_CREW_EMBLEM(Vehicle vehicle, int p1)
 void _0x0E4299C549F0D1F1(BOOL toggle)
 void _0x02369D5C8A51FDCF(BOOL toggle)
 void _0x46D1A61A21F566FC(float p0)
 void OVERRIDE_INTERIOR_SMOKE_NAME(const char* name)
 void OVERRIDE_INTERIOR_SMOKE_LEVEL(float level)
 void OVERRIDE_INTERIOR_SMOKE_END()
 void _0xA44FF770DFBC5DAE()
 void DISABLE_VEHICLE_DISTANTLIGHTS(BOOL toggle)
 void _0x03300B57FCAC6DDB(BOOL p0)
 void _0x98EDF76A7271E4F2()
 void _SET_FORCE_PED_FOOTSTEPS_TRACKS(BOOL toggle)
 void _SET_FORCE_VEHICLE_TRAILS(BOOL toggle)
 void _DISABLE_SCRIPT_AMBIENT_EFFECTS(Any p0)
 void PRESET_INTERIOR_AMBIENT_CACHE(const char* timecycleModifierName)
 void SET_TIMECYCLE_MODIFIER(const char* modifierName)
 void SET_TIMECYCLE_MODIFIER_STRENGTH(float strength)
 void SET_TRANSITION_TIMECYCLE_MODIFIER(const char* modifierName, float transition)
 void _0x1CBA05AE7BD7EE05(float p0)
 void CLEAR_TIMECYCLE_MODIFIER()
 int GET_TIMECYCLE_MODIFIER_INDEX()
 int GET_TIMECYCLE_TRANSITION_MODIFIER_INDEX()
 Any _0x98D18905BF723B99()
 void PUSH_TIMECYCLE_MODIFIER()
 void POP_TIMECYCLE_MODIFIER()
 void SET_CURRENT_PLAYER_TCMODIFIER(const char* modifierName)
 void SET_PLAYER_TCMODIFIER_TRANSITION(float value)
 void SET_NEXT_PLAYER_TCMODIFIER(const char* modifierName)
 void ADD_TCMODIFIER_OVERRIDE(const char* modifierName1, const char* modifierName2)
 void _0x15E33297C3E8DC60(const char* p0)
 void _SET_EXTRA_TIMECYCLE_MODIFIER(const char* modifierName)
 void _CLEAR_EXTRA_TIMECYCLE_MODIFIER()
 int _GET_EXTRA_TIMECYCLE_MODIFIER_INDEX()
 void _SET_EXTRA_TIMECYCLE_MODIFIER_STRENGTH(float strength)
 void _RESET_EXTRA_TIMECYCLE_MODIFIER_STRENGTH()
 int REQUEST_SCALEFORM_MOVIE(const char* scaleformName)
 int _REQUEST_SCALEFORM_MOVIE_2(const char* scaleformName)
 int REQUEST_SCALEFORM_MOVIE_INSTANCE(const char* scaleformName)
 int _REQUEST_SCALEFORM_MOVIE_INTERACTIVE(const char* scaleformName)
 BOOL HAS_SCALEFORM_MOVIE_LOADED(int scaleformHandle)
 Any _0x2FCB133CA50A49EB(Any p0)
 Any _0x86255B1FC929E33E(Any p0)
 BOOL HAS_SCALEFORM_MOVIE_FILENAME_LOADED(const char* scaleformName)
 BOOL HAS_SCALEFORM_CONTAINER_MOVIE_LOADED_INTO_PARENT(int scaleformHandle)
 void SET_SCALEFORM_MOVIE_AS_NO_LONGER_NEEDED(int* scaleformHandle)
 void SET_SCALEFORM_MOVIE_TO_USE_SYSTEM_TIME(int scaleform, BOOL toggle)
 void _0x32F34FF7F617643B(Any p0, Any p1)
 void _0xE6A9F00D4240B519(Any p0, Any p1)
 void DRAW_SCALEFORM_MOVIE(int scaleformHandle, float x, float y, float width, float height, int red, int green, int blue, int alpha, int unk)
 void DRAW_SCALEFORM_MOVIE_FULLSCREEN(int scaleform, int red, int green, int blue, int alpha, int unk)
 void DRAW_SCALEFORM_MOVIE_FULLSCREEN_MASKED(int scaleform1, int scaleform2, int red, int green, int blue, int alpha)
 void DRAW_SCALEFORM_MOVIE_3D(int scaleform, float posX, float posY, float posZ, float rotX, float rotY, float rotZ, float p7, float p8, float p9, float scaleX, float scaleY, float scaleZ, Any p13)
 void DRAW_SCALEFORM_MOVIE_3D_SOLID(int scaleform, float posX, float posY, float posZ, float rotX, float rotY, float rotZ, float p7, float p8, float p9, float scaleX, float scaleY, float scaleZ, Any p13)
 void CALL_SCALEFORM_MOVIE_METHOD(int scaleform, const char* method)
 void CALL_SCALEFORM_MOVIE_METHOD_WITH_NUMBER(int scaleform, const char* methodName, float param1, float param2, float param3, float param4, float param5)
 void CALL_SCALEFORM_MOVIE_METHOD_WITH_STRING(int scaleform, const char* methodName, const char* param1, const char* param2, const char* param3, const char* param4, const char* param5)
 void CALL_SCALEFORM_MOVIE_METHOD_WITH_NUMBER_AND_STRING(int scaleform, const char* methodName, float floatParam1, float floatParam2, float floatParam3, float floatParam4, float floatParam5, const char* stringParam1, const char* stringParam2, const char* stringParam3, const char* stringParam4, const char* stringParam5)
 BOOL BEGIN_SCALEFORM_SCRIPT_HUD_MOVIE_METHOD(int hudComponent, const char* methodName)
 BOOL BEGIN_SCALEFORM_MOVIE_METHOD(int scaleform, const char* methodName)
 BOOL BEGIN_SCALEFORM_MOVIE_METHOD_ON_FRONTEND(const char* methodName)
 BOOL BEGIN_SCALEFORM_MOVIE_METHOD_ON_FRONTEND_HEADER(const char* methodName)
 void END_SCALEFORM_MOVIE_METHOD()
 Any END_SCALEFORM_MOVIE_METHOD_RETURN_VALUE()
 BOOL IS_SCALEFORM_MOVIE_METHOD_RETURN_VALUE_READY(Any returnValueData)
 int GET_SCALEFORM_MOVIE_METHOD_RETURN_VALUE_INT(Any returnValueData)
 BOOL _GET_SCALEFORM_MOVIE_METHOD_RETURN_VALUE_BOOL(Any returnValueData)
 const char* GET_SCALEFORM_MOVIE_METHOD_RETURN_VALUE_STRING(Any returnValueData)
 void SCALEFORM_MOVIE_METHOD_ADD_PARAM_INT(int value)
 void SCALEFORM_MOVIE_METHOD_ADD_PARAM_FLOAT(float value)
 void SCALEFORM_MOVIE_METHOD_ADD_PARAM_BOOL(BOOL value)
 void BEGIN_TEXT_COMMAND_SCALEFORM_STRING(const char* componentType)
 void END_TEXT_COMMAND_SCALEFORM_STRING()
 void _END_TEXT_COMMAND_SCALEFORM_STRING_2()
 void _SCALEFORM_MOVIE_METHOD_ADD_PARAM_TEXTURE_NAME_STRING_2(const char* string)
 void SCALEFORM_MOVIE_METHOD_ADD_PARAM_TEXTURE_NAME_STRING(const char* string)
 void SCALEFORM_MOVIE_METHOD_ADD_PARAM_PLAYER_NAME_STRING(const char* string)
 BOOL _0x5E657EF1099EDD65(Any p0)
 void SCALEFORM_MOVIE_METHOD_ADD_PARAM_LATEST_BRIEF_STRING(int value)
 void REQUEST_SCALEFORM_SCRIPT_HUD_MOVIE(int hudComponent)
 BOOL HAS_SCALEFORM_SCRIPT_HUD_MOVIE_LOADED(int hudComponent)
 void REMOVE_SCALEFORM_SCRIPT_HUD_MOVIE(int hudComponent)
 BOOL _0xD1C7CB175E012964(int scaleformHandle)
 void SET_TV_CHANNEL(int channel)
 int GET_TV_CHANNEL()
 void SET_TV_VOLUME(float volume)
 float GET_TV_VOLUME()
 void DRAW_TV_CHANNEL(float xPos, float yPos, float xScale, float yScale, float rotation, int red, int green, int blue, int alpha)
 void SET_TV_CHANNEL_PLAYLIST(int tvChannel, const char* playlistName, BOOL restart)
 void SET_TV_CHANNEL_PLAYLIST_AT_HOUR(int tvChannel, const char* playlistName, int hour)
 void CLEAR_TV_CHANNEL_PLAYLIST(int tvChannel)
 BOOL _IS_PLAYLIST_UNK(int tvChannel, Any p1)
 BOOL _IS_TV_PLAYLIST_ITEM_PLAYING(Hash videoCliphash)
 void ENABLE_MOVIE_KEYFRAME_WAIT(BOOL toggle)
 void _0xD1C55B110E4DF534(Any p0)
 Hash _0x30432A0118736E00()
 void ENABLE_MOVIE_SUBTITLES(BOOL toggle)
 BOOL UI3DSCENE_IS_AVAILABLE()
 BOOL UI3DSCENE_PUSH_PRESET(const char* presetName)
 BOOL _0x98C4FE6EC34154CA(const char* presetName, Ped ped, int p2, float posX, float posY, float posZ)
 void _0x7A42B2E236E71415()
 void _0x108BE26959A9D9BB(BOOL toggle)
 void TERRAINGRID_ACTIVATE(BOOL toggle)
 void TERRAINGRID_SET_PARAMS(float x, float y, float z, float p3, float rotation, float p5, float width, float height, float p8, float scale, float glowIntensity, float normalHeight, float heightDiff)
 void TERRAINGRID_SET_COLOURS(int lowR, int lowG, int lowB, int lowAlpha, int r, int g, int b, int alpha, int highR, int highG, int highB, int highAlpha)
 void ANIMPOSTFX_PLAY(const char* effectName, int duration, BOOL looped)
 void ANIMPOSTFX_STOP(const char* effectName)
 float _ANIMPOSTFX_GET_UNK(const char* effectName)
 BOOL ANIMPOSTFX_IS_RUNNING(const char* effectName)
 void ANIMPOSTFX_STOP_ALL()
 void _ANIMPOSTFX_STOP_AND_DO_UNK(const char* effectName)
}

namespace HUD
{
 void BEGIN_TEXT_COMMAND_BUSYSPINNER_ON(const char* string)
 void END_TEXT_COMMAND_BUSYSPINNER_ON(int busySpinnerType)
 void BUSYSPINNER_OFF()
 void PRELOAD_BUSYSPINNER()
 BOOL BUSYSPINNER_IS_ON()
 BOOL BUSYSPINNER_IS_DISPLAYING()
 void _0x9245E81072704B8A(BOOL p0)
 void _SET_MOUSE_CURSOR_ACTIVE_THIS_FRAME()
 void _SET_MOUSE_CURSOR_SPRITE(int spriteId)
 void _0x98215325A695E78A(BOOL p0)
 Any _0x3D9ACB1EB139E702()
 BOOL _0x632B2940C67F4EA9(int scaleformHandle, Any* p1, Any* p2, Any* p3)
 void THEFEED_ONLY_SHOW_TOOLTIPS(BOOL toggle)
 void THEFEED_SET_SCRIPTED_MENU_HEIGHT(float pos)
 void _THEFEED_DISABLE()
 void THEFEED_HIDE_THIS_FRAME()
 void _0x15CFA549788D35EF()
 void THEFEED_FLUSH_QUEUE()
 void THEFEED_REMOVE_ITEM(int notificationId)
 void THEFEED_FORCE_RENDER_ON()
 void THEFEED_FORCE_RENDER_OFF()
 void THEFEED_PAUSE()
 void THEFEED_RESUME()
 BOOL THEFEED_IS_PAUSED()
 void THEFEED_SPS_EXTEND_WIDESCREEN_ON()
 void THEFEED_SPS_EXTEND_WIDESCREEN_OFF()
 int THEFEED_GET_FIRST_VISIBLE_DELETE_REMAINING()
 void THEFEED_COMMENT_TELEPORT_POOL_ON()
 void THEFEED_COMMENT_TELEPORT_POOL_OFF()
 void _THEFEED_SET_NEXT_POST_BACKGROUND_COLOR(int hudColorIndex)
 void _THEFEED_SET_ANIMPOSTFX_COLOR(int red, int green, int blue, int alpha)
 void _THEFEED_SET_ANIMPOSTFX_COUNT(int count)
 void _THEFEED_SET_ANIMPOSTFX_SOUND(BOOL toggle)
 void THEFEED_RESET_ALL_PARAMETERS()
 void THEFEED_FREEZE_NEXT_POST()
 void THEFEED_CLEAR_FROZEN_POST()
 void _THEFEED_SET_FLUSH_ANIMPOSTFX(BOOL p0)
 void _THEFEED_ADD_TXD_REF(Any* p0, Any* p1, Any* p2, Any* p3)
 void BEGIN_TEXT_COMMAND_THEFEED_POST(const char* text)
 int END_TEXT_COMMAND_THEFEED_POST_STATS(const char* txdName, const char* textureName, BOOL flash, int iconType, BOOL p4, const char* sender, const char* subject)
 int END_TEXT_COMMAND_THEFEED_POST_MESSAGETEXT(const char* picName1, const char* picName2, BOOL flash, int iconType, const char* sender, const char* subject)
 int _END_TEXT_COMMAND_THEFEED_POST_MESSAGETEXT_GXT_ENTRY(const char* picName1, const char* picName2, BOOL flash, int iconType, const char* sender, const char* subject)
 int END_TEXT_COMMAND_THEFEED_POST_MESSAGETEXT_TU(const char* picName1, const char* picName2, BOOL flash, int iconType, const char* sender, const char* subject, float duration)
 int END_TEXT_COMMAND_THEFEED_POST_MESSAGETEXT_WITH_CREW_TAG(const char* picName1, const char* picName2, BOOL flash, int iconType, const char* sender, const char* subject, float duration, const char* clanTag)
 int END_TEXT_COMMAND_THEFEED_POST_MESSAGETEXT_WITH_CREW_TAG_AND_ADDITIONAL_ICON(const char* picName1, const char* picName2, BOOL flash, int iconType1, const char* sender, const char* subject, float duration, const char* clanTag, int iconType2, int p9)
 int END_TEXT_COMMAND_THEFEED_POST_TICKER(BOOL blink, BOOL p1)
 int END_TEXT_COMMAND_THEFEED_POST_TICKER_FORCED(BOOL blink, BOOL p1)
 int END_TEXT_COMMAND_THEFEED_POST_TICKER_WITH_TOKENS(BOOL blink, BOOL p1)
 int END_TEXT_COMMAND_THEFEED_POST_AWARD(const char* p0, const char* p1, int p2, int p3, const char* p4)
 int END_TEXT_COMMAND_THEFEED_POST_CREWTAG(BOOL p0, BOOL p1, int* p2, int p3, BOOL isLeader, BOOL unk0, int clanDesc, int R, int G, int B)
 int END_TEXT_COMMAND_THEFEED_POST_CREWTAG_WITH_GAME_NAME(BOOL p0, BOOL p1, int* p2, int p3, BOOL isLeader, BOOL unk0, int clanDesc, const char* playerName, int R, int G, int B)
 Any END_TEXT_COMMAND_THEFEED_POST_UNLOCK(Any p0, Any p1, Any p2)
 Any END_TEXT_COMMAND_THEFEED_POST_UNLOCK_TU(Any p0, Any p1, Any p2, Any p3)
 Any END_TEXT_COMMAND_THEFEED_POST_UNLOCK_TU_WITH_COLOR(Any p0, Any p1, Any p2, Any p3, Any p4, Any p5)
 int END_TEXT_COMMAND_THEFEED_POST_MPTICKER(BOOL blink, BOOL p1)
 int END_TEXT_COMMAND_THEFEED_POST_CREW_RANKUP(const char* p0, const char* p1, const char* p2, BOOL p3, BOOL p4)
 Any END_TEXT_COMMAND_THEFEED_POST_VERSUS_TU(Any* p0, Any* p1, Any p2, Any* p3, Any* p4, Any p5, Any p6, Any p7)
 int _END_TEXT_COMMAND_THEFEED_POST_REPLAY_ICON(int type, int image, const char* text)
 int _END_TEXT_COMMAND_THEFEED_POST_REPLAY_INPUT(int type, const char* button, const char* text)
 void BEGIN_TEXT_COMMAND_PRINT(const char* GxtEntry)
 void END_TEXT_COMMAND_PRINT(int duration, BOOL drawImmediately)
 void BEGIN_TEXT_COMMAND_IS_MESSAGE_DISPLAYED(const char* text)
 BOOL END_TEXT_COMMAND_IS_MESSAGE_DISPLAYED()
 void BEGIN_TEXT_COMMAND_DISPLAY_TEXT(const char* text)
 void END_TEXT_COMMAND_DISPLAY_TEXT(float x, float y, int p2)
 void _BEGIN_TEXT_COMMAND_GET_WIDTH(const char* text)
 float _END_TEXT_COMMAND_GET_WIDTH(BOOL p0)
 void _BEGIN_TEXT_COMMAND_LINE_COUNT(const char* entry)
 int _END_TEXT_COMMAND_LINE_COUNT(float x, float y)
 void BEGIN_TEXT_COMMAND_DISPLAY_HELP(const char* inputType)
 void END_TEXT_COMMAND_DISPLAY_HELP(int p0, BOOL loop, BOOL beep, int shape)
 void BEGIN_TEXT_COMMAND_IS_THIS_HELP_MESSAGE_BEING_DISPLAYED(const char* labelName)
 BOOL END_TEXT_COMMAND_IS_THIS_HELP_MESSAGE_BEING_DISPLAYED(int p0)
 void BEGIN_TEXT_COMMAND_SET_BLIP_NAME(const char* gxtentry)
 void END_TEXT_COMMAND_SET_BLIP_NAME(Blip blip)
 void _BEGIN_TEXT_COMMAND_OBJECTIVE(const char* p0)
 void _END_TEXT_COMMAND_OBJECTIVE(BOOL p0)
 void BEGIN_TEXT_COMMAND_CLEAR_PRINT(const char* text)
 void END_TEXT_COMMAND_CLEAR_PRINT()
 void BEGIN_TEXT_COMMAND_OVERRIDE_BUTTON_TEXT(const char* gxtEntry)
 void END_TEXT_COMMAND_OVERRIDE_BUTTON_TEXT(int p0)
 void ADD_TEXT_COMPONENT_INTEGER(int value)
 void ADD_TEXT_COMPONENT_FLOAT(float value, int decimalPlaces)
 void ADD_TEXT_COMPONENT_SUBSTRING_TEXT_LABEL(const char* labelName)
 void ADD_TEXT_COMPONENT_SUBSTRING_TEXT_LABEL_HASH_KEY(Hash gxtEntryHash)
 void ADD_TEXT_COMPONENT_SUBSTRING_BLIP_NAME(Blip blip)
 void ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME(const char* text)
 void ADD_TEXT_COMPONENT_SUBSTRING_TIME(int timestamp, int flags)
 void ADD_TEXT_COMPONENT_FORMATTED_INTEGER(int value, BOOL commaSeparated)
 void ADD_TEXT_COMPONENT_SUBSTRING_PHONE_NUMBER(const char* p0, int p1)
 void ADD_TEXT_COMPONENT_SUBSTRING_WEBSITE(const char* website)
 void _ADD_TEXT_COMPONENT_SUBSTRING_UNK(const char* p0)
 void SET_COLOUR_OF_NEXT_TEXT_COMPONENT(int hudColor)
 const char* _GET_TEXT_SUBSTRING(const char* text, int position, int length)
 const char* _GET_TEXT_SUBSTRING_SAFE(const char* text, int position, int length, int maxLength)
 const char* _GET_TEXT_SUBSTRING_SLICE(const char* text, int startPosition, int endPosition)
 const char* _GET_LABEL_TEXT(const char* labelName)
 void CLEAR_PRINTS()
 void CLEAR_BRIEF()
 void CLEAR_ALL_HELP_MESSAGES()
 void CLEAR_THIS_PRINT(const char* p0)
 void CLEAR_SMALL_PRINTS()
 BOOL DOES_TEXT_BLOCK_EXIST(const char* gxt)
 void REQUEST_ADDITIONAL_TEXT(const char* gxt, int slot)
 void REQUEST_ADDITIONAL_TEXT_FOR_DLC(const char* gxt, int slot)
 BOOL HAS_ADDITIONAL_TEXT_LOADED(int slot)
 void CLEAR_ADDITIONAL_TEXT(int p0, BOOL p1)
 BOOL IS_STREAMING_ADDITIONAL_TEXT(int p0)
 BOOL HAS_THIS_ADDITIONAL_TEXT_LOADED(const char* gxt, int slot)
 BOOL IS_MESSAGE_BEING_DISPLAYED()
 BOOL DOES_TEXT_LABEL_EXIST(const char* gxt)
 const char* _0x98C3CF913D895111(const char* string, int length)
 int GET_LENGTH_OF_STRING_WITH_THIS_TEXT_LABEL(const char* gxt)
 int GET_LENGTH_OF_LITERAL_STRING(const char* string)
 int GET_LENGTH_OF_LITERAL_STRING_IN_BYTES(const char* string)
 const char* GET_STREET_NAME_FROM_HASH_KEY(Hash hash)
 BOOL IS_HUD_PREFERENCE_SWITCHED_ON()
 BOOL IS_RADAR_PREFERENCE_SWITCHED_ON()
 BOOL IS_SUBTITLE_PREFERENCE_SWITCHED_ON()
 void DISPLAY_HUD(BOOL toggle)
 void _0x7669F9E39DC17063()
 void DISPLAY_HUD_WHEN_PAUSED_THIS_FRAME()
 void DISPLAY_RADAR(BOOL toggle)
 void _0xCD74233600C4EA6B(BOOL toggle)
 BOOL _0xC2D2AD9EAAE265B8()
 BOOL IS_HUD_HIDDEN()
 BOOL IS_RADAR_HIDDEN()
 BOOL IS_MINIMAP_RENDERING()
 void _0x0C698D8F099174C7(Any p0)
 void _0xE4C3B169876D33D7(Any p0)
 void _0xEB81A3DADD503187()
 void SET_BLIP_ROUTE(Blip blip, BOOL enabled)
 void _CLEAR_ALL_BLIP_ROUTES()
 void SET_BLIP_ROUTE_COLOUR(Blip blip, int colour)
 void _0x2790F4B17D098E26(BOOL toggle)
 void _0x6CDD58146A436083(Any p0)
 void _0xD1942374085C8469(Any p0)
 void ADD_NEXT_MESSAGE_TO_PREVIOUS_BRIEFS(BOOL p0)
 void _0x57D760D55F54E071(int p0)
 void SET_RADAR_ZOOM_PRECISE(float zoom)
 void SET_RADAR_ZOOM(int zoomLevel)
 void SET_RADAR_ZOOM_TO_BLIP(Blip blip, float zoom)
 void SET_RADAR_ZOOM_TO_DISTANCE(float zoom)
 void _0xD2049635DEB9C375()
 void GET_HUD_COLOUR(int hudColorIndex, int* r, int* g, int* b, int* a)
 void SET_SCRIPT_VARIABLE_HUD_COLOUR(int r, int g, int b, int a)
 void _SET_SCRIPT_VARIABLE_2_HUD_COLOUR(int r, int g, int b, int a)
 void REPLACE_HUD_COLOUR(int hudColorIndex, int hudColorIndex2)
 void REPLACE_HUD_COLOUR_WITH_RGBA(int hudColorIndex, int r, int g, int b, int a)
 void _SET_ABILITY_BAR_VISIBILITY_IN_MULTIPLAYER(BOOL visible)
 void FLASH_ABILITY_BAR(int millisecondsToFlash)
 void SET_ABILITY_BAR_VALUE(float p0, float p1)
 void FLASH_WANTED_DISPLAY(BOOL p0)
 void _0xBA8D65C1C65702E5(BOOL toggle)
 float _GET_TEXT_SCALE_HEIGHT(float size, int font)
 void SET_TEXT_SCALE(float scale, float size)
 void SET_TEXT_COLOUR(int red, int green, int blue, int alpha)
 void SET_TEXT_CENTRE(BOOL align)
 void SET_TEXT_RIGHT_JUSTIFY(BOOL toggle)
 void SET_TEXT_JUSTIFICATION(int justifyType)
 void SET_TEXT_WRAP(float start, float end)
 void SET_TEXT_LEADING(int p0)
 void SET_TEXT_PROPORTIONAL(BOOL p0)
 void SET_TEXT_FONT(int fontType)
 void SET_TEXT_DROP_SHADOW()
 void SET_TEXT_DROPSHADOW(int distance, int r, int g, int b, int a)
 void SET_TEXT_OUTLINE()
 void SET_TEXT_EDGE(int p0, int r, int g, int b, int a)
 void SET_TEXT_RENDER_ID(int renderId)
 int GET_DEFAULT_SCRIPT_RENDERTARGET_RENDER_ID()
 BOOL REGISTER_NAMED_RENDERTARGET(const char* name, BOOL p1)
 BOOL IS_NAMED_RENDERTARGET_REGISTERED(const char* name)
 BOOL RELEASE_NAMED_RENDERTARGET(const char* name)
 void LINK_NAMED_RENDERTARGET(Hash modelHash)
 int GET_NAMED_RENDERTARGET_RENDER_ID(const char* name)
 BOOL IS_NAMED_RENDERTARGET_LINKED(Hash modelHash)
 void CLEAR_HELP(BOOL toggle)
 BOOL IS_HELP_MESSAGE_ON_SCREEN()
 BOOL _0x214CD562A939246A()
 BOOL IS_HELP_MESSAGE_BEING_DISPLAYED()
 BOOL IS_HELP_MESSAGE_FADING_OUT()
 void _SET_HELP_MESSAGE_TEXT_STYLE(Any p0, Any p1, Any p2, Any p3, Any p4)
 BOOL _GET_LEVEL_BLIP_SPRITE()
 int _GET_WAYPOINT_BLIP_SPRITE()
 int GET_NUMBER_OF_ACTIVE_BLIPS()
 Blip GET_NEXT_BLIP_INFO_ID(int blipSprite)
 Blip GET_FIRST_BLIP_INFO_ID(int blipSprite)
 Any _0xD484BF71050CA1EE(Any p0)
 Vector3 GET_BLIP_INFO_ID_COORD(Blip blip)
 int GET_BLIP_INFO_ID_DISPLAY(Blip blip)
 int GET_BLIP_INFO_ID_TYPE(Blip blip)
 Entity GET_BLIP_INFO_ID_ENTITY_INDEX(Blip blip)
 Pickup GET_BLIP_INFO_ID_PICKUP_INDEX(Blip blip)
 Blip GET_BLIP_FROM_ENTITY(Entity entity)
 Blip ADD_BLIP_FOR_RADIUS(float posX, float posY, float posZ, float radius)
 Blip _ADD_BLIP_FOR_AREA(float x, float y, float z, float scaleX, float scaleY)
 Blip ADD_BLIP_FOR_ENTITY(Entity entity)
 Blip ADD_BLIP_FOR_PICKUP(Pickup pickup)
 Blip ADD_BLIP_FOR_COORD(float x, float y, float z)
 void TRIGGER_SONAR_BLIP(float posX, float posY, float posZ, float radius, int p4)
 void ALLOW_SONAR_BLIPS(BOOL toggle)
 void SET_BLIP_COORDS(Blip blip, float posX, float posY, float posZ)
 Vector3 GET_BLIP_COORDS(Blip blip)
 void SET_BLIP_SPRITE(Blip blip, int spriteId)
 int GET_BLIP_SPRITE(Blip blip)
 void _0x9FCB3CBFB3EAD69A(int p0, float p1)
 void _0xB7B873520C84C118()
 void SET_BLIP_NAME_FROM_TEXT_FILE(Blip blip, const char* gxtEntry)
 void SET_BLIP_NAME_TO_PLAYER_NAME(Blip blip, Player player)
 void SET_BLIP_ALPHA(Blip blip, int alpha)
 int GET_BLIP_ALPHA(Blip blip)
 void SET_BLIP_FADE(Blip blip, int opacity, int duration)
 int _0x2C173AE2BDB9385E(Blip blip)
 void SET_BLIP_ROTATION(Blip blip, int rotation)
 void _SET_BLIP_SQUARED_ROTATION(Any p0, Any p1)
 void SET_BLIP_FLASH_TIMER(Blip blip, int duration)
 void SET_BLIP_FLASH_INTERVAL(Blip blip, Any p1)
 void SET_BLIP_COLOUR(Blip blip, int color)
 void SET_BLIP_SECONDARY_COLOUR(Blip blip, float r, float g, float b)
 int GET_BLIP_COLOUR(Blip blip)
 int GET_BLIP_HUD_COLOUR(Blip blip)
 BOOL IS_BLIP_SHORT_RANGE(Blip blip)
 BOOL IS_BLIP_ON_MINIMAP(Blip blip)
 BOOL DOES_BLIP_HAVE_GPS_ROUTE(Blip blip)
 void SET_BLIP_HIDDEN_ON_LEGEND(Blip blip, BOOL toggle)
 void SET_BLIP_HIGH_DETAIL(Blip blip, BOOL toggle)
 void SET_BLIP_AS_MISSION_CREATOR_BLIP(Blip blip, BOOL toggle)
 BOOL IS_MISSION_CREATOR_BLIP(Blip blip)
 Blip GET_NEW_SELECTED_MISSION_CREATOR_BLIP()
 BOOL IS_HOVERING_OVER_MISSION_CREATOR_BLIP()
 void _0xF1A6C18B35BCADE6(BOOL p0)
 void _0x2916A928514C9827()
 void _0xB552929B85FC27EC(Any p0, Any p1)
 void SET_BLIP_FLASHES(Blip blip, BOOL toggle)
 void SET_BLIP_FLASHES_ALTERNATE(Blip blip, BOOL toggle)
 BOOL IS_BLIP_FLASHING(Blip blip)
 void SET_BLIP_AS_SHORT_RANGE(Blip blip, BOOL toggle)
 void SET_BLIP_SCALE(Blip blip, float scale)
 void _0xCD6524439909C979(Blip blip, float p1, float p2)
 void SET_BLIP_PRIORITY(Blip blip, int priority)
 void SET_BLIP_DISPLAY(Blip blip, int displayId)
 void SET_BLIP_CATEGORY(Blip blip, int index)
 void REMOVE_BLIP(Blip* blip)
 void SET_BLIP_AS_FRIENDLY(Blip blip, BOOL toggle)
 void PULSE_BLIP(Blip blip)
 void SHOW_NUMBER_ON_BLIP(Blip blip, int number)
 void HIDE_NUMBER_ON_BLIP(Blip blip)
 void SHOW_HEIGHT_ON_BLIP(Blip blip, BOOL toggle)
 void SHOW_TICK_ON_BLIP(Blip blip, BOOL toggle)
 void SHOW_HEADING_INDICATOR_ON_BLIP(Blip blip, BOOL toggle)
 void SHOW_OUTLINE_INDICATOR_ON_BLIP(Blip blip, BOOL toggle)
 void SHOW_FRIEND_INDICATOR_ON_BLIP(Blip blip, BOOL toggle)
 void SHOW_CREW_INDICATOR_ON_BLIP(Blip blip, BOOL toggle)
 void _SET_BLIP_DISPLAY_INDICATOR_ON_BLIP(Blip blip, BOOL toggle)
 void _0x4B5B620C9B59ED34(Any p0, Any p1)
 void _0x2C9F302398E13141(Any p0, Any p1)
 void _SET_BLIP_SHRINK(Blip blip, BOOL toggle)
 void SET_RADIUS_BLIP_EDGE(Any p0, BOOL p1)
 BOOL DOES_BLIP_EXIST(Blip blip)
 void SET_WAYPOINT_OFF()
 void _DELETE_WAYPOINT()
 void REFRESH_WAYPOINT()
 BOOL IS_WAYPOINT_ACTIVE()
 void SET_NEW_WAYPOINT(float x, float y)
 void SET_BLIP_BRIGHT(Blip blip, BOOL toggle)
 void SET_BLIP_SHOW_CONE(Blip blip, BOOL toggle)
 void _0xC594B315EDF2D4AF(Ped ped)
 void _0xF83D0FEBE75E62C9(Any p0, Any p1, Any p2, Any p3, Any p4, Any p5, Any p6, Any p7)
 void _0x35A3CD97B2C0A6D2(Any p0)
 void _0x8410C5E0CD847B9D()
 Any SET_MINIMAP_COMPONENT(int p0, BOOL p1, int p2)
 void _SHOW_SIGNIN_UI()
 Blip GET_MAIN_PLAYER_BLIP_ID()
 void _0x41350B4FC28E3941(BOOL p0)
 void HIDE_LOADING_ON_FADE_THIS_FRAME()
 void SET_RADAR_AS_INTERIOR_THIS_FRAME(Hash interior, float x, float y, int z, int zoom)
 void _0x504DFE62A1692296(BOOL toggle)
 void SET_RADAR_AS_EXTERIOR_THIS_FRAME()
 void _SET_PLAYER_BLIP_POSITION_THIS_FRAME(float x, float y)
 void _0xA17784FCA9548D15(Any p0, Any p1, Any p2)
 BOOL _IS_MINIMAP_IN_INTERIOR()
 void HIDE_MINIMAP_EXTERIOR_MAP_THIS_FRAME()
 void HIDE_MINIMAP_INTERIOR_MAP_THIS_FRAME()
 void DONT_TILT_MINIMAP_THIS_FRAME()
 void _0x55F5A5F07134DE60()
 void SET_WIDESCREEN_FORMAT(Any p0)
 void DISPLAY_AREA_NAME(BOOL toggle)
 void DISPLAY_CASH(BOOL toggle)
 void _0x170F541E1CADD1DE(BOOL p0)
 void _SET_PLAYER_CASH_CHANGE(int cash, int bank)
 void DISPLAY_AMMO_THIS_FRAME(BOOL display)
 void DISPLAY_SNIPER_SCOPE_THIS_FRAME()
 void HIDE_HUD_AND_RADAR_THIS_FRAME()
 void _0xE67C6DFD386EA5E7(BOOL p0)
 void SET_MULTIPLAYER_WALLET_CASH()
 void REMOVE_MULTIPLAYER_WALLET_CASH()
 void SET_MULTIPLAYER_BANK_CASH()
 void REMOVE_MULTIPLAYER_BANK_CASH()
 void SET_MULTIPLAYER_HUD_CASH(int p0, int p1)
 void REMOVE_MULTIPLAYER_HUD_CASH()
 void HIDE_HELP_TEXT_THIS_FRAME()
 BOOL _0x801879A9B4F4B2FB()
 void DISPLAY_HELP_TEXT_THIS_FRAME(const char* message, BOOL p1)
 void HUD_FORCE_WEAPON_WHEEL(BOOL show)
 void _0x488043841BBE156F()
 void _HUD_WEAPON_WHEEL_IGNORE_SELECTION()
 Hash _HUD_WEAPON_WHEEL_GET_SELECTED_HASH()
 void _HUD_WEAPON_WHEEL_SET_SLOT_HASH(Hash weaponHash)
 Any _HUD_WEAPON_WHEEL_GET_SLOT_HASH(Any p0)
 void _HUD_WEAPON_WHEEL_IGNORE_CONTROL_INPUT(BOOL p0)
 void SET_GPS_FLAGS(int p0, float p1)
 void CLEAR_GPS_FLAGS()
 void SET_RACE_TRACK_RENDER(BOOL toggle)
 void CLEAR_GPS_RACE_TRACK()
 void START_GPS_CUSTOM_ROUTE(int hudColor, BOOL p1, BOOL p2)
 void ADD_POINT_TO_GPS_CUSTOM_ROUTE(float x, float y, float z)
 void SET_GPS_CUSTOM_ROUTE_RENDER(BOOL p0, int p1, int p2)
 void CLEAR_GPS_CUSTOM_ROUTE()
 void START_GPS_MULTI_ROUTE(int hudColor, BOOL p1, BOOL p2)
 void ADD_POINT_TO_GPS_MULTI_ROUTE(float x, float y, float z)
 void SET_GPS_MULTI_ROUTE_RENDER(BOOL toggle)
 void CLEAR_GPS_MULTI_ROUTE()
 void CLEAR_GPS_PLAYER_WAYPOINT()
 void SET_GPS_FLASHES(BOOL toggle)
 void _0x7B21E0BB01E8224A(Any p0)
 void FLASH_MINIMAP_DISPLAY()
 void FLASH_MINIMAP_DISPLAY_WITH_COLOR(Any p0)
 void TOGGLE_STEALTH_RADAR(BOOL toggle)
 void SET_MINIMAP_IN_SPECTATOR_MODE(BOOL toggle, Ped ped)
 void SET_MISSION_NAME(BOOL p0, const char* name)
 void _SET_MISSION_NAME_2(BOOL p0, const char* name)
 void _0x817B86108EB94E51(BOOL p0, Any* p1, Any* p2, Any* p3, Any* p4, Any* p5, Any* p6, Any* p7, Any* p8)
 void SET_MINIMAP_BLOCK_WAYPOINT(BOOL toggle)
 void SET_MINIMAP_IN_PROLOGUE(BOOL toggle)
 void SET_MINIMAP_HIDE_FOW(BOOL toggle)
 float _GET_MINIMAP_REVEAL_PERCENTAGE()
 BOOL _GET_MINIMAP_AREA_IS_REVEALED(float x, float y, float radius)
 void _0x62E849B7EB28E770(BOOL p0)
 void _0x0923DBF87DFF735E(float x, float y, float z)
 void SET_MINIMAP_GOLF_COURSE(int hole)
 void SET_MINIMAP_GOLF_COURSE_OFF()
 void LOCK_MINIMAP_ANGLE(int angle)
 void UNLOCK_MINIMAP_ANGLE()
 void LOCK_MINIMAP_POSITION(float x, float y)
 void UNLOCK_MINIMAP_POSITION()
 void _SET_MINIMAP_ALTITUDE_INDICATOR_LEVEL(float altitude, BOOL p1, Any p2)
 void SET_HEALTH_HUD_DISPLAY_VALUES(Any p0, Any p1, BOOL p2)
 void SET_MAX_HEALTH_HUD_DISPLAY(Any p0)
 void SET_MAX_ARMOUR_HUD_DISPLAY(Any p0)
 void SET_BIGMAP_ACTIVE(BOOL toggleBigMap, BOOL showFullMap)
 BOOL IS_HUD_COMPONENT_ACTIVE(int id)
 BOOL IS_SCRIPTED_HUD_COMPONENT_ACTIVE(int id)
 void HIDE_SCRIPTED_HUD_COMPONENT_THIS_FRAME(int id)
 void _SHOW_SCRIPTED_HUD_COMPONENT_THIS_FRAME(int id)
 BOOL IS_SCRIPTED_HUD_COMPONENT_HIDDEN_THIS_FRAME(int id)
 void HIDE_HUD_COMPONENT_THIS_FRAME(int id)
 void SHOW_HUD_COMPONENT_THIS_FRAME(int id)
 void _HIDE_AREA_AND_VEHICLE_NAME_THIS_FRAME()
 void RESET_RETICULE_VALUES()
 void RESET_HUD_COMPONENT_VALUES(int id)
 void SET_HUD_COMPONENT_POSITION(int id, float x, float y)
 Vector3 GET_HUD_COMPONENT_POSITION(int id)
 void CLEAR_REMINDER_MESSAGE()
 BOOL GET_HUD_SCREEN_POSITION_FROM_WORLD_POSITION(float worldX, float worldY, float worldZ, float* screenX, float* screenY)
 void OPEN_REPORTUGC_MENU()
 void FORCE_CLOSE_REPORTUGC_MENU()
 BOOL IS_REPORTUGC_MENU_OPEN()
 BOOL IS_FLOATING_HELP_TEXT_ON_SCREEN(int p0)
 void SET_FLOATING_HELP_TEXT_SCREEN_POSITION(int p0, float x, float y)
 void SET_FLOATING_HELP_TEXT_WORLD_POSITION(int p0, float x, float y, float z)
 void SET_FLOATING_HELP_TEXT_TO_ENTITY(int p0, Entity entity, float p2, float p3)
 void SET_FLOATING_HELP_TEXT_STYLE(int p0, int p1, int p2, int p3, int p4, int p5)
 void CLEAR_FLOATING_HELP(int p0, BOOL p1)
 void CREATE_MP_GAMER_TAG_WITH_CREW_COLOR(Player player, const char* username, BOOL pointedClanTag, BOOL isRockstarClan, const char* clanTag, Any p5, int r, int g, int b)
 BOOL IS_MP_GAMER_TAG_MOVIE_ACTIVE()
 int CREATE_FAKE_MP_GAMER_TAG(Ped ped, const char* username, BOOL pointedClanTag, BOOL isRockstarClan, const char* clanTag, Any p5)
 void REMOVE_MP_GAMER_TAG(int gamerTagId)
 BOOL IS_MP_GAMER_TAG_ACTIVE(int gamerTagId)
 BOOL IS_MP_GAMER_TAG_FREE(int gamerTagId)
 void SET_MP_GAMER_TAG_VISIBILITY(int gamerTagId, int component, BOOL toggle, Any p3)
 void _0xEE76FF7E6A0166B0(int gamerTagId, BOOL p1)
 void _SET_MP_GAMER_TAG_ICONS(int gamerTagId, BOOL p1)
 void _SET_MP_GAMER_HEALTH_BAR_DISPLAY(Any p0, Any p1)
 void _SET_MP_GAMER_HEALTH_BAR_MAX(Any p0, Any p1, Any p2)
 void SET_MP_GAMER_TAG_COLOUR(int gamerTagId, int flag, int color)
 void SET_MP_GAMER_TAG_HEALTH_BAR_COLOUR(int headDisplayId, int color)
 void SET_MP_GAMER_TAG_ALPHA(int gamerTagId, int component, int alpha)
 void SET_MP_GAMER_TAG_WANTED_LEVEL(int gamerTagId, int wantedlvl)
 void _SET_MP_GAMER_TAG_UNK(int gamerTagId, int p1)
 void SET_MP_GAMER_TAG_NAME(int gamerTagId, const char* string)
 BOOL _IS_VALID_MP_GAMER_TAG_MOVIE(int gamerTagId)
 void SET_MP_GAMER_TAG_BIG_TEXT(int gamerTagId, const char* string)
 int GET_CURRENT_WEBPAGE_ID()
 int GET_CURRENT_WEBSITE_ID()
 Any _0xE3B05614DCE1D014(Any p0)
 void _0xB99C4E4D9499DF29(int p0)
 BOOL _IS_WARNING_MESSAGE_ACTIVE_2()
 void SET_WARNING_MESSAGE(const char* titleMsg, int flags, const char* promptMsg, BOOL p3, int p4, const char* p5, const char* p6, BOOL showBg, Any p8)
 void SET_WARNING_MESSAGE_WITH_HEADER(const char* titleMsg, const char* p1, int flags, const char* promptMsg, BOOL p4, Any p5, Any* p6, Any* p7, BOOL showBg, Any p9)
 void SET_WARNING_MESSAGE_WITH_HEADER_AND_SUBSTRING_FLAGS(const char* entryHeader, const char* entryLine1, Any instructionalKey, const char* entryLine2, BOOL p4, Any p5, Any p6, Any* p7, Any* p8, BOOL p9, Any p10)
 void _SET_WARNING_MESSAGE_WITH_HEADER_UNK(const char* entryHeader, const char* entryLine1, int flags, const char* entryLine2, BOOL p4, Any p5, Any* p6, Any* p7, BOOL showBg, Any p9, Any p10)
 void _SET_WARNING_MESSAGE_4(const char* p0, const char* p1, int p2, int p3, const char* p4, BOOL p5, int p6, int p7, const char* p8, const char* p9, BOOL p10, Any p11)
 Hash _GET_WARNING_MESSAGE_TITLE_HASH()
 BOOL _SET_WARNING_MESSAGE_LIST_ROW(int index, const char* name, int cash, int rp, int lvl, int colour)
 BOOL _0xDAF87174BE7454FF(Any p0)
 void _REMOVE_WARNING_MESSAGE_LIST_ITEMS()
 BOOL IS_WARNING_MESSAGE_ACTIVE()
 void CLEAR_DYNAMIC_PAUSE_MENU_ERROR_MESSAGE()
 void _RACE_GALLERY_FULLSCREEN(BOOL toggle)
 void _RACE_GALLERY_NEXT_BLIP_SPRITE(Any p0)
 Any _RACE_GALLERY_ADD_BLIP(float p0, float p1, float p2)
 void _CLEAR_RACE_GALLERY_BLIPS()
 Any FORCE_SONAR_BLIPS_THIS_FRAME()
 Any _0x3F0CF9CB7E589B88()
 void _0x82CEDC33687E1F50(BOOL p0)
 void _0x211C4EF450086857()
 void _0xBF4F34A85CA2970C()
 void ACTIVATE_FRONTEND_MENU(Hash menuhash, BOOL togglePause, int component)
 void RESTART_FRONTEND_MENU(Hash menuHash, int p1)
 Hash GET_CURRENT_FRONTEND_MENU_VERSION()
 void SET_PAUSE_MENU_ACTIVE(BOOL toggle)
 void DISABLE_FRONTEND_THIS_FRAME()
 void SUPPRESS_FRONTEND_RENDERING_THIS_FRAME()
 void _ALLOW_PAUSE_MENU_WHEN_DEAD_THIS_FRAME()
 void SET_FRONTEND_ACTIVE(BOOL active)
 BOOL IS_PAUSE_MENU_ACTIVE()
 BOOL _0x2F057596F2BD0061()
 int GET_PAUSE_MENU_STATE()
 Vector3 _0x5BFF36D6ED83E0AE()
 BOOL IS_PAUSE_MENU_RESTARTING()
 void _LOG_DEBUG_INFO(const char* p0)
 void _0x77F16B447824DA6C(Any p0)
 void _0xCDCA26E80FAECB8F()
 void _0x2DE6C5E2E996F178(Any p0)
 void PAUSE_MENU_ACTIVATE_CONTEXT(Hash contextHash)
 void PAUSE_MENU_DEACTIVATE_CONTEXT(Hash contextHash)
 BOOL PAUSE_MENU_IS_CONTEXT_ACTIVE(Hash contextHash)
 Any _0x2A25ADC48F87841F()
 Any _0xDE03620F8703A9DF()
 Any _0x359AF31A4B52F5ED()
 Any _0x13C4B962653A5280()
 BOOL _0xC8E1071177A23BE5(Any* p0, Any* p1, Any* p2)
 void _0x4895BDEA16E7C080(int p0)
 void _0xC78E239AC5B2DDB9(BOOL p0, Any p1, Any p2)
 void _0xF06EBB91A81E09E3(BOOL p0)
 BOOL IS_FRONTEND_READY_FOR_CONTROL()
 void _0xEC9264727EEC0F28()
 void _0x14621BB1DF14E2B2()
 Any _0x66E7CB63C97B7D20()
 Any _0x593FEAE1F73392D4()
 Any _0x4E3CD0EF8A489541()
 Any _0xF284AC67940C6812()
 Any _0x2E22FEFA0100275E()
 void _0x0CF54F20DE43879C(Any p0)
 void _0x36C1451A88A09630(Any* p0, Any* p1)
 void _0x7E17BE53E1AAABAF(Any* p0, Any* p1, Any* p2)
 BOOL _0xA238192F33110615(int* p0, int* p1, int* p2)
 BOOL _0xEF4CED81CEBEDC6D(Any p0, Any* p1)
 BOOL _0xCA6B2F7CE32AB653(Any p0, Any* p1, Any p2)
 BOOL _0x90A6526CF0381030(Any p0, Any* p1, Any p2, Any p3)
 BOOL _0x24A49BEAF468DC90(Any p0, Any* p1, Any p2, Any p3, Any p4)
 BOOL _0x5FBD7095FE7AE57F(Any p0, float* p1)
 BOOL _0x8F08017F9D7C47BD(Any p0, Any* p1, Any p2)
 BOOL _0x052991E59076E4E4(Hash p0, Any* p1)
 void CLEAR_PED_IN_PAUSE_MENU()
 void GIVE_PED_TO_PAUSE_MENU(Ped ped, int p1)
 void SET_PAUSE_MENU_PED_LIGHTING(BOOL p0)
 void SET_PAUSE_MENU_PED_SLEEP_STATE(BOOL state)
 void OPEN_ONLINE_POLICIES_MENU()
 BOOL _0xF13FE2A80C05C561()
 BOOL IS_ONLINE_POLICIES_MENU_ACTIVE()
 void OPEN_SOCIAL_CLUB_MENU()
 void CLOSE_SOCIAL_CLUB_MENU()
 void SET_SOCIAL_CLUB_TOUR(const char* name)
 BOOL IS_SOCIAL_CLUB_ACTIVE()
 void _0x1185A8087587322C(BOOL p0)
 void _FORCE_CLOSE_TEXT_INPUT_BOX()
 void _0x577599CCED639CA2(Any p0)
 void _OVERRIDE_MULTIPLAYER_CHAT_PREFIX(Any p0)
 BOOL _IS_MULTIPLAYER_CHAT_ACTIVE()
 void _CLOSE_MULTIPLAYER_CHAT()
 void _0x7C226D5346D4D10A(Any p0)
 void _OVERRIDE_MULTIPLAYER_CHAT_COLOUR(Any p0, Any p1)
 void _SET_TEXT_CHAT_UNK(BOOL p0)
 void FLAG_PLAYER_CONTEXT_IN_TOURNAMENT(BOOL toggle)
 void SET_PED_HAS_AI_BLIP(Ped ped, BOOL hasCone)
 void _SET_PED_HAS_AI_BLIP_WITH_COLOR(Ped ped, BOOL hasCone, int color)
 BOOL DOES_PED_HAVE_AI_BLIP(Ped ped)
 void SET_PED_AI_BLIP_GANG_ID(Ped ped, int gangId)
 void SET_PED_AI_BLIP_HAS_CONE(Ped ped, BOOL toggle)
 void SET_PED_AI_BLIP_FORCED_ON(Ped ped, BOOL toggle)
 void SET_PED_AI_BLIP_NOTICE_RANGE(Ped ped, float range)
 void _SET_PED_AI_BLIP_SPRITE(Ped ped, int spriteId)
 Blip _GET_AI_BLIP_2(Ped ped)
 Blip _GET_AI_BLIP(Ped ped)
 BOOL _HAS_DIRECTOR_MODE_BEEN_TRIGGERED()
 void _SET_DIRECTOR_MODE_CLEAR_TRIGGERED_FLAG()
 void _SET_PLAYER_IS_IN_DIRECTOR_MODE(BOOL toggle)
 void _0x04655F9D075D0AE5(BOOL toggle)
}

namespace INTERIOR
{
 float _GET_INTERIOR_HEADING(Interior interior)
 void _GET_INTERIOR_INFO(Interior interior, Vector3* position, Hash* nameHash)
 int GET_INTERIOR_GROUP_ID(Interior interior)
 Vector3 GET_OFFSET_FROM_INTERIOR_IN_WORLD_COORDS(Interior interior, float x, float y, float z)
 BOOL IS_INTERIOR_SCENE()
 BOOL IS_VALID_INTERIOR(Interior interior)
 void CLEAR_ROOM_FOR_ENTITY(Entity entity)
 void FORCE_ROOM_FOR_ENTITY(Entity entity, Interior interior, Hash roomHashKey)
 Hash GET_ROOM_KEY_FROM_ENTITY(Entity entity)
 Hash GET_KEY_FOR_ENTITY_IN_ROOM(Entity entity)
 Interior GET_INTERIOR_FROM_ENTITY(Entity entity)
 void _0x82EBB79E258FA2B7(Entity entity, Interior interior)
 void _0x38C1CB1CB119A016(Any p0, Any p1)
 void FORCE_ROOM_FOR_GAME_VIEWPORT(int interiorID, Hash roomHashKey)
 void _0xAF348AFCB575A441(const char* roomName)
 void _0x405DC2AEF6AF95B9(Hash roomHashKey)
 Hash GET_ROOM_KEY_FOR_GAME_VIEWPORT()
 void CLEAR_ROOM_FOR_GAME_VIEWPORT()
 Any _0xE7D267EC6CA966C3()
 Interior GET_INTERIOR_AT_COORDS(float x, float y, float z)
 void ADD_PICKUP_TO_INTERIOR_ROOM_BY_NAME(Pickup pickup, const char* roomName)
 void PIN_INTERIOR_IN_MEMORY(Interior interior)
 void UNPIN_INTERIOR(Interior interior)
 BOOL IS_INTERIOR_READY(Interior interior)
 Any _0x4C2330E61D3DEB56(Interior interior)
 Interior GET_INTERIOR_AT_COORDS_WITH_TYPE(float x, float y, float z, const char* interiorType)
 Interior GET_INTERIOR_AT_COORDS_WITH_TYPEHASH(float x, float y, float z, Hash typeHash)
 void _0x483ACA1176CA93F1()
 BOOL _ARE_COORDS_COLLIDING_WITH_EXTERIOR(float x, float y, float z)
 int GET_INTERIOR_FROM_COLLISION(float x, float y, float z)
 void _0x7ECDF98587E92DEC(Any p0)
 void ACTIVATE_INTERIOR_ENTITY_SET(Interior interior, const char* entitySetName)
 void DEACTIVATE_INTERIOR_ENTITY_SET(Interior interior, const char* entitySetName)
 BOOL IS_INTERIOR_ENTITY_SET_ACTIVE(Interior interior, const char* entitySetName)
 void _SET_INTERIOR_ENTITY_SET_COLOR(Interior interior, const char* entitySetName, int color)
 void REFRESH_INTERIOR(Interior interior)
 void ENABLE_EXTERIOR_CULL_MODEL_THIS_FRAME(Hash mapObjectHash)
 void _ENABLE_SCRIPT_CULL_MODEL_THIS_FRAME(Any p0)
 void DISABLE_INTERIOR(Interior interior, BOOL toggle)
 BOOL IS_INTERIOR_DISABLED(Interior interior)
 void CAP_INTERIOR(Interior interior, BOOL toggle)
 BOOL IS_INTERIOR_CAPPED(Interior interior)
 void _0x9E6542F0CE8E70A3(BOOL toggle)
 void _0x7241CCB7D020DB69(Entity entity, BOOL toggle)
}

namespace ITEMSET
{
 Vehicle CREATE_ITEMSET(BOOL p0)
 void DESTROY_ITEMSET(Any p0)
 BOOL IS_ITEMSET_VALID(Any p0)
 BOOL ADD_TO_ITEMSET(Any p0, Any p1)
 void REMOVE_FROM_ITEMSET(Any p0, Any p1)
 Any GET_ITEMSET_SIZE(ScrHandle x)
 Any GET_INDEXED_ITEM_IN_ITEMSET(Any p0, Any p1)
 BOOL IS_IN_ITEMSET(Any p0, Any p1)
 void CLEAN_ITEMSET(Any p0)
}

namespace LOADINGSCREEN
{
 int _0xF2CA003F167E21D2()
 BOOL _LOADINGSCREEN_GET_LOAD_FREEMODE()
 void _LOADINGSCREEN_SET_LOAD_FREEMODE(BOOL toggle)
 BOOL _LOADINGSCREEN_GET_LOAD_FREEMODE_WITH_EVENT_NAME()
 void _LOADINGSCREEN_SET_LOAD_FREEMODE_WITH_EVENT_NAME(BOOL toggle)
 BOOL _LOADINGSCREEN_IS_LOADING_FREEMODE()
 void _LOADINGSCREEN_SET_IS_LOADING_FREEMODE(BOOL toggle)
 void _0xFA1E0E893D915215(BOOL toggle)
}

namespace LOCALIZATION
{
 int _LOCALIZATION_GET_SYSTEM_LANGUAGE()
 int GET_CURRENT_LANGUAGE()
 int _LOCALIZATION_GET_USER_LANGUAGE()
}

namespace MISC
{
 int GET_ALLOCATED_STACK_SIZE()
 int GET_NUMBER_OF_FREE_STACKS_OF_THIS_SIZE(int stackSize)
 void SET_RANDOM_SEED(int seed)
 void SET_TIME_SCALE(float timeScale)
 void SET_MISSION_FLAG(BOOL toggle)
 BOOL GET_MISSION_FLAG()
 void SET_RANDOM_EVENT_FLAG(BOOL toggle)
 BOOL GET_RANDOM_EVENT_FLAG()
 const char* _GET_GLOBAL_CHAR_BUFFER()
 void _0x4DCDF92BF64236CD(const char* p0, const char* p1)
 void _0x31125FD509D9043F(const char* p0)
 void _0xEBD3205A207939ED(const char* p0)
 void _0x97E7E2C04245115B(Any p0)
 void _0xEB078CA2B5E82ADD(const char* p0, const char* p1)
 void _0x703CC7F60CBB2B57(const char* p0)
 void _0x8951EB9C6906D3C8()
 void _0xBA4B8D83BDC75551(const char* p0)
 BOOL _HAS_RESUMED_FROM_SUSPEND()
 void _0x65D2EBB47E1CEC21(BOOL toggle)
 void _0x6F2135B6129620C1(BOOL toggle)
 void _0x8D74E26F54B4E5C3(const char* p0)
 BOOL _GET_BASE_ELEMENT_METADATA(Any* p0, Any* p1, Any p2, BOOL p3)
 Hash GET_PREV_WEATHER_TYPE_HASH_NAME()
 Hash GET_NEXT_WEATHER_TYPE_HASH_NAME()
 BOOL IS_PREV_WEATHER_TYPE(const char* weatherType)
 BOOL IS_NEXT_WEATHER_TYPE(const char* weatherType)
 void SET_WEATHER_TYPE_PERSIST(const char* weatherType)
 void SET_WEATHER_TYPE_NOW_PERSIST(const char* weatherType)
 void SET_WEATHER_TYPE_NOW(const char* weatherType)
 void SET_WEATHER_TYPE_OVERTIME_PERSIST(const char* weatherType, float time)
 void SET_RANDOM_WEATHER_TYPE()
 void CLEAR_WEATHER_TYPE_PERSIST()
 void _0x0CF97F497FE7D048(Any p0)
 void _GET_WEATHER_TYPE_TRANSITION(Hash* weatherType1, Hash* weatherType2, float* percentWeather2)
 void _SET_WEATHER_TYPE_TRANSITION(Hash weatherType1, Hash weatherType2, float percentWeather2)
 void SET_OVERRIDE_WEATHER(const char* weatherType)
 void CLEAR_OVERRIDE_WEATHER()
 void _0xB8F87EAD7533B176(float p0)
 void _0xC3EAD29AB273ECE8(float p0)
 void _0xA7A1127490312C36(float p0)
 void _0x31727907B2C43C55(float p0)
 void _0x405591EC8FD9096D(float p0)
 void _0xF751B16FB32ABC1D(float p0)
 void _0xB3E6360DDE733E82(float p0)
 void _0x7C9C0B1EEB1F9072(float p0)
 void _0x6216B116083A7CB4(float p0)
 void _0x9F5E6BB6B34540DA(float p0)
 void _0xB9854DFDE0D833D6(float p0)
 void _0xC54A08C85AE4D410(float p0)
 void _0xA8434F1DFF41D6E7(float p0)
 void _0xC3C221ADDDE31A11(float p0)
 void SET_WIND(float speed)
 void SET_WIND_SPEED(float speed)
 float GET_WIND_SPEED()
 void SET_WIND_DIRECTION(float direction)
 Vector3 GET_WIND_DIRECTION()
 void _SET_RAIN_FX_INTENSITY(float intensity)
 float GET_RAIN_LEVEL()
 float GET_SNOW_LEVEL()
 void FORCE_LIGHTNING_FLASH()
 void _0x02DEAAC8F8EA7FE7(const char* p0)
 void PRELOAD_CLOUD_HAT(const char* name)
 void LOAD_CLOUD_HAT(const char* name, float transitionTime)
 void UNLOAD_CLOUD_HAT(const char* name, float p1)
 void _CLEAR_CLOUD_HAT()
 void _SET_CLOUD_HAT_OPACITY(float opacity)
 float _GET_CLOUD_HAT_OPACITY()
 int GET_GAME_TIMER()
 float GET_FRAME_TIME()
 float _GET_BENCHMARK_TIME()
 int GET_FRAME_COUNT()
 float GET_RANDOM_FLOAT_IN_RANGE(float startRange, float endRange)
 int GET_RANDOM_INT_IN_RANGE(int startRange, int endRange)
 int _GET_RANDOM_INT_IN_RANGE_2(int startRange, int endRange)
 BOOL GET_GROUND_Z_FOR_3D_COORD(float x, float y, float z, float* groundZ, BOOL unk, BOOL p5)
 BOOL GET_GROUND_Z_AND_NORMAL_FOR_3D_COORD(float x, float y, float z, float* groundZ, Vector3* normal)
 Any _GET_GROUND_Z_FOR_3D_COORD_2(Any p0, Any p1, Any p2, Any p3, Any p4, Any p5)
 float ASIN(float p0)
 float ACOS(float p0)
 float TAN(float p0)
 float ATAN(float p0)
 float ATAN2(float p0, float p1)
 float GET_DISTANCE_BETWEEN_COORDS(float x1, float y1, float z1, float x2, float y2, float z2, BOOL useZ)
 float GET_ANGLE_BETWEEN_2D_VECTORS(float x1, float y1, float x2, float y2)
 float GET_HEADING_FROM_VECTOR_2D(float dx, float dy)
 float _0x7F8F6405F4777AF6(float p0, float p1, float p2, float p3, float p4, float p5, float p6, float p7, float p8, BOOL p9)
 Vector3 _0x21C235BC64831E5A(float p0, float p1, float p2, float p3, float p4, float p5, float p6, float p7, float p8, BOOL p9)
 BOOL _0xF56DFB7B61BE7276(float p0, float p1, float p2, float p3, float p4, float p5, float p6, float p7, float p8, float p9, float p10, float p11, float* p12)
 void SET_BIT(int* address, int offset)
 void CLEAR_BIT(int* address, int offset)
 Hash GET_HASH_KEY(const char* string)
 void SLERP_NEAR_QUATERNION(float p0, float p1, float p2, float p3, float p4, float p5, float p6, float p7, float p8, float* p9, float* p10, float* p11, float* p12)
 BOOL IS_AREA_OCCUPIED(float p0, float p1, float p2, float p3, float p4, float p5, BOOL p6, BOOL p7, BOOL p8, BOOL p9, BOOL p10, Any p11, BOOL p12)
 BOOL IS_POSITION_OCCUPIED(float x, float y, float z, float range, BOOL p4, BOOL p5, BOOL p6, BOOL p7, BOOL p8, Any p9, BOOL p10)
 BOOL IS_POINT_OBSCURED_BY_A_MISSION_ENTITY(float p0, float p1, float p2, float p3, float p4, float p5, Any p6)
 void CLEAR_AREA(float X, float Y, float Z, float radius, BOOL p4, BOOL ignoreCopCars, BOOL ignoreObjects, BOOL p7)
 void _CLEAR_AREA_OF_EVERYTHING(float x, float y, float z, float radius, BOOL p4, BOOL p5, BOOL p6, BOOL p7)
 void CLEAR_AREA_OF_VEHICLES(float x, float y, float z, float radius, BOOL p4, BOOL p5, BOOL p6, BOOL p7, BOOL p8, BOOL p9)
 void CLEAR_ANGLED_AREA_OF_VEHICLES(float p0, float p1, float p2, float p3, float p4, float p5, float p6, BOOL p7, BOOL p8, BOOL p9, BOOL p10, BOOL p11, Any p12)
 void CLEAR_AREA_OF_OBJECTS(float x, float y, float z, float radius, int flags)
 void CLEAR_AREA_OF_PEDS(float x, float y, float z, float radius, int flags)
 void CLEAR_AREA_OF_COPS(float x, float y, float z, float radius, int flags)
 void CLEAR_AREA_OF_PROJECTILES(float x, float y, float z, float radius, int flags)
 void _0x7EC6F9A478A6A512()
 void SET_SAVE_MENU_ACTIVE(BOOL ignoreVehicle)
 int _0x397BAA01068BAA96()
 void SET_CREDITS_ACTIVE(BOOL toggle)
 void _0xB51B9AB9EF81868C(BOOL toggle)
 BOOL HAVE_CREDITS_REACHED_END()
 void TERMINATE_ALL_SCRIPTS_WITH_THIS_NAME(const char* scriptName)
 void NETWORK_SET_SCRIPT_IS_SAFE_FOR_NETWORK_GAME()
 int ADD_HOSPITAL_RESTART(float x, float y, float z, float p3, Any p4)
 void DISABLE_HOSPITAL_RESTART(int hospitalIndex, BOOL toggle)
 Any ADD_POLICE_RESTART(float p0, float p1, float p2, float p3, Any p4)
 void DISABLE_POLICE_RESTART(int policeIndex, BOOL toggle)
 void _SET_RESTART_CUSTOM_POSITION(float x, float y, float z, float heading)
 void _CLEAR_RESTART_CUSTOM_POSITION()
 void PAUSE_DEATH_ARREST_RESTART(BOOL toggle)
 void IGNORE_NEXT_RESTART(BOOL toggle)
 void SET_FADE_OUT_AFTER_DEATH(BOOL toggle)
 void SET_FADE_OUT_AFTER_ARREST(BOOL toggle)
 void SET_FADE_IN_AFTER_DEATH_ARREST(BOOL toggle)
 void SET_FADE_IN_AFTER_LOAD(BOOL toggle)
 Any REGISTER_SAVE_HOUSE(float p0, float p1, float p2, float p3, Any* p4, Any p5, Any p6)
 void SET_SAVE_HOUSE(Any p0, BOOL p1, BOOL p2)
 BOOL OVERRIDE_SAVE_HOUSE(BOOL p0, float p1, float p2, float p3, float p4, BOOL p5, float p6, float p7)
 BOOL _0xA4A0065E39C9F25C(Vector3* p0, float* p1, BOOL* fadeInAfterLoad, BOOL* p3)
 void DO_AUTO_SAVE()
 BOOL GET_IS_AUTO_SAVE_OFF()
 BOOL IS_AUTO_SAVE_IN_PROGRESS()
 BOOL _0x2107A3773771186D()
 void _0x06462A961E94B67C()
 void BEGIN_REPLAY_STATS(Any p0, Any p1)
 void ADD_REPLAY_STAT_VALUE(Any value)
 void END_REPLAY_STATS()
 Any _0xD642319C54AADEB6()
 Any _0x5B1F2E327B6B6FE1()
 int GET_REPLAY_STAT_MISSION_TYPE()
 int GET_REPLAY_STAT_COUNT()
 int GET_REPLAY_STAT_AT_INDEX(int index)
 void CLEAR_REPLAY_STATS()
 Any _0x72DE52178C291CB5()
 Any _0x44A0BDC559B35F6E()
 Any _0xEB2104E905C6F2E9()
 Any _0x2B5E102E4A42F2BF()
 BOOL IS_MEMORY_CARD_IN_USE()
 void SHOOT_SINGLE_BULLET_BETWEEN_COORDS(float x1, float y1, float z1, float x2, float y2, float z2, int damage, BOOL p7, Hash weaponHash, Ped ownerPed, BOOL isAudible, BOOL isInvisible, float speed)
 void SHOOT_SINGLE_BULLET_BETWEEN_COORDS_IGNORE_ENTITY(float x1, float y1, float z1, float x2, float y2, float z2, int damage, BOOL p7, Hash weaponHash, Ped ownerPed, BOOL isAudible, BOOL isInvisible, float speed, Entity entity, Any p14)
 void SHOOT_SINGLE_BULLET_BETWEEN_COORDS_IGNORE_ENTITY_NEW(float x1, float y1, float z1, float x2, float y2, float z2, int damage, BOOL p7, Hash weaponHash, Ped ownerPed, BOOL isAudible, BOOL isInvisible, float speed, Entity entity, BOOL p14, BOOL p15, BOOL p16, BOOL p17, Any p18, Any p19)
 void GET_MODEL_DIMENSIONS(Hash modelHash, Vector3* minimum, Vector3* maximum)
 void SET_FAKE_WANTED_LEVEL(int fakeWantedLevel)
 int GET_FAKE_WANTED_LEVEL()
 BOOL IS_BIT_SET(int address, int offset)
 void USING_MISSION_CREATOR(BOOL toggle)
 void ALLOW_MISSION_CREATOR_WARP(BOOL toggle)
 void SET_MINIGAME_IN_PROGRESS(BOOL toggle)
 BOOL IS_MINIGAME_IN_PROGRESS()
 BOOL IS_THIS_A_MINIGAME_SCRIPT()
 BOOL IS_SNIPER_INVERTED()
 BOOL SHOULD_USE_METRIC_MEASUREMENTS()
 int GET_PROFILE_SETTING(int profileSetting)
 BOOL ARE_STRINGS_EQUAL(const char* string1, const char* string2)
 int COMPARE_STRINGS(const char* str1, const char* str2, BOOL matchCase, int maxLength)
 int ABSI(int value)
 float ABSF(float value)
 BOOL IS_SNIPER_BULLET_IN_AREA(float x1, float y1, float z1, float x2, float y2, float z2)
 BOOL IS_PROJECTILE_IN_AREA(float x1, float y1, float z1, float x2, float y2, float z2, BOOL ownedByPlayer)
 BOOL IS_PROJECTILE_TYPE_IN_AREA(float x1, float y1, float z1, float x2, float y2, float z2, int type, BOOL p7)
 BOOL IS_PROJECTILE_TYPE_IN_ANGLED_AREA(float p0, float p1, float p2, float p3, float p4, float p5, float p6, Any p7, BOOL p8)
 BOOL _IS_PROJECTILE_TYPE_IN_RADIUS(float p0, float p1, float p2, Any p3, float p4, BOOL p5)
 Any _GET_IS_PROJECTILE_TYPE_IN_AREA(Any p0, Any p1, Any p2, Any p3, Any p4, Any p5, Any p6, Any p7, Any p8)
 BOOL _GET_PROJECTILE_NEAR_PED_COORDS(Ped ped, Hash weaponHash, float radius, Entity* entity, BOOL p4)
 BOOL _GET_PROJECTILE_NEAR_PED(Ped ped, Hash weaponhash, float p2, float p3, float p4, BOOL p5)
 BOOL IS_BULLET_IN_ANGLED_AREA(float p0, float p1, float p2, float p3, float p4, float p5, float p6, BOOL p7)
 BOOL IS_BULLET_IN_AREA(float p0, float p1, float p2, float p3, BOOL p4)
 BOOL IS_BULLET_IN_BOX(float p0, float p1, float p2, float p3, float p4, float p5, BOOL p6)
 BOOL HAS_BULLET_IMPACTED_IN_AREA(float x, float y, float z, float p3, BOOL p4, BOOL p5)
 BOOL HAS_BULLET_IMPACTED_IN_BOX(float p0, float p1, float p2, float p3, float p4, float p5, BOOL p6, BOOL p7)
 BOOL IS_ORBIS_VERSION()
 BOOL IS_DURANGO_VERSION()
 BOOL IS_XBOX360_VERSION()
 BOOL IS_PS3_VERSION()
 BOOL IS_PC_VERSION()
 BOOL IS_AUSSIE_VERSION()
 BOOL IS_STRING_NULL(const char* string)
 BOOL IS_STRING_NULL_OR_EMPTY(const char* string)
 BOOL STRING_TO_INT(const char* string, int* outInteger)
 void SET_BITS_IN_RANGE(int* var, int rangeStart, int rangeEnd, int p3)
 int GET_BITS_IN_RANGE(int var, int rangeStart, int rangeEnd)
 int ADD_STUNT_JUMP(float p0, float p1, float p2, float p3, float p4, float p5, float p6, float p7, float p8, float p9, float p10, float p11, float p12, float p13, float p14, Any p15, Any p16, Any p17)
 int ADD_STUNT_JUMP_ANGLED(float p0, float p1, float p2, float p3, float p4, float p5, float p6, float p7, float p8, float p9, float p10, float p11, float p12, float p13, float p14, float p15, float p16, Any p17, Any p18, Any p19)
 void _0xFB80AB299D2EE1BD(BOOL toggle)
 void DELETE_STUNT_JUMP(int p0)
 void ENABLE_STUNT_JUMP_SET(int p0)
 void DISABLE_STUNT_JUMP_SET(int p0)
 void SET_STUNT_JUMPS_CAN_TRIGGER(BOOL toggle)
 BOOL IS_STUNT_JUMP_IN_PROGRESS()
 BOOL IS_STUNT_JUMP_MESSAGE_SHOWING()
 int GET_NUM_SUCCESSFUL_STUNT_JUMPS()
 int GET_TOTAL_SUCCESSFUL_STUNT_JUMPS()
 void CANCEL_STUNT_JUMP()
 void SET_GAME_PAUSED(BOOL toggle)
 void SET_THIS_SCRIPT_CAN_BE_PAUSED(BOOL toggle)
 void SET_THIS_SCRIPT_CAN_REMOVE_BLIPS_CREATED_BY_ANY_SCRIPT(BOOL toggle)
 BOOL _HAS_BUTTON_COMBINATION_JUST_BEEN_ENTERED(Hash hash, int amount)
 BOOL _HAS_CHEAT_STRING_JUST_BEEN_ENTERED(Hash hash)
 void SET_INSTANCE_PRIORITY_MODE(int p0)
 void SET_INSTANCE_PRIORITY_HINT(int flag)
 BOOL IS_FRONTEND_FADING()
 void POPULATE_NOW()
 int GET_INDEX_OF_CURRENT_LEVEL()
 void SET_GRAVITY_LEVEL(int level)
 void START_SAVE_DATA(Any* p0, Any p1, BOOL p2)
 void STOP_SAVE_DATA()
 int _0xA09F896CE912481F(BOOL p0)
 void REGISTER_INT_TO_SAVE(Any* p0, const char* name)
 void _REGISTER_INT64_TO_SAVE(Any* p0, const char* name)
 void REGISTER_ENUM_TO_SAVE(Any* p0, const char* name)
 void REGISTER_FLOAT_TO_SAVE(Any* p0, const char* name)
 void REGISTER_BOOL_TO_SAVE(Any* p0, const char* name)
 void REGISTER_TEXT_LABEL_TO_SAVE(Any* p0, const char* name)
 void _REGISTER_TEXT_LABEL_TO_SAVE_2(Any* p0, const char* name)
 void _0x48F069265A0E4BEC(Any* p0, const char* name)
 void _0x8269816F6CFD40F8(Any* p0, const char* name)
 void _0xFAA457EF263E8763(Any* p0, const char* name)
 void START_SAVE_STRUCT_WITH_SIZE(Any* p0, int size, const char* structName)
 void STOP_SAVE_STRUCT()
 void START_SAVE_ARRAY_WITH_SIZE(Any* p0, int size, const char* arrayName)
 void STOP_SAVE_ARRAY()
 void _COPY_MEMORY(Any* dst, Any* src, int size)
 void ENABLE_DISPATCH_SERVICE(int dispatchService, BOOL toggle)
 void BLOCK_DISPATCH_SERVICE_RESOURCE_CREATION(int dispatchService, BOOL toggle)
 int _GET_NUM_DISPATCHED_UNITS_FOR_PLAYER(int dispatchService)
 BOOL CREATE_INCIDENT(int dispatchService, float x, float y, float z, int numUnits, float radius, int* outIncidentID, Any p7, Any p8)
 BOOL CREATE_INCIDENT_WITH_ENTITY(int dispatchService, Ped ped, int numUnits, float radius, int* outIncidentID, Any p5, Any p6)
 void DELETE_INCIDENT(int incidentId)
 BOOL IS_INCIDENT_VALID(int incidentId)
 void SET_INCIDENT_REQUESTED_UNITS(int incidentId, int dispatchService, int numUnits)
 void _SET_INCIDENT_UNK(int incidentId, float p1)
 BOOL FIND_SPAWN_POINT_IN_DIRECTION(float x1, float y1, float z1, float x2, float y2, float z2, float distance, Vector3* spawnPoint)
 int ADD_POP_MULTIPLIER_AREA(float x1, float y1, float z1, float x2, float y2, float z2, float p6, float p7, BOOL p8, BOOL p9)
 BOOL DOES_POP_MULTIPLIER_AREA_EXIST(int id)
 void REMOVE_POP_MULTIPLIER_AREA(int id, BOOL p1)
 BOOL _IS_POP_MULTIPLIER_AREA_UNK(int id)
 int ADD_POP_MULTIPLIER_SPHERE(float p0, float p1, float p2, float p3, float p4, float p5, BOOL p6, BOOL p7)
 BOOL DOES_POP_MULTIPLIER_SPHERE_EXIST(int id)
 void REMOVE_POP_MULTIPLIER_SPHERE(int id, BOOL p1)
 void ENABLE_TENNIS_MODE(Ped ped, BOOL toggle, BOOL p2)
 BOOL IS_TENNIS_MODE(Ped ped)
 void PLAY_TENNIS_SWING_ANIM(Ped ped, const char* animDict, const char* animName, float p3, float p4, BOOL p5)
 BOOL GET_TENNIS_SWING_ANIM_COMPLETE(Ped ped)
 BOOL _0x19BFED045C647C49(Ped ped)
 BOOL _0xE95B0C7D5BA3B96B(Ped ped)
 void PLAY_TENNIS_DIVE_ANIM(Ped ped, int p1, float p2, float p3, float p4, BOOL p5)
 void _0x54F157E0336A3822(Ped ped, const char* p1, float p2)
 void SET_DISPATCH_SPAWN_LOCATION(float x, float y, float z)
 void RESET_DISPATCH_IDEAL_SPAWN_DISTANCE()
 void SET_DISPATCH_IDEAL_SPAWN_DISTANCE(float p0)
 void RESET_DISPATCH_TIME_BETWEEN_SPAWN_ATTEMPTS(Any p0)
 void SET_DISPATCH_TIME_BETWEEN_SPAWN_ATTEMPTS(Any p0, float p1)
 void SET_DISPATCH_TIME_BETWEEN_SPAWN_ATTEMPTS_MULTIPLIER(Any p0, float p1)
 Any _ADD_DISPATCH_SPAWN_BLOCKING_ANGLED_AREA(float p0, float p1, float p2, float p3, float p4, float p5, float p6)
 Any _ADD_DISPATCH_SPAWN_BLOCKING_AREA(float p0, float p1, float p2, float p3)
 void REMOVE_DISPATCH_SPAWN_BLOCKING_AREA(Any p0)
 void RESET_DISPATCH_SPAWN_BLOCKING_AREAS()
 void _0xD9F692D349249528()
 void _0xE532EC1A63231B4F(int p0, int p1)
 void _ADD_TACTICAL_ANALYSIS_POINT(Any p0, Any p1, Any p2)
 void _CLEAR_TACTICAL_ANALYSIS_POINTS()
 void _0x2587A48BC88DFADF(BOOL p0)
 void DISPLAY_ONSCREEN_KEYBOARD_WITH_LONGER_INITIAL_STRING(int p0, const char* windowTitle, Any* p2, const char* defaultText, const char* defaultConcat1, const char* defaultConcat2, const char* defaultConcat3, const char* defaultConcat4, const char* defaultConcat5, const char* defaultConcat6, const char* defaultConcat7, int maxInputLength)
 void DISPLAY_ONSCREEN_KEYBOARD(int p0, const char* windowTitle, const char* p2, const char* defaultText, const char* defaultConcat1, const char* defaultConcat2, const char* defaultConcat3, int maxInputLength)
 int UPDATE_ONSCREEN_KEYBOARD()
 const char* GET_ONSCREEN_KEYBOARD_RESULT()
 void _CANCEL_ONSCREEN_KEYBOARD()
 void _0x3ED1438C1F5C6612(int p0)
 void _REMOVE_STEALTH_KILL(Hash hash, BOOL p1)
 void _0x1EAE0A6E978894A2(int p0, BOOL p1)
 void SET_EXPLOSIVE_AMMO_THIS_FRAME(Player player)
 void SET_FIRE_AMMO_THIS_FRAME(Player player)
 void SET_EXPLOSIVE_MELEE_THIS_FRAME(Player player)
 void SET_SUPER_JUMP_THIS_FRAME(Player player)
 void _0x438822C279B73B93(Any p0)
 void _0xA1183BCFEE0F93D1(Any p0)
 BOOL _0x6FDDF453C0C756EC()
 void _0xFB00CA71DA386228()
 BOOL ARE_PROFILE_SETTINGS_VALID()
 void _0xE3D969D2785FFB5E()
 void _RESET_LOCALPLAYER_STATE()
 void _0x0A60017F841A54F2(Any p0, Any p1, Any p2, Any p3)
 void _0x1FF6BF9A63E5757F()
 void _0x1BB299305C3E8C13(Any p0, Any p1, Any p2, Any p3)
 BOOL _0x8EF5573A1F801A5C(Any p0, Any* p1, Any* p2)
 void _START_BENCHMARK_RECORDING()
 void _STOP_BENCHMARK_RECORDING()
 void _RESET_BENCHMARK_RECORDING()
 void _SAVE_BENCHMARK_RECORDING()
 BOOL _UI_IS_SINGLEPLAYER_PAUSE_MENU_ACTIVE()
 BOOL _LANDING_MENU_IS_ACTIVE()
 BOOL _IS_COMMAND_LINE_BENCHMARK_VALUE_SET()
 int _GET_BENCHMARK_ITERATIONS_FROM_COMMAND_LINE()
 int _GET_BENCHMARK_PASS_FROM_COMMAND_LINE()
 void _RESTART_GAME()
 void _FORCE_SOCIAL_CLUB_UPDATE()
 BOOL _HAS_ASYNC_INSTALL_FINISHED()
 void _CLEANUP_ASYNC_INSTALL()
 BOOL _IS_IN_POWER_SAVING_MODE()
 int _GET_POWER_SAVING_MODE_DURATION()
 void _SET_PLAYER_IS_IN_ANIMAL_FORM(BOOL toggle)
 BOOL GET_IS_PLAYER_IN_ANIMAL_FORM()
 void _SET_PLAYER_ROCKSTAR_EDITOR_DISABLED(BOOL toggle)
 void _0x23227DF0B2115469()
 Any _0xD10282B6E3751BA0()
 void _0x693478ACBD7F18E7()
}

namespace MOBILE
{
 void CREATE_MOBILE_PHONE(int phoneType)
 void DESTROY_MOBILE_PHONE()
 void SET_MOBILE_PHONE_SCALE(float scale)
 void SET_MOBILE_PHONE_ROTATION(float rotX, float rotY, float rotZ, Any p3)
 void GET_MOBILE_PHONE_ROTATION(Vector3* rotation, Vehicle p1)
 void SET_MOBILE_PHONE_POSITION(float posX, float posY, float posZ)
 void GET_MOBILE_PHONE_POSITION(Vector3* position)
 void SCRIPT_IS_MOVING_MOBILE_PHONE_OFFSCREEN(BOOL toggle)
 BOOL CAN_PHONE_BE_SEEN_ON_SCREEN()
 void _SET_MOBILE_PHONE_UNK(BOOL toggle)
 void _CELL_CAM_MOVE_FINGER(int direction)
 void _CELL_CAM_SET_LEAN(BOOL toggle)
 void CELL_CAM_ACTIVATE(BOOL p0, BOOL p1)
 void _CELL_CAM_DISABLE_THIS_FRAME(BOOL toggle)
 void _0xA2CCBE62CD4C91A4(int* toggle)
 void _0x1B0B4AEED5B9B41C(float p0)
 void _0x53F4892D18EC90A4(float p0)
 void _0x3117D84EFA60F77B(float p0)
 void _0x15E69E2802C24B8D(float p0)
 void _0xAC2890471901861C(float p0)
 void _0xD6ADE981781FCA09(float p0)
 void _0xF1E22DC13F5EEBAD(float p0)
 void _0x466DA42C89865553(float p0)
 BOOL CELL_CAM_IS_CHAR_VISIBLE_NO_FACE_CHECK(Entity entity)
 void GET_MOBILE_PHONE_RENDER_ID(int* renderId)
}

namespace MONEY
{
 void NETWORK_INITIALIZE_CASH(int wallet, int bank)
 void NETWORK_DELETE_CHARACTER(int characterSlot, BOOL p1, BOOL p2)
 void _NETWORK_MANUAL_DELETE_CHARACTER(int characterSlot)
 BOOL _NETWORK_GET_IS_HIGH_EARNER()
 void NETWORK_CLEAR_CHARACTER_WALLET(int characterSlot)
 void NETWORK_GIVE_PLAYER_JOBSHARE_CASH(int amount, int* networkHandle)
 void NETWORK_RECEIVE_PLAYER_JOBSHARE_CASH(int value, int* networkHandle)
 BOOL NETWORK_CAN_SHARE_JOB_CASH()
 void NETWORK_REFUND_CASH(int index, const char* context, const char* reason, BOOL unk)
 void _NETWORK_DEDUCT_CASH(int amount, const char* p1, const char* p2, BOOL p3, BOOL p4, BOOL p5)
 BOOL NETWORK_MONEY_CAN_BET(int amount, BOOL p1, BOOL p2)
 BOOL NETWORK_CAN_BET(int amount)
 BOOL NETWORK_CAN_BUY_LOTTERY_TICKET(int cost)
 BOOL _NETWORK_CASINO_CAN_USE_GAMBLING_TYPE(Hash hash)
 BOOL _NETWORK_CASINO_CAN_PURCHASE_CHIPS_WITH_PVC()
 BOOL _NETWORK_CASINO_CAN_GAMBLE(Any p0)
 BOOL _NETWORK_CASINO_CAN_PURCHASE_CHIPS_WITH_PVC_2()
 BOOL _NETWORK_CASINO_PURCHASE_CHIPS(int p0, int p1)
 BOOL _NETWORK_CASINO_SELL_CHIPS(int p0, int p1)
 void _0xCD0F5B5D932AE473()
 BOOL _CAN_PAY_GOON(int p0, int p1, int amount, int* p3)
 void _NETWORK_EARN_FROM_CASHING_OUT(int amount)
 void NETWORK_EARN_FROM_PICKUP(int amount)
 void _NETWORK_EARN_FROM_GANG_PICKUP(int amount)
 void _NETWORK_EARN_FROM_ASSASSINATE_TARGET_KILLED(int amount)
 void _NETWORK_EARN_FROM_ARMOUR_TRUCK(int amount)
 void NETWORK_EARN_FROM_CRATE_DROP(int amount)
 void NETWORK_EARN_FROM_BETTING(int amount, const char* p1)
 void NETWORK_EARN_FROM_JOB(int amount, const char* p1)
 void _NETWORK_EARN_FROM_JOB_X2(int amount, const char* p1)
 void _NETWORK_EARN_FROM_PREMIUM_JOB(int amount, const char* p1)
 void NETWORK_EARN_FROM_BEND_JOB(int amount, const char* heistHash)
 void NETWORK_EARN_FROM_CHALLENGE_WIN(Any p0, Any* p1, BOOL p2)
 void NETWORK_EARN_FROM_BOUNTY(int amount, int* networkHandle, Any* p2, Any p3)
 void NETWORK_EARN_FROM_IMPORT_EXPORT(int amount, Hash modelHash)
 void NETWORK_EARN_FROM_HOLDUPS(int amount)
 void NETWORK_EARN_FROM_PROPERTY(int amount, Hash propertyName)
 void NETWORK_EARN_FROM_AI_TARGET_KILL(Any p0, Any p1)
 void NETWORK_EARN_FROM_NOT_BADSPORT(int amount)
 void NETWORK_EARN_FROM_ROCKSTAR(int amount)
 void NETWORK_EARN_FROM_VEHICLE(Any p0, Any p1, Any p2, Any p3, Any p4, Any p5, Any p6, Any p7)
 void NETWORK_EARN_FROM_PERSONAL_VEHICLE(Any p0, Any p1, Any p2, Any p3, Any p4, Any p5, Any p6, Any p7, Any p8)
 void NETWORK_EARN_FROM_DAILY_OBJECTIVES(int p0, const char* p1, int p2)
 void NETWORK_EARN_FROM_AMBIENT_JOB(int p0, const char* p1, Any* p2)
 void _0xD20D79671A598594(Any p0, Any p1, Any p2)
 void NETWORK_EARN_FROM_JOB_BONUS(Any p0, Any* p1, Any* p2)
 void _0x9D4FDBB035229669(Any p0, Any p1, Any p2)
 void _0x11B0A20C493F7E36(Any p0, Any p1, Any p2)
 void _0xCDA1C62BE2777802(Any p0, Any p1, Any p2)
 void _0x08B0CA7A6AB3AC32(Any p0, Any p1, Any p2)
 void _0x0CB1BE0633C024A8(Any p0, Any p1, Any p2, Any p3)
 void _NETWORK_EARN_FROM_WAREHOUSE(int amount, int id)
 void _NETWORK_EARN_FROM_CONTRABAND(int amount, Any p1)
 void _0x84C0116D012E8FC2(Any p0)
 void _0x6B7E4FB50D5F3D65(Any p0, Any p1, Any p2, Any p3, Any p4)
 void _0x31BA138F6304FB9F(Any p0, Any p1)
 void _0x55A1E095DB052FA5(Any p0, Any p1)
 void _NETWORK_EARN_FROM_BUSINESS_PRODUCT(int amount, Any p1, Any p2, Any p3)
 void _NETWORK_EARN_FROM_VEHICLE_EXPORT(int amount, Any p1, Any p2)
 void _NETWORK_EARN_FROM_SMUGGLING(int amount, Any p1, Any p2, Any p3)
 void _0xF6B170F9A02E9E87(Any p0)
 void _0x42FCE14F50F27291(Any p0)
 void _0xA75EAC69F59E96E7(Any p0)
 void _0xC5156361F26E2212(Any p0)
 void _0x0B39CF0D53F1C883(Any p0, Any p1, Any p2)
 void _0x1FDA0AA679C9919B(Any p0)
 void _0xFFFBA1B1F7C0B6F4(Any p0)
 BOOL NETWORK_CAN_SPEND_MONEY(Any p0, BOOL p1, BOOL p2, BOOL p3, Any p4, Any p5)
 BOOL _NETWORK_CAN_SPEND_MONEY_2(Any p0, BOOL p1, BOOL p2, BOOL p3, Any* p4, Any p5, Any p6)
 void NETWORK_BUY_ITEM(int amount, Hash item, Any p2, Any p3, BOOL p4, const char* item_name, Any p6, Any p7, Any p8, BOOL p9)
 void NETWORK_SPENT_TAXI(int amount, BOOL p1, BOOL p2)
 void NETWORK_PAY_EMPLOYEE_WAGE(Any p0, BOOL p1, BOOL p2)
 void NETWORK_PAY_UTILITY_BILL(int amount, BOOL p1, BOOL p2)
 void NETWORK_PAY_MATCH_ENTRY_FEE(int amount, const char* matchId, BOOL p2, BOOL p3)
 void NETWORK_SPENT_BETTING(int amount, int p1, const char* matchId, BOOL p3, BOOL p4)
 void _NETWORK_SPENT_WAGER(Any p0, Any p1, int amount)
 void NETWORK_SPENT_IN_STRIPCLUB(Any p0, BOOL p1, Any p2, BOOL p3)
 void NETWORK_BUY_HEALTHCARE(int cost, BOOL p1, BOOL p2)
 void NETWORK_BUY_AIRSTRIKE(int cost, BOOL p1, BOOL p2)
 void NETWORK_BUY_BACKUP_GANG(int p0, int p1, BOOL p2, BOOL p3)
 void NETWORK_BUY_HELI_STRIKE(int cost, BOOL p1, BOOL p2)
 void NETWORK_SPENT_AMMO_DROP(Any p0, BOOL p1, BOOL p2)
 void NETWORK_BUY_BOUNTY(int amount, Player victim, BOOL p2, BOOL p3)
 void NETWORK_BUY_PROPERTY(int cost, Hash propertyName, BOOL p2, BOOL p3)
 void NETWORK_BUY_SMOKES(int p0, BOOL p1, BOOL p2)
 void NETWORK_SPENT_HELI_PICKUP(Any p0, BOOL p1, BOOL p2)
 void NETWORK_SPENT_BOAT_PICKUP(Any p0, BOOL p1, BOOL p2)
 void NETWORK_SPENT_BULL_SHARK(Any p0, BOOL p1, BOOL p2)
 void NETWORK_SPENT_CASH_DROP(int amount, BOOL p1, BOOL p2)
 void NETWORK_SPENT_HIRE_MUGGER(Any p0, BOOL p1, BOOL p2)
 void NETWORK_SPENT_ROBBED_BY_MUGGER(int amount, BOOL p1, BOOL p2)
 void NETWORK_SPENT_HIRE_MERCENARY(Any p0, BOOL p1, BOOL p2)
 void NETWORK_SPENT_BUY_WANTEDLEVEL(Any p0, Any* p1, BOOL p2, BOOL p3)
 void NETWORK_SPENT_BUY_OFFTHERADAR(Any p0, BOOL p1, BOOL p2)
 void NETWORK_SPENT_BUY_REVEAL_PLAYERS(Any p0, BOOL p1, BOOL p2)
 void NETWORK_SPENT_CARWASH(Any p0, Any p1, Any p2, BOOL p3, BOOL p4)
 void NETWORK_SPENT_CINEMA(Any p0, Any p1, BOOL p2, BOOL p3)
 void NETWORK_SPENT_TELESCOPE(Any p0, BOOL p1, BOOL p2)
 void NETWORK_SPENT_HOLDUPS(Any p0, BOOL p1, BOOL p2)
 void NETWORK_SPENT_BUY_PASSIVE_MODE(Any p0, BOOL p1, BOOL p2)
 void NETWORK_SPENT_BANK_INTEREST(int p0, BOOL p1, BOOL p2)
 void NETWORK_SPENT_PROSTITUTES(Any p0, BOOL p1, BOOL p2)
 void NETWORK_SPENT_ARREST_BAIL(Any p0, BOOL p1, BOOL p2)
 void NETWORK_SPENT_PAY_VEHICLE_INSURANCE_PREMIUM(int amount, Hash vehicleModel, int* networkHandle, BOOL notBankrupt, BOOL hasTheMoney)
 void NETWORK_SPENT_CALL_PLAYER(Any p0, Any* p1, BOOL p2, BOOL p3)
 void NETWORK_SPENT_BOUNTY(Any p0, BOOL p1, BOOL p2)
 void NETWORK_SPENT_FROM_ROCKSTAR(int p0, BOOL p1, BOOL p2)
 Any _0x9B5016A6433A68C5()
 const char* PROCESS_CASH_GIFT(int* p0, int* p1, const char* p2)
 void NETWORK_SPENT_PLAYER_HEALTHCARE(int p0, int p1, BOOL p2, BOOL p3)
 void NETWORK_SPENT_NO_COPS(Any p0, BOOL p1, BOOL p2)
 void NETWORK_SPENT_REQUEST_JOB(Any p0, BOOL p1, BOOL p2)
 void NETWORK_SPENT_REQUEST_HEIST(Any p0, BOOL p1, BOOL p2)
 void NETWORK_BUY_LOTTERY_TICKET(int p0, int p1, BOOL p2, BOOL p3)
 void NETWORK_BUY_FAIRGROUND_RIDE(int amount, Any p1, BOOL p2, BOOL p3)
 BOOL _0x7C4FCCD2E4DEB394()
 void _NETWORK_SPENT_JOB_SKIP(int amount, const char* matchId, BOOL p2, BOOL p3)
 BOOL _NETWORK_SPENT_BOSS(int amount, BOOL p1, BOOL p2)
 void _NETWORK_SPENT_PAY_GOON(int p0, int p1, int amount)
 void _0xDBC966A01C02BCA7(Any p0, Any p1, Any p2)
 void _NETWORK_SPENT_MOVE_YACHT(int amount, BOOL p1, BOOL p2)
 void _0xFC4EE00A7B3BFB76(Any p0, Any p1, Any p2)
 void _NETWORK_BUY_CONTRABAND(int p0, int p1, Hash p2, BOOL p3, BOOL p4)
 void _NETWORK_SPENT_VIP_UTILITY_CHARGES(Any p0, Any p1, Any p2)
 void _0x112209CE0290C03A(Any p0, Any p1, Any p2, Any p3)
 void _0xED5FD7AF10F5E262(Any p0, Any p1, Any p2, Any p3)
 void _0x0D30EB83668E63C5(Any p0, Any p1, Any p2, Any p3)
 void _0xB49ECA122467D05F(Any p0, Any p1, Any p2, Any p3)
 void _0xE23ADC6FCB1F29AE(Any p0, Any p1, Any p2)
 void _0x0FE8E1FCD2B86B33(Any p0, Any p1, Any p2, Any p3)
 void _0x69EF772B192614C1(Any p0, Any p1, Any p2, Any p3)
 void _0x8E243837643D9583(Any p0, Any p1, Any p2, Any p3)
 void _0xBD0EFB25CCA8F97A(Any p0, Any p1, Any p2, Any p3)
 void _0xA95F667A755725DA(Any p0, Any p1, Any p2, Any p3)
 void _NETWORK_SPENT_PURCHASE_WAREHOUSE(int amount, Any* data, BOOL p2, BOOL p3)
 void _0x4128464231E3CA0B(Any p0, Any p1, Any p2, Any p3)
 void _0x2FAB6614CE22E196(Any p0, Any p1, Any p2, Any p3)
 void _0x05F04155A226FBBF(Any p0, Any p1, Any p2, Any p3)
 void _0xE8B0B270B6E7C76E(Any p0, Any p1, Any p2, Any p3)
 void _0x5BCDE0F640C773D2(Any p0, Any p1, Any p2, Any p3)
 void _0x998E18CEB44487FC(Any p0, Any p1, Any p2, Any p3)
 void _0xFA07759E6FDDD7CF(Any p0, Any p1, Any p2, Any p3)
 void _0x6FD97159FE3C971A(Any p0, Any p1, Any p2, Any p3)
 void _0x675D19C6067CAE08(Any p0, Any p1, Any p2, Any p3)
 void _0xA51B086B0B2C0F7A(Any p0, Any p1, Any p2, Any p3)
 void _0xD7CCCBA28C4ECAF0(Any p0, Any p1, Any p2, Any p3, Any p4)
 void _0x0035BB914316F1E3(Any p0, Any p1, Any p2, Any p3)
 void _0x5F456788B05FAEAC(Any p0, Any p1, Any p2)
 void _0xA75CCF58A60A5FD1(Any p0, Any p1, Any p2, Any p3, Any p4, Any p5, Any p6, Any p7, Any p8, Any p9)
 void _0xB4C2EC463672474E(Any p0, Any p1, Any p2, Any p3)
 void _0x2AFC2D19B50797F2(Any p0, Any p1, Any p2, Any p3)
 void _NETWORK_SPENT_IMPORT_EXPORT_REPAIR(Any p0, Any p1, Any p2)
 void _NETWORK_SPENT_PURCHASE_HANGAR(Any p0, Any p1, Any p2, Any p3)
 void _NETWORK_SPENT_UPGRADE_HANGAR(Any p0, Any p1, Any p2, Any p3)
 void _NETWORK_SPENT_HANGAR_UTILITY_CHARGES(int amount, BOOL p1, BOOL p2)
 void _NETWORK_SPENT_HANGAR_STAFF_CHARGES(int amount, BOOL p1, BOOL p2)
 void _NETWORK_SPENT_BUY_TRUCK(Any p0, Any p1, Any p2, Any p3)
 void _NETWORK_SPENT_UPGRADE_TRUCK(Any p0, Any p1, Any p2, Any p3)
 void _NETWORK_SPENT_BUY_BUNKER(Any p0, Any p1, Any p2, Any p3)
 void _NETWORK_SPENT_UPGRADE_BUNKER(Any p0, Any p1, Any p2, Any p3)
 void _NETWORK_EARN_FROM_SELL_BUNKER(int amount, Hash bunkerHash)
 void _NETWORK_SPENT_BALLISTIC_EQUIPMENT(int amount, BOOL p1, BOOL p2)
 void _NETWORK_EARN_FROM_RDR_BONUS(int amount, Any p1)
 void _NETWORK_EARN_FROM_WAGE_PAYMENT(int amount)
 void _NETWORK_EARN_FROM_WAGE_PAYMENT_BONUS(int amount)
 void _NETWORK_SPENT_BUY_BASE(Any p0, Any p1, Any p2, Any p3)
 void _NETWORK_SPENT_UPGRADE_BASE(Any p0, Any p1, Any p2, Any p3)
 void _NETWORK_SPENT_BUY_TILTROTOR(Any p0, Any p1, Any p2, Any p3)
 void _NETWORK_SPENT_UPGRADE_TILTROTOR(Any p0, Any p1, Any p2, Any p3)
 void _NETWORK_SPENT_EMPLOY_ASSASSINS(Any p0, Any p1, Any p2, Any p3)
 void _NETWORK_SPENT_GANGOPS_CANNON(Any p0, Any p1, Any p2, Any p3)
 void _NETWORK_SPENT_GANGOPS_START_MISSION(Any p0, Any p1, Any p2, Any p3)
 void _NETWORK_EARN_FROM_SELL_BASE(int amount, Hash baseNameHash)
 void _NETWORK_EARN_FROM_TARGET_REFUND(int amount, int p1)
 void _NETWORK_EARN_FROM_GANGOPS_WAGES(int amount, int p1)
 void _NETWORK_EARN_FROM_GANGOPS_WAGES_BONUS(int amount, int p1)
 void _NETWORK_EARN_FROM_DAR_CHALLENGE(int amount, Any p1)
 void _NETWORK_EARN_FROM_DOOMSDAY_FINALE_BONUS(int amount, Hash vehicleHash)
 void _NETWORK_EARN_FROM_GANGOPS_AWARDS(int amount, const char* unk, Any p2)
 void _NETWORK_EARN_FROM_GANGOPS_ELITE(int amount, const char* unk, int actIndex)
 void _NETWORK_RIVAL_DELIVERY_COMPLETED(int earnedMoney)
 void _NETWORK_SPENT_GANGOPS_START_STRAND(int type, int amount, BOOL p2, BOOL p3)
 void _NETWORK_SPENT_GANGOPS_TRIP_SKIP(int amount, BOOL p1, BOOL p2)
 void _NETWORK_EARN_FROM_GANGOPS_JOBS_PREP_PARTICIPATION(int amount)
 void _NETWORK_EARN_FROM_GANGOPS_JOBS_SETUP(int amount, const char* unk)
 void _NETWORK_EARN_FROM_GANGOPS_JOBS_FINALE(int amount, const char* unk)
 void _0x2A7CEC72C3443BCC(Any p0, Any p1, Any p2)
 void _0xE0F82D68C7039158(Any p0)
 void _0xB4DEAE67F35E2ACD(Any p0)
 void _NETWORK_EARN_FROM_BB_EVENT_BONUS(int amount)
 void _0x2A93C46AAB1EACC9(Any p0, Any p1, Any p2, Any p3)
 void _0x226C284C830D0CA8(Any p0, Any p1, Any p2, Any p3)
 void _NETWORK_EARN_FROM_HACKER_TRUCK_MISSION(Any p0, int amount, Any p2, Any p3)
 void _0xED76D195E6E3BF7F(Any p0, Any p1, Any p2, Any p3)
 void _0x1DC9B749E7AE282B(Any p0, Any p1, Any p2, Any p3)
 void _0xC6E74CF8C884C880(Any p0, Any p1, Any p2, Any p3, Any p4, Any p5, Any p6)
 void _0x65482BFD0923C8A1(Any p0, Any p1, Any p2, Any p3, Any p4, Any p5)
 void _NETWORK_SPENT_RDRHATCHET_BONUS(int amount, BOOL p1, BOOL p2)
 void _NETWORK_SPENT_NIGHTCLUB_ENTRY_FEE(Player player, int amount, Any p1, BOOL p2, BOOL p3)
 void _NETWORK_SPENT_NIGHTCLUB_BAR_DRINK(int amount, Any p1, BOOL p2, BOOL p3)
 void _NETWORK_SPENT_BOUNTY_HUNTER_MISSION(int amount, BOOL p1, BOOL p2)
 void _NETWORK_SPENT_REHIRE_DJ(int amount, Any p1, BOOL p2, BOOL p3)
 void _NETWORK_SPENT_ARENA_JOIN_SPECTATOR(int amount, Any p1, BOOL p2, BOOL p3)
 void _NETWORK_EARN_FROM_ARENA_SKILL_LEVEL_PROGRESSION(int amount, Any p1)
 void _NETWORK_EARN_FROM_ARENA_CAREER_PROGRESSION(int amount, Any p1)
 void _NETWORK_SPENT_MAKE_IT_RAIN(int amount, BOOL p1, BOOL p2)
 void _NETWORK_SPENT_BUY_ARENA(int amount, BOOL p1, BOOL p2, const char* p3)
 void _NETWORK_SPENT_UPGRADE_ARENA(int amount, BOOL p1, BOOL p2, const char* p3)
 void _NETWORK_SPENT_ARENA_SPECTATOR_BOX(int amount, Any p1, BOOL p2, BOOL p3)
 void _NETWORK_SPENT_SPIN_THE_WHEEL_PAYMENT(int amount, Any p1, BOOL p2)
 void _NETWORK_EARN_FROM_SPIN_THE_WHEEL_CASH(int amount)
 void _NETWORK_SPENT_ARENA_PREMIUM(int amount, BOOL p1, BOOL p2)
 void _NETWORK_EARN_FROM_ARENA_WAR(int amount, Any p1, Any p2, Any p3)
 void _NETWORK_EARN_FROM_ASSASSINATE_TARGET_KILLED_2(int amount)
 void _NETWORK_EARN_FROM_BB_EVENT_CARGO(int amount)
 void _NETWORK_EARN_FROM_RC_TIME_TRIAL(int amount)
 void _NETWORK_EARN_FROM_DAILY_OBJECTIVE_EVENT(int amount)
 void _NETWORK_SPENT_CASINO_MEMBERSHIP(int amount, BOOL p1, BOOL p2, int p3)
 void _NETWORK_SPENT_BUY_CASINO(int amount, BOOL p1, BOOL p2, Any* data)
 void _NETWORK_SPENT_UPGRADE_CASINO(int amount, BOOL p1, BOOL p2, Any* data)
 void _NETWORK_SPENT_CASINO_GENERIC(int amount, Any p1, Any p2, Any p3, Any p4)
 void _NETWORK_EARN_FROM_TIME_TRIAL_WIN(int amount)
 void _NETWORK_EARN_FROM_COLLECTION_ITEM(int amount)
 void _NETWORK_EARN_FROM_COLLECTABLES_ACTION_FIGURES(int amount)
 void _NETWORK_EARN_FROM_COMPLETE_COLLECTION(int amount)
 void _NETWORK_EARN_FROM_SELLING_VEHICLE(int amount)
 void _NETWORK_EARN_FROM_CASINO_MISSION_REWARD(int amount)
 void _NETWORK_EARN_FROM_CASINO_STORY_MISSION_REWARD(int amount)
 void _NETWORK_EARN_FROM_CASINO_MISSION_PARTICIPATION(int amount)
 void _NETWORK_EARN_FROM_CASINO_AWARD(int amount, Hash hash)
 int NETWORK_GET_VC_BANK_BALANCE()
 int NETWORK_GET_VC_WALLET_BALANCE(int characterSlot)
 int NETWORK_GET_VC_BALANCE()
 int NETWORK_GET_EVC_BALANCE()
 int NETWORK_GET_PVC_BALANCE()
 const char* NETWORK_GET_STRING_WALLET_BALANCE(int characterSlot)
 const char* NETWORK_GET_STRING_BANK_BALANCE()
 const char* NETWORK_GET_STRING_BANK_WALLET_BALANCE()
 BOOL _NETWORK_GET_VC_WALLET_BALANCE_IS_NOT_LESS_THAN(int amount, int characterSlot)
 BOOL _NETWORK_GET_VC_BANK_BALANCE_IS_NOT_LESS_THAN(int amount)
 BOOL _NETWORK_GET_VC_BANK_WALLET_BALANCE_IS_NOT_LESS_THAN(int amount, int characterSlot)
 int NETWORK_GET_PVC_TRANSFER_BALANCE()
 BOOL _0x08E8EEADFD0DC4A0(int amount)
 BOOL NETWORK_CAN_RECEIVE_PLAYER_CASH(Any p0, Any p1, Any p2, Any p3)
 int _NETWORK_GET_REMAINING_VC_DAILY_TRANSFERS_2()
 int WITHDRAW_VC(int amount)
 BOOL DEPOSIT_VC(int amount)
 BOOL _0xE154B48B68EF72BC(Any p0)
 BOOL _0x6FCF8DDEA146C45B(Any p0)
}

namespace NETSHOPPING
{
 BOOL _NET_GAMESERVER_USE_SERVER_TRANSACTIONS()
 BOOL _NET_GAMESERVER_CATALOG_ITEM_EXISTS(const char* name)
 BOOL _NET_GAMESERVER_CATALOG_ITEM_EXISTS_HASH(Hash hash)
 int NET_GAMESERVER_GET_PRICE(Hash itemHash, Hash categoryHash, BOOL p2)
 BOOL _NET_GAMESERVER_CATALOG_IS_READY()
 BOOL _NET_GAMESERVER_IS_CATALOG_VALID()
 Any _0x85F6C9ABA1DE2BCF()
 Any _0x357B152EF96C30B6()
 BOOL _NET_GAMESERVER_GET_CATALOG_STATE(int* state)
 Any _0xE3E5A7C64CA2C6ED()
 BOOL _0x0395CB47B022E62C(int* p0)
 BOOL NET_GAMESERVER_START_SESSION(int charSlot)
 BOOL _0x72EB7BA9B69BF6AB()
 BOOL _0x170910093218C8B9(int* p0)
 BOOL _0xC13C38E47EA5DF31(int* p0)
 BOOL NET_GAMESERVER_IS_SESSION_VALID(int charSlot)
 int _0x74A0FD0688F1EE45(int p0)
 BOOL NET_GAMESERVER_SESSION_APPLY_RECEIVED_DATA(int charSlot)
 BOOL NET_GAMESERVER_IS_SESSION_REFRESH_PENDING()
 BOOL _NET_GAMESERVER_GET_BALANCE(BOOL inventory, BOOL playerbalance)
 BOOL _0x613F125BA3BD2EB9()
 BOOL _NET_GAMESERVER_GET_TRANSACTION_MANAGER_DATA(int* p0, BOOL* p1)
 BOOL NET_GAMESERVER_BASKET_START(int* transactionId, Hash categoryHash, Hash actionHash, int flags)
 BOOL _NET_GAMESERVER_BASKET_DELETE()
 BOOL NET_GAMESERVER_BASKET_END()
 BOOL NET_GAMESERVER_BASKET_ADD_ITEM(Any* itemData, int quantity)
 BOOL NET_GAMESERVER_BASKET_IS_FULL()
 BOOL NET_GAMESERVER_BASKET_APPLY_SERVER_DATA(Any p0, Any* p1)
 BOOL NET_GAMESERVER_CHECKOUT_START(int transactionId)
 BOOL _0xC830417D630A50F9(int transactionId)
 BOOL _0x79EDAC677CA62F81(int transactionId)
 BOOL NET_GAMESERVER_BEGIN_SERVICE(int* transactionId, Hash categoryHash, Hash itemHash, Hash actionTypeHash, int value, int flags)
 BOOL NET_GAMESERVER_END_SERVICE(int transactionId)
 BOOL _NET_GAMESERVER_DELETE_CHARACTER_SLOT(int slot, BOOL transfer, Hash reason)
 int _NET_GAMESERVER_DELETE_CHARACTER_SLOT_GET_STATUS()
 BOOL NET_GAMESERVER_DELETE_SET_TELEMETRY_NONCE_SEED()
 BOOL _NET_GAMESERVER_TRANSFER_BANK_TO_WALLET(int charSlot, int amount)
 BOOL _NET_GAMESERVER_TRANSFER_WALLET_TO_BANK(int charSlot, int amount)
 int _NET_GAMESERVER_TRANSFER_CASH_GET_STATUS()
 int _NET_GAMESERVER_TRANSFER_CASH_GET_STATUS_2()
 BOOL _NET_GAMESERVER_TRANSFER_CASH_SET_TELEMETRY_NONCE_SEED()
 BOOL NET_GAMESERVER_SET_TELEMETRY_NONCE_SEED(int p0)
}

namespace NETWORK
{
 const char* _GET_ONLINE_VERSION()
 BOOL NETWORK_IS_SIGNED_IN()
 BOOL NETWORK_IS_SIGNED_ONLINE()
 BOOL _0xBD545D44CCE70597()
 Any _0xEBCAB9E5048434F4()
 Any _0x74FB3E29E6D10FA9()
 Any _0x7808619F31FF22DB()
 Any _0xA0FA4EC6A05DA44E()
 BOOL NETWORK_HAVE_JUST_UPLOAD_LATER()
 BOOL _0x8D11E61A4ABF49CC()
 BOOL NETWORK_IS_CLOUD_AVAILABLE()
 BOOL NETWORK_HAS_SOCIAL_CLUB_ACCOUNT()
 Any _0xBA9775570DB788CF()
 BOOL NETWORK_IS_HOST()
 Player _NETWORK_GET_HOST()
 BOOL _0x4237E822315D8BA9()
 BOOL NETWORK_HAVE_ONLINE_PRIVILEGES()
 BOOL _NETWORK_HAS_AGE_RESTRICTED_PROFILE()
 BOOL NETWORK_HAVE_USER_CONTENT_PRIVILEGES(Any p0)
 BOOL _0xAEEF48CDF5B6CE7C(Any p0, Any p1)
 BOOL _0x78321BEA235FD8CD(Any p0, BOOL p1)
 BOOL _0x595F028698072DD9(Any p0, Any p1, BOOL p2)
 BOOL _0x83F28CE49FBBFFBA(Any p0, Any p1, BOOL p2)
 Any _0x07EAB372C8841D99(Any p0, Any p1, Any p2)
 Any _0x906CA41A4B74ECA4()
 Any _0x023ACAB2DC9DC4A4()
 Any _0x76BF03FADBF154F5()
 int NETWORK_GET_AGE_GROUP()
 Any _0x0CF6CC51AA18F0F8(Any p0, Any p1, Any p2)
 BOOL _0x64E5C4CC82847B73()
 void _0x1F7BC3539F9E0224()
 BOOL _NETWORK_HAVE_ONLINE_PRIVILEGE_2()
 Any _0xA8ACB6459542A8C8()
 void _0x83FE8D7229593017()
 Any _0x53C10C8BD774F2C9()
 BOOL NETWORK_CAN_BAIL()
 void NETWORK_BAIL(int p0, int p1, int p2)
 void _0x283B6062A2C01E9B()
 Any _0x8B4FFC790CA131EF(Any p0, Any p1, Any p2, Any p3)
 void _NETWORK_TRANSITION_TRACK(Hash hash, int p1, int p2, int state, int p4)
 Any _0x04918A41BC9B8157(Any p0, Any p1, Any p2)
 BOOL NETWORK_CAN_ACCESS_MULTIPLAYER(int* loadingState)
 BOOL NETWORK_IS_MULTIPLAYER_DISABLED()
 BOOL NETWORK_CAN_ENTER_MULTIPLAYER()
 Any NETWORK_SESSION_ENTER(Any p0, Any p1, Any p2, int maxPlayers, Any p4, Any p5)
 BOOL NETWORK_SESSION_FRIEND_MATCHMAKING(int p0, int p1, int maxPlayers, BOOL p3)
 BOOL NETWORK_SESSION_CREW_MATCHMAKING(int p0, int p1, int p2, int maxPlayers, BOOL p4)
 BOOL NETWORK_SESSION_ACTIVITY_QUICKMATCH(Any p0, Any p1, Any p2, Any p3)
 BOOL NETWORK_SESSION_HOST(int p0, int maxPlayers, BOOL p2)
 BOOL NETWORK_SESSION_HOST_CLOSED(int p0, int maxPlayers)
 BOOL NETWORK_SESSION_HOST_FRIENDS_ONLY(int p0, int maxPlayers)
 BOOL NETWORK_SESSION_IS_CLOSED_FRIENDS()
 BOOL NETWORK_SESSION_IS_CLOSED_CREW()
 BOOL NETWORK_SESSION_IS_SOLO()
 BOOL NETWORK_SESSION_IS_PRIVATE()
 BOOL NETWORK_SESSION_END(BOOL p0, BOOL p1)
 void NETWORK_SESSION_KICK_PLAYER(Player player)
 BOOL NETWORK_SESSION_GET_KICK_VOTE(Player player)
 Any _0x041C7F2A6C9894E6(Any p0, Any p1, Any p2)
 Any _0x59DF79317F85A7E0()
 Any _0xFFE1E5B792D92B34()
 void NETWORK_SESSION_SET_MATCHMAKING_GROUP(int matchmakingGroup)
 void NETWORK_SESSION_SET_MATCHMAKING_GROUP_MAX(int playerType, int playerCount)
 int NETWORK_SESSION_GET_MATCHMAKING_GROUP_FREE(int p0)
 void _0xCAE55F48D3D7875C(int p0)
 void _0xF49ABC20D8552257(Any p0)
 void _0x4811BBAC21C5FCD5(Any p0)
 void _0x5539C3EBF104A53A(BOOL p0)
 void _0x702BC4D605522539(Any p0)
 void NETWORK_SESSION_SET_MATCHMAKING_PROPERTY_ID(BOOL p0)
 void NETWORK_SESSION_SET_MATCHMAKING_MENTAL_STATE(Any p0)
 void _0x5ECD378EE64450AB(Any p0)
 void _0x59D421683D31835A(Any p0)
 void _0x1153FA02A659051C()
 void _NETWORK_SESSION_HOSTED(BOOL p0)
 void NETWORK_ADD_FOLLOWERS(int* p0, int p1)
 void NETWORK_CLEAR_FOLLOWERS()
 void NETWORK_GET_GLOBAL_MULTIPLAYER_CLOCK(int* hours, int* minutes, int* seconds)
 void _0x600F8CB31C7AAB6E(Any p0)
 int _NETWORK_GET_TARGETING_MODE()
 BOOL _0xE532D6811B3A4D2A(Any p0)
 BOOL NETWORK_FIND_MATCHED_GAMERS(Any p0, float p1, float p2, float p3)
 BOOL NETWORK_IS_FINDING_GAMERS()
 Any _0xF9B83B77929D8863()
 int NETWORK_GET_NUM_FOUND_GAMERS()
 BOOL NETWORK_GET_FOUND_GAMER(Any* p0, Any p1)
 void NETWORK_CLEAR_FOUND_GAMERS()
 BOOL _NETWORK_GET_GAMER_STATUS(Any* p0)
 Any _0x2CC848A861D01493()
 Any _0x94A8394D150B013A()
 Any _0x5AE17C6B0134B7F1()
 BOOL NETWORK_GET_GAMER_STATUS_RESULT(Any* p0, Any p1)
 void NETWORK_CLEAR_GET_GAMER_STATUS()
 void NETWORK_SESSION_JOIN_INVITE()
 void NETWORK_SESSION_CANCEL_INVITE()
 void NETWORK_SESSION_FORCE_CANCEL_INVITE()
 BOOL NETWORK_HAS_PENDING_INVITE()
 BOOL _0xC42DD763159F3461()
 BOOL _NETWORK_ACCEPT_INVITE()
 BOOL NETWORK_SESSION_WAS_INVITED()
 void NETWORK_SESSION_GET_INVITER(int* networkHandle)
 BOOL _0xD313DE83394AF134()
 BOOL _0xBDB6F89C729CF388()
 void NETWORK_SUPPRESS_INVITE(BOOL toggle)
 void NETWORK_BLOCK_INVITES(BOOL toggle)
 void _NETWORK_BLOCK_INVITES_2(BOOL toggle)
 void _0xF814FEC6A19FD6E0()
 void _NETWORK_BLOCK_KICKED_PLAYERS(BOOL p0)
 void _0x7AC752103856FB20(BOOL p0)
 BOOL NETWORK_IS_OFFLINE_INVITE_PENDING()
 void _0x140E6A44870A11CE()
 void NETWORK_SESSION_HOST_SINGLE_PLAYER(int p0)
 void NETWORK_SESSION_LEAVE_SINGLE_PLAYER()
 BOOL NETWORK_IS_GAME_IN_PROGRESS()
 BOOL NETWORK_IS_SESSION_ACTIVE()
 BOOL NETWORK_IS_IN_SESSION()
 BOOL NETWORK_IS_SESSION_STARTED()
 BOOL NETWORK_IS_SESSION_BUSY()
 BOOL NETWORK_CAN_SESSION_END()
 void NETWORK_SESSION_MARK_VISIBLE(BOOL toggle)
 BOOL NETWORK_SESSION_IS_VISIBLE()
 void NETWORK_SESSION_BLOCK_JOIN_REQUESTS(BOOL toggle)
 void NETWORK_SESSION_CHANGE_SLOTS(int p0, BOOL p1)
 int NETWORK_SESSION_GET_PRIVATE_SLOTS()
 void NETWORK_SESSION_VOICE_HOST()
 void NETWORK_SESSION_VOICE_LEAVE()
 void NETWORK_SESSION_VOICE_CONNECT_TO_PLAYER(Any* p0)
 void NETWORK_SET_KEEP_FOCUSPOINT(BOOL p0, Any p1)
 void _0x5B8ED3DB018927B1(Any p0)
 BOOL NETWORK_SESSION_IS_IN_VOICE_SESSION()
 Any _0xB5D3453C98456528()
 BOOL NETWORK_SESSION_IS_VOICE_SESSION_BUSY()
 BOOL NETWORK_SEND_TEXT_MESSAGE(const char* message, int* networkHandle)
 void NETWORK_SET_ACTIVITY_SPECTATOR(BOOL toggle)
 BOOL NETWORK_IS_ACTIVITY_SPECTATOR()
 void _0x0E4F77F7B9D74D84(Any p0)
 void NETWORK_SET_ACTIVITY_SPECTATOR_MAX(int maxSpectators)
 int NETWORK_GET_ACTIVITY_PLAYER_NUM(BOOL p0)
 BOOL NETWORK_IS_ACTIVITY_SPECTATOR_FROM_HANDLE(int* networkHandle)
 Any NETWORK_HOST_TRANSITION(Any p0, Any p1, Any p2, Any p3, Any p4, Any p5, Any p6, Any p7, Any p8, Any p9)
 BOOL NETWORK_DO_TRANSITION_QUICKMATCH(Any p0, Any p1, Any p2, Any p3, Any p4, Any p5)
 BOOL NETWORK_DO_TRANSITION_QUICKMATCH_ASYNC(Any p0, Any p1, Any p2, Any p3, Any p4, Any p5)
 BOOL NETWORK_DO_TRANSITION_QUICKMATCH_WITH_GROUP(Any p0, Any p1, Any p2, Any p3, Any* p4, Any p5, Any p6, Any p7)
 Any NETWORK_JOIN_GROUP_ACTIVITY()
 void _0x1888694923EF4591()
 void _0xB13E88E655E5A3BC()
 BOOL NETWORK_IS_TRANSITION_CLOSED_FRIENDS()
 BOOL NETWORK_IS_TRANSITION_CLOSED_CREW()
 BOOL NETWORK_IS_TRANSITION_SOLO()
 BOOL NETWORK_IS_TRANSITION_PRIVATE()
 int _0x617F49C2668E6155()
 void _0x261E97AD7BCF3D40(BOOL p0)
 void _0x39917E1B4CB0F911(BOOL p0)
 void _0x2CE9D95E4051AECD(Any p0)
 void NETWORK_SET_TRANSITION_CREATOR_HANDLE(Any* p0)
 void NETWORK_CLEAR_TRANSITION_CREATOR_HANDLE()
 BOOL NETWORK_INVITE_GAMERS_TO_TRANSITION(Any* p0, Any p1)
 void NETWORK_SET_GAMER_INVITED_TO_TRANSITION(int* networkHandle)
 BOOL NETWORK_LEAVE_TRANSITION()
 BOOL NETWORK_LAUNCH_TRANSITION()
 void _0xA2E9C1AB8A92E8CD(BOOL toggle)
 void NETWORK_BAIL_TRANSITION(int p0, int p1, int p2)
 BOOL NETWORK_DO_TRANSITION_TO_GAME(BOOL p0, int maxPlayers)
 BOOL NETWORK_DO_TRANSITION_TO_NEW_GAME(BOOL p0, int maxPlayers, BOOL p2)
 BOOL NETWORK_DO_TRANSITION_TO_FREEMODE(Any* p0, Any p1, BOOL p2, int players, BOOL p4)
 BOOL NETWORK_DO_TRANSITION_TO_NEW_FREEMODE(Any* p0, Any* p1, int players, BOOL p3, BOOL p4, BOOL p5)
 BOOL NETWORK_IS_TRANSITION_TO_GAME()
 int NETWORK_GET_TRANSITION_MEMBERS(Any* data, int dataCount)
 void NETWORK_APPLY_TRANSITION_PARAMETER(int p0, int p1)
 void NETWORK_APPLY_TRANSITION_PARAMETER_STRING(int p0, const char* string, BOOL p2)
 BOOL NETWORK_SEND_TRANSITION_GAMER_INSTRUCTION(int* networkHandle, const char* p1, int p2, int p3, BOOL p4)
 BOOL NETWORK_MARK_TRANSITION_GAMER_AS_FULLY_JOINED(Any* p0)
 BOOL NETWORK_IS_TRANSITION_HOST()
 BOOL NETWORK_IS_TRANSITION_HOST_FROM_HANDLE(int* networkHandle)
 BOOL NETWORK_GET_TRANSITION_HOST(int* networkHandle)
 BOOL NETWORK_IS_IN_TRANSITION()
 BOOL NETWORK_IS_TRANSITION_STARTED()
 BOOL NETWORK_IS_TRANSITION_BUSY()
 BOOL NETWORK_IS_TRANSITION_MATCHMAKING()
 BOOL _0xC571D0E77D8BBC29()
 void _0x1398582B7F72B3ED(Any p0)
 void _0x1F8E00FB18239600(Any p0)
 void _0xF6F4383B7C92F11A(Any p0)
 void NETWORK_OPEN_TRANSITION_MATCHMAKING()
 void NETWORK_CLOSE_TRANSITION_MATCHMAKING()
 BOOL NETWORK_IS_TRANSITION_OPEN_TO_MATCHMAKING()
 void NETWORK_SET_TRANSITION_VISIBILITY_LOCK(BOOL p0, BOOL p1)
 BOOL NETWORK_IS_TRANSITION_VISIBILITY_LOCKED()
 void NETWORK_SET_TRANSITION_ACTIVITY_ID(Any p0)
 void NETWORK_CHANGE_TRANSITION_SLOTS(Any p0, Any p1)
 void _0x973D76AA760A6CB6(BOOL p0)
 BOOL NETWORK_HAS_PLAYER_STARTED_TRANSITION(Player player)
 BOOL NETWORK_ARE_TRANSITION_DETAILS_VALID(Any p0)
 BOOL NETWORK_JOIN_TRANSITION(Player player)
 BOOL NETWORK_HAS_INVITED_GAMER_TO_TRANSITION(Any* p0)
 BOOL _0x3F9990BF5F22759C(Any* p0)
 BOOL NETWORK_IS_ACTIVITY_SESSION()
 void _0x4A9FDE3A5A6D0437(BOOL toggle)
 BOOL _NETWORK_SEND_PRESENCE_INVITE(int* networkHandle, Any* p1, Any p2, Any p3)
 BOOL _NETWORK_SEND_PRESENCE_TRANSITION_INVITE(Any* p0, Any* p1, Any p2, Any p3)
 BOOL _0x1171A97A3D3981B6(Any* p0, Any* p1, Any p2, Any p3)
 Any _0x742B58F723233ED9(Any p0)
 int NETWORK_GET_NUM_PRESENCE_INVITES()
 BOOL NETWORK_ACCEPT_PRESENCE_INVITE(Any p0)
 BOOL NETWORK_REMOVE_PRESENCE_INVITE(Any p0)
 Any NETWORK_GET_PRESENCE_INVITE_ID(Any p0)
 Any NETWORK_GET_PRESENCE_INVITE_INVITER(Any p0)
 BOOL NETWORK_GET_PRESENCE_INVITE_HANDLE(Any p0, Any* p1)
 Any NETWORK_GET_PRESENCE_INVITE_SESSION_ID(Any p0)
 Any NETWORK_GET_PRESENCE_INVITE_CONTENT_ID(Any p0)
 Any _0xD39B3FFF8FFDD5BF(Any p0)
 Any _0x728C4CC7920CD102(Any p0)
 BOOL NETWORK_GET_PRESENCE_INVITE_FROM_ADMIN(Any p0)
 BOOL _0x8806CEBFABD3CE05(Any p0)
 BOOL NETWORK_HAS_FOLLOW_INVITE()
 Any NETWORK_ACTION_FOLLOW_INVITE()
 Any NETWORK_CLEAR_FOLLOW_INVITE()
 void _0xEBF8284D8CADEB53()
 void NETWORK_REMOVE_TRANSITION_INVITE(Any* p0)
 void NETWORK_REMOVE_ALL_TRANSITION_INVITE()
 void _0xF083835B70BA9BFE()
 BOOL NETWORK_INVITE_GAMERS(Any* p0, Any p1, Any* p2, Any* p3)
 BOOL NETWORK_HAS_INVITED_GAMER(Any* p0)
 BOOL _0x71DC455F5CD1C2B1(Any* networkHandle)
 Any _0x3855FB5EB2C5E8B2(Any p0)
 BOOL NETWORK_GET_CURRENTLY_SELECTED_GAMER_HANDLE_FROM_INVITE_MENU(Any* p0)
 BOOL NETWORK_SET_CURRENTLY_SELECTED_GAMER_HANDLE_FROM_INVITE_MENU(Any* p0)
 void NETWORK_SET_INVITE_ON_CALL_FOR_INVITE_MENU(Any* p0)
 BOOL NETWORK_CHECK_DATA_MANAGER_SUCCEEDED_FOR_HANDLE(Any p0, Any* p1)
 Any _0x4AD490AE1536933B(Any p0, Any p1)
 void _0x0D77A82DC2D0DA59(Any* p0, Any* p1)
 BOOL FILLOUT_PM_PLAYER_LIST(int* networkHandle, Any p1, Any p2)
 BOOL FILLOUT_PM_PLAYER_LIST_WITH_NAMES(Any* p0, Any* p1, Any p2, Any p3)
 BOOL _0xE26CCFF8094D8C74(int p0)
 BOOL NETWORK_SET_CURRENT_DATA_MANAGER_HANDLE(Any* p0)
 BOOL NETWORK_IS_IN_PLATFORM_PARTY()
 int _NETWORK_GET_PLATFORM_PARTY_UNK()
 int NETWORK_GET_PLATFORM_PARTY_MEMBERS(Any* data, int dataSize)
 BOOL NETWORK_IS_IN_PLATFORM_PARTY_CHAT()
 BOOL NETWORK_IS_CHATTING_IN_PLATFORM_PARTY(int* networkHandle)
 Any _0x2BF66D2E7414F686()
 BOOL _0x14922ED3E38761F0()
 void _0x6CE50E47F5543D0C()
 void _0xFA2888E3833C8E96()
 void _0x25D990F8E0E3F13C()
 void _0xF1B84178F8674195(Any p0)
 int NETWORK_GET_RANDOM_INT()
 int NETWORK_GET_RANDOM_INT_RANGED(int rangeStart, int rangeEnd)
 BOOL NETWORK_PLAYER_IS_CHEATER()
 int NETWORK_PLAYER_GET_CHEATER_REASON()
 BOOL NETWORK_PLAYER_IS_BADSPORT()
 BOOL _TRIGGER_SCRIPT_CRC_CHECK_ON_PLAYER(Player player, int p1, Hash scriptHash)
 Any _0xA12D3A5A3753CC23()
 Any _0xF287F506767CC8A9()
 BOOL _REMOTE_CHEAT_DETECTED(Player player, int a, int b)
 BOOL BAD_SPORT_PLAYER_LEFT_DETECTED(int* networkHandle, int event, int amountReceived)
 void NETWORK_APPLY_PED_SCAR_DATA(Ped ped, int p1)
 void NETWORK_SET_THIS_SCRIPT_IS_NETWORK_SCRIPT(int lobbySize, BOOL p1, int playerId)
 BOOL _NETWORK_IS_THIS_SCRIPT_MARKED(Any p0, BOOL p1, Any p2)
 BOOL NETWORK_GET_THIS_SCRIPT_IS_NETWORK_SCRIPT()
 int NETWORK_GET_MAX_NUM_PARTICIPANTS()
 int NETWORK_GET_NUM_PARTICIPANTS()
 int NETWORK_GET_SCRIPT_STATUS()
 void NETWORK_REGISTER_HOST_BROADCAST_VARIABLES(int* vars, int numVars)
 void NETWORK_REGISTER_PLAYER_BROADCAST_VARIABLES(int* vars, int numVars)
 void NETWORK_FINISH_BROADCASTING_DATA()
 BOOL _0x5D10B3795F3FC886()
 int NETWORK_GET_PLAYER_INDEX(Player player)
 int NETWORK_GET_PARTICIPANT_INDEX(int index)
 Player NETWORK_GET_PLAYER_INDEX_FROM_PED(Ped ped)
 int NETWORK_GET_NUM_CONNECTED_PLAYERS()
 BOOL NETWORK_IS_PLAYER_CONNECTED(Player player)
 int NETWORK_GET_TOTAL_NUM_PLAYERS()
 BOOL NETWORK_IS_PARTICIPANT_ACTIVE(int p0)
 BOOL NETWORK_IS_PLAYER_ACTIVE(Player player)
 BOOL NETWORK_IS_PLAYER_A_PARTICIPANT(Player player)
 BOOL NETWORK_IS_HOST_OF_THIS_SCRIPT()
 Player NETWORK_GET_HOST_OF_THIS_SCRIPT()
 Player NETWORK_GET_HOST_OF_SCRIPT(const char* scriptName, int instanceId, int positionHash)
 void NETWORK_SET_MISSION_FINISHED()
 BOOL NETWORK_IS_SCRIPT_ACTIVE(const char* scriptName, Player player, BOOL p2, Any p3)
 Any _0x560B423D73015E77(Any p0)
 int NETWORK_GET_NUM_SCRIPT_PARTICIPANTS(Any* p0, Any p1, Any p2)
 Any _0x638A3A81733086DB()
 BOOL NETWORK_IS_PLAYER_A_PARTICIPANT_ON_SCRIPT(Player p0, Any* p1, Any p2)
 void _0x2302C0264EA58D31()
 void _0x741A3D8380319A81()
 Player PARTICIPANT_ID()
 int PARTICIPANT_ID_TO_INT()
 Any _0x2DA41ED6E1FCD7A5(Any p0, Any p1)
 int NETWORK_GET_DESTROYER_OF_NETWORK_ID(int netId, Hash* weaponHash)
 Any _0xC434133D9BA52777(Any p0, Any p1)
 Any _0x83660B734994124D(Any p0, Any p1, Any p2)
 BOOL _NETWORK_GET_DESTROYER_OF_ENTITY(Any p0, Any p1, Hash* weaponHash)
 Entity NETWORK_GET_ENTITY_KILLER_OF_PLAYER(Player player, Hash* weaponHash)
 void NETWORK_RESURRECT_LOCAL_PLAYER(float x, float y, float z, float heading, BOOL unk, BOOL changetime, Any p6)
 void NETWORK_SET_LOCAL_PLAYER_INVINCIBLE_TIME(int time)
 BOOL NETWORK_IS_LOCAL_PLAYER_INVINCIBLE()
 void NETWORK_DISABLE_INVINCIBLE_FLASHING(Player player, BOOL toggle)
 void NETWORK_SET_LOCAL_PLAYER_SYNC_LOOK_AT(BOOL toggle)
 BOOL _0xB07D3185E11657A5(Entity entity)
 int NETWORK_GET_NETWORK_ID_FROM_ENTITY(Entity entity)
 Entity NETWORK_GET_ENTITY_FROM_NETWORK_ID(int netId)
 BOOL NETWORK_GET_ENTITY_IS_NETWORKED(Entity entity)
 BOOL NETWORK_GET_ENTITY_IS_LOCAL(Entity entity)
 void NETWORK_REGISTER_ENTITY_AS_NETWORKED(Entity entity)
 void NETWORK_UNREGISTER_NETWORKED_ENTITY(Entity entity)
 BOOL NETWORK_DOES_NETWORK_ID_EXIST(int netID)
 BOOL NETWORK_DOES_ENTITY_EXIST_WITH_NETWORK_ID(Entity entity)
 BOOL NETWORK_REQUEST_CONTROL_OF_NETWORK_ID(int netId)
 BOOL NETWORK_HAS_CONTROL_OF_NETWORK_ID(int netId)
 BOOL _0x7242F8B741CE1086(int netId)
 BOOL NETWORK_REQUEST_CONTROL_OF_ENTITY(Entity entity)
 BOOL NETWORK_REQUEST_CONTROL_OF_DOOR(int doorID)
 BOOL NETWORK_HAS_CONTROL_OF_ENTITY(Entity entity)
 BOOL NETWORK_HAS_CONTROL_OF_PICKUP(Pickup pickup)
 BOOL NETWORK_HAS_CONTROL_OF_DOOR(Hash doorHash)
 BOOL NETWORK_IS_DOOR_NETWORKED(Hash doorHash)
 int VEH_TO_NET(Vehicle vehicle)
 int PED_TO_NET(Ped ped)
 int OBJ_TO_NET(Object object)
 Vehicle NET_TO_VEH(int netHandle)
 Ped NET_TO_PED(int netHandle)
 Object NET_TO_OBJ(int netHandle)
 Entity NET_TO_ENT(int netHandle)
 void NETWORK_GET_LOCAL_HANDLE(int* networkHandle, int bufferSize)
 void NETWORK_HANDLE_FROM_USER_ID(const char* userId, int* networkHandle, int bufferSize)
 void NETWORK_HANDLE_FROM_MEMBER_ID(const char* memberId, int* networkHandle, int bufferSize)
 void NETWORK_HANDLE_FROM_PLAYER(Player player, int* networkHandle, int bufferSize)
 Hash NETWORK_HASH_FROM_PLAYER_HANDLE(Player player)
 Hash NETWORK_HASH_FROM_GAMER_HANDLE(int* networkHandle)
 void NETWORK_HANDLE_FROM_FRIEND(int friendIndex, int* networkHandle, int bufferSize)
 BOOL NETWORK_GAMERTAG_FROM_HANDLE_START(int* networkHandle)
 BOOL NETWORK_GAMERTAG_FROM_HANDLE_PENDING()
 BOOL NETWORK_GAMERTAG_FROM_HANDLE_SUCCEEDED()
 const char* NETWORK_GET_GAMERTAG_FROM_HANDLE(int* networkHandle)
 int _0xD66C9E72B3CC4982(Any* p0, Any p1)
 Any _0x58CC181719256197(Any p0, Any p1, Any p2)
 BOOL NETWORK_ARE_HANDLES_THE_SAME(int* netHandle1, int* netHandle2)
 BOOL NETWORK_IS_HANDLE_VALID(int* networkHandle, int bufferSize)
 Player NETWORK_GET_PLAYER_FROM_GAMER_HANDLE(int* networkHandle)
 const char* NETWORK_MEMBER_ID_FROM_GAMER_HANDLE(int* networkHandle)
 BOOL NETWORK_IS_GAMER_IN_MY_SESSION(int* networkHandle)
 void NETWORK_SHOW_PROFILE_UI(int* networkHandle)
 const char* NETWORK_PLAYER_GET_NAME(Player player)
 const char* NETWORK_PLAYER_GET_USERID(Player player, int* userID)
 BOOL NETWORK_PLAYER_IS_ROCKSTAR_DEV(Player player)
 BOOL NETWORK_PLAYER_INDEX_IS_CHEATER(Player player)
 int _NETWORK_GET_ENTITY_NET_SCRIPT_ID(Entity entity)
 Any _0x37D5F739FD494675(Any p0)
 BOOL NETWORK_IS_INACTIVE_PROFILE(Any* p0)
 int NETWORK_GET_MAX_FRIENDS()
 int NETWORK_GET_FRIEND_COUNT()
 const char* NETWORK_GET_FRIEND_NAME(int friendIndex)
 const char* _NETWORK_GET_FRIEND_NAME_FROM_INDEX(int friendIndex)
 BOOL NETWORK_IS_FRIEND_ONLINE(const char* name)
 BOOL NETWORK_IS_FRIEND_HANDLE_ONLINE(int* networkHandle)
 BOOL NETWORK_IS_FRIEND_IN_SAME_TITLE(const char* friendName)
 BOOL NETWORK_IS_FRIEND_IN_MULTIPLAYER(const char* friendName)
 BOOL NETWORK_IS_FRIEND(int* networkHandle)
 Any NETWORK_IS_PENDING_FRIEND(Any p0)
 Any NETWORK_IS_ADDING_FRIEND()
 BOOL NETWORK_ADD_FRIEND(int* networkHandle, const char* message)
 BOOL NETWORK_IS_FRIEND_INDEX_ONLINE(int friendIndex)
 void NETWORK_SET_PLAYER_IS_PASSIVE(BOOL toggle)
 BOOL NETWORK_GET_PLAYER_OWNS_WAYPOINT(Player player)
 BOOL NETWORK_CAN_SET_WAYPOINT()
 void _0x4C2A9FDC22377075()
 Any _0xB309EBEA797E001F(Any p0)
 Any _0x26F07DD83A5F7F98()
 BOOL NETWORK_HAS_HEADSET()
 void _0x7D395EA61622E116(BOOL p0)
 BOOL NETWORK_IS_LOCAL_TALKING()
 BOOL NETWORK_GAMER_HAS_HEADSET(Any* networkHandle)
 BOOL NETWORK_IS_GAMER_TALKING(Any* networkHandle)
 BOOL _NETWORK_CAN_COMMUNICATE_WITH_GAMER_2(Any* networkHandle)
 BOOL NETWORK_CAN_COMMUNICATE_WITH_GAMER(Any* networkHandle)
 BOOL NETWORK_IS_GAMER_MUTED_BY_ME(Any* networkHandle)
 BOOL NETWORK_AM_I_MUTED_BY_GAMER(Any* networkHandle)
 BOOL NETWORK_IS_GAMER_BLOCKED_BY_ME(Any* networkHandle)
 BOOL NETWORK_AM_I_BLOCKED_BY_GAMER(Any* networkHandle)
 BOOL NETWORK_CAN_VIEW_GAMER_USER_CONTENT(Any* networkHandle)
 BOOL NETWORK_HAS_VIEW_GAMER_USER_CONTENT_RESULT(Any* networkHandle)
 BOOL NETWORK_CAN_PLAY_MULTIPLAYER_WITH_GAMER(Any* networkHandle)
 BOOL NETWORK_CAN_GAMER_PLAY_MULTIPLAYER_WITH_ME(Any* networkHandle)
 BOOL NETWORK_IS_PLAYER_TALKING(Player player)
 BOOL NETWORK_PLAYER_HAS_HEADSET(Player player)
 BOOL NETWORK_IS_PLAYER_MUTED_BY_ME(Player player)
 BOOL NETWORK_AM_I_MUTED_BY_PLAYER(Player player)
 BOOL NETWORK_IS_PLAYER_BLOCKED_BY_ME(Player player)
 BOOL NETWORK_AM_I_BLOCKED_BY_PLAYER(Player player)
 float NETWORK_GET_PLAYER_LOUDNESS(Player player)
 void NETWORK_SET_TALKER_PROXIMITY(float value)
 float NETWORK_GET_TALKER_PROXIMITY()
 void NETWORK_SET_VOICE_ACTIVE(BOOL toggle)
 void _0xCFEB46DCD7D8D5EB(BOOL p0)
 void NETWORK_OVERRIDE_TRANSITION_CHAT(BOOL p0)
 void NETWORK_SET_TEAM_ONLY_CHAT(BOOL toggle)
 void _0x265559DA40B3F327(Any p0)
 Any _0x4348BFDA56023A2F(Any p0, Any p1)
 void NETWORK_OVERRIDE_TEAM_RESTRICTIONS(int team, BOOL toggle)
 void NETWORK_SET_OVERRIDE_SPECTATOR_MODE(BOOL toggle)
 void _0x3C5C1E2C2FF814B1(BOOL toggle)
 void _0x9D7AFCBF21C51712(BOOL toggle)
 void NETWORK_SET_NO_SPECTATOR_CHAT(BOOL toggle)
 void _0x6A5D89D7769A40D8(BOOL toggle)
 void NETWORK_OVERRIDE_CHAT_RESTRICTIONS(Player player, BOOL toggle)
 void NETWORK_OVERRIDE_SEND_RESTRICTIONS(Player player, BOOL toggle)
 void NETWORK_OVERRIDE_SEND_RESTRICTIONS_ALL(BOOL toggle)
 void NETWORK_OVERRIDE_RECEIVE_RESTRICTIONS(Player player, BOOL toggle)
 void NETWORK_OVERRIDE_RECEIVE_RESTRICTIONS_ALL(BOOL toggle)
 void NETWORK_SET_VOICE_CHANNEL(int channel)
 void NETWORK_CLEAR_VOICE_CHANNEL()
 void NETWORK_APPLY_VOICE_PROXIMITY_OVERRIDE(float x, float y, float z)
 void NETWORK_CLEAR_VOICE_PROXIMITY_OVERRIDE()
 void _0x5E3AA4CA2B6FB0EE(Any p0)
 void _0xCA575C391FEA25CC(Any p0)
 void _0xADB57E5B663CCA8B(Player p0, float* p1, float* p2)
 void _0x8EF52ACAECC51D9C(BOOL toggle)
 BOOL _NETWORK_IS_TEXT_CHAT_ACTIVE()
 void SHUTDOWN_AND_LAUNCH_SINGLE_PLAYER_GAME()
 BOOL _SHUTDOWN_AND_LOAD_MOST_RECENT_SAVE()
 void NETWORK_SET_FRIENDLY_FIRE_OPTION(BOOL toggle)
 void NETWORK_SET_RICH_PRESENCE(Any p0, Any p1, Any p2, Any p3)
 void NETWORK_SET_RICH_PRESENCE_STRING(Any p0, const char* string)
 int NETWORK_GET_TIMEOUT_TIME()
 void _NETWORK_RESPAWN_COORDS(Player player, float x, float y, float z, BOOL p4, BOOL p5)
 void _0xBF22E0F32968E967(Player player, BOOL p1)
 void REMOVE_ALL_STICKY_BOMBS_FROM_ENTITY(Entity entity, Ped ped)
 Any _0x2E4C123D1C8A710E(Any p0, Any p1, Any p2, Any p3, Any p4, Any p5, Any p6)
 BOOL NETWORK_CLAN_SERVICE_IS_VALID()
 BOOL NETWORK_CLAN_PLAYER_IS_ACTIVE(int* networkHandle)
 BOOL NETWORK_CLAN_PLAYER_GET_DESC(int* clanDesc, int bufferSize, int* networkHandle)
 BOOL NETWORK_CLAN_IS_ROCKSTAR_CLAN(int* clanDesc, int bufferSize)
 void NETWORK_CLAN_GET_UI_FORMATTED_TAG(int* clanDesc, int bufferSize, char* formattedTag)
 int NETWORK_CLAN_GET_LOCAL_MEMBERSHIPS_COUNT()
 BOOL NETWORK_CLAN_GET_MEMBERSHIP_DESC(int* memberDesc, int p1)
 BOOL NETWORK_CLAN_DOWNLOAD_MEMBERSHIP(int* networkHandle)
 BOOL NETWORK_CLAN_DOWNLOAD_MEMBERSHIP_PENDING(Any* p0)
 BOOL _NETWORK_IS_CLAN_MEMBERSHIP_FINISHED_DOWNLOADING()
 BOOL NETWORK_CLAN_REMOTE_MEMBERSHIPS_ARE_IN_CACHE(int* p0)
 int NETWORK_CLAN_GET_MEMBERSHIP_COUNT(int* p0)
 BOOL NETWORK_CLAN_GET_MEMBERSHIP_VALID(int* p0, Any p1)
 BOOL NETWORK_CLAN_GET_MEMBERSHIP(int* p0, int* clanMembership, int p2)
 BOOL NETWORK_CLAN_JOIN(int clanDesc)
 BOOL _NETWORK_CLAN_ANIMATION(const char* animDict, const char* animName)
 BOOL _0x2B51EDBEFC301339(int p0, const char* p1)
 Any _0xC32EA7A2F6CA7557()
 BOOL NETWORK_CLAN_GET_EMBLEM_TXD_NAME(Any* netHandle, char* txdName)
 BOOL NETWORK_CLAN_REQUEST_EMBLEM(Any p0)
 BOOL NETWORK_CLAN_IS_EMBLEM_READY(Any p0, Any* p1)
 void NETWORK_CLAN_RELEASE_EMBLEM(Any p0)
 Any NETWORK_GET_PRIMARY_CLAN_DATA_CLEAR()
 void NETWORK_GET_PRIMARY_CLAN_DATA_CANCEL()
 BOOL NETWORK_GET_PRIMARY_CLAN_DATA_START(Any* p0, Any p1)
 Any NETWORK_GET_PRIMARY_CLAN_DATA_PENDING()
 Any NETWORK_GET_PRIMARY_CLAN_DATA_SUCCESS()
 BOOL NETWORK_GET_PRIMARY_CLAN_DATA_NEW(Any* p0, Any* p1)
 void SET_NETWORK_ID_CAN_MIGRATE(int netId, BOOL toggle)
 void SET_NETWORK_ID_EXISTS_ON_ALL_MACHINES(int netId, BOOL toggle)
 void _SET_NETWORK_ID_SYNC_TO_PLAYER(int netId, Player player, BOOL toggle)
 void NETWORK_SET_ENTITY_CAN_BLEND(Entity entity, BOOL toggle)
 void _0x0379DAF89BA09AA5(Any p0, Any p1)
 void _NETWORK_SET_ENTITY_INVISIBLE_TO_NETWORK(Entity entity, BOOL toggle)
 void SET_NETWORK_ID_VISIBLE_IN_CUTSCENE(int netId, BOOL p1, BOOL p2)
 void _0x32EBD154CB6B8B99(Any p0, Any p1, Any p2)
 void _0x6540EDC4F45DA089(Player player)
 void SET_NETWORK_CUTSCENE_ENTITIES(BOOL toggle)
 void _0x3FA36981311FA4FF(int netId, BOOL state)
 BOOL IS_NETWORK_ID_OWNED_BY_PARTICIPANT(int netId)
 void SET_LOCAL_PLAYER_VISIBLE_IN_CUTSCENE(BOOL p0, BOOL p1)
 void SET_LOCAL_PLAYER_INVISIBLE_LOCALLY(BOOL p0)
 void SET_LOCAL_PLAYER_VISIBLE_LOCALLY(BOOL p0)
 void SET_PLAYER_INVISIBLE_LOCALLY(Player player, BOOL toggle)
 void SET_PLAYER_VISIBLE_LOCALLY(Player player, BOOL toggle)
 void FADE_OUT_LOCAL_PLAYER(BOOL p0)
 void NETWORK_FADE_OUT_ENTITY(Entity entity, BOOL normal, BOOL slow)
 void NETWORK_FADE_IN_ENTITY(Entity entity, BOOL state, Any p2)
 BOOL NETWORK_IS_PLAYER_FADING(Player player)
 BOOL NETWORK_IS_ENTITY_FADING(Entity entity)
 BOOL IS_PLAYER_IN_CUTSCENE(Player player)
 void SET_ENTITY_VISIBLE_IN_CUTSCENE(Any p0, BOOL p1, BOOL p2)
 void SET_ENTITY_LOCALLY_INVISIBLE(Entity entity)
 void SET_ENTITY_LOCALLY_VISIBLE(Entity entity)
 BOOL IS_DAMAGE_TRACKER_ACTIVE_ON_NETWORK_ID(int netID)
 void ACTIVATE_DAMAGE_TRACKER_ON_NETWORK_ID(int netID, BOOL toggle)
 BOOL _IS_DAMAGE_TRACKER_ACTIVE_ON_PLAYER(Player player)
 void _ACTIVATE_DAMAGE_TRACKER_ON_PLAYER(Player player, BOOL toggle)
 BOOL IS_SPHERE_VISIBLE_TO_ANOTHER_MACHINE(float p0, float p1, float p2, float p3)
 BOOL IS_SPHERE_VISIBLE_TO_PLAYER(Any p0, float p1, float p2, float p3, float p4)
 void RESERVE_NETWORK_MISSION_OBJECTS(int amount)
 void RESERVE_NETWORK_MISSION_PEDS(int amount)
 void RESERVE_NETWORK_MISSION_VEHICLES(int amount)
 void _RESERVE_NETWORK_LOCAL_OBJECTS(Any p0)
 void _RESERVE_NETWORK_LOCAL_PEDS(Any p0)
 void _RESERVE_NETWORK_LOCAL_VEHICLES(Any p0)
 BOOL CAN_REGISTER_MISSION_OBJECTS(int amount)
 BOOL CAN_REGISTER_MISSION_PEDS(int amount)
 BOOL CAN_REGISTER_MISSION_VEHICLES(int amount)
 BOOL _CAN_REGISTER_MISSION_PICKUPS(int amount)
 Any _0xE16AA70CE9BEEDC3(Any p0)
 BOOL CAN_REGISTER_MISSION_ENTITIES(int ped_amt, int vehicle_amt, int object_amt, int pickup_amt)
 int GET_NUM_RESERVED_MISSION_OBJECTS(BOOL p0, Any p1)
 int GET_NUM_RESERVED_MISSION_PEDS(BOOL p0, Any p1)
 int GET_NUM_RESERVED_MISSION_VEHICLES(BOOL p0, Any p1)
 int GET_NUM_CREATED_MISSION_OBJECTS(BOOL p0)
 int GET_NUM_CREATED_MISSION_PEDS(BOOL p0)
 int GET_NUM_CREATED_MISSION_VEHICLES(BOOL p0)
 void _0xE42D626EEC94E5D9(Any p0, Any p1, Any p2, Any p3, Any p4, Any p5, Any p6)
 int GET_MAX_NUM_NETWORK_OBJECTS()
 int GET_MAX_NUM_NETWORK_PEDS()
 int GET_MAX_NUM_NETWORK_VEHICLES()
 int GET_MAX_NUM_NETWORK_PICKUPS()
 void _0xBA7F0B77D80A4EB7(Any p0, Any p1)
 int GET_NETWORK_TIME()
 int GET_NETWORK_TIME_ACCURATE()
 BOOL HAS_NETWORK_TIME_STARTED()
 int GET_TIME_OFFSET(int timeA, int timeB)
 BOOL IS_TIME_LESS_THAN(int timeA, int timeB)
 BOOL IS_TIME_MORE_THAN(int timeA, int timeB)
 BOOL IS_TIME_EQUAL_TO(int timeA, int timeB)
 int GET_TIME_DIFFERENCE(int timeA, int timeB)
 const char* GET_TIME_AS_STRING(int time)
 Any _0xF12E6CD06C73D69E()
 int GET_CLOUD_TIME_AS_INT()
 void _GET_DATE_AND_TIME_FROM_UNIX_EPOCH(int unixEpoch, Any* timeStructure)
 void NETWORK_SET_IN_SPECTATOR_MODE(BOOL toggle, Ped playerPed)
 void NETWORK_SET_IN_SPECTATOR_MODE_EXTENDED(BOOL toggle, Ped playerPed, BOOL p2)
 void NETWORK_SET_IN_FREE_CAM_MODE(BOOL toggle)
 void _0x5C707A667DF8B9FA(BOOL toggle, Player player)
 BOOL NETWORK_IS_IN_SPECTATOR_MODE()
 void NETWORK_SET_IN_MP_CUTSCENE(BOOL p0, BOOL p1)
 BOOL NETWORK_IS_IN_MP_CUTSCENE()
 BOOL NETWORK_IS_PLAYER_IN_MP_CUTSCENE(Player player)
 void _0xFAC18E7356BD3210()
 void SET_NETWORK_VEHICLE_RESPOT_TIMER(int netId, int time, Any p2, Any p3)
 void SET_NETWORK_VEHICLE_AS_GHOST(Vehicle vehicle, BOOL toggle)
 void _0xA2A707979FE754DC(Any p0, Any p1)
 void _0x838DA0936A24ED4D(Any p0, Any p1)
 void USE_PLAYER_COLOUR_INSTEAD_OF_TEAM_COLOUR(BOOL toggle, BOOL p1)
 BOOL _0x21D04D7BC538C146(Entity entity)
 void _0x13F1FCB111B820B0(BOOL p0)
 void _0xA7C511FA1C5BDA38(Any p0, Any p1)
 void _0x658500AE6D723A7E(Any p0)
 void _0x17330EBF2F2124A8()
 void _0x4BA166079D658ED4(Any p0, Any p1)
 void _0xD7B6C73CAD419BCF(BOOL p0)
 BOOL _0x7EF7649B64D7FF10(Entity entity)
 void _0x77758139EC9B66C7(BOOL p0)
 int NETWORK_CREATE_SYNCHRONISED_SCENE(float x, float y, float z, float xRot, float yRot, float zRot, int p6, BOOL p7, BOOL p8, float p9, float p10, float p11)
 void NETWORK_ADD_PED_TO_SYNCHRONISED_SCENE(Ped ped, int netScene, const char* animDict, const char* animnName, float speed, float speedMultiplier, int duration, int flag, float playbackRate, Any p9)
 void _0xA5EAFE473E45C442(Any p0, Any p1, Any p2, Any p3, Any p4, Any p5, Any p6, Any p7, Any p8, Any p9)
 void NETWORK_ADD_ENTITY_TO_SYNCHRONISED_SCENE(Entity entity, int netScene, const char* animDict, const char* animName, float speed, float speedMulitiplier, int flag)
 void _0x45F35C0EDC33B03B(int netScene, Hash modelHash, float x, float y, float z, float p5, const char* p6, float p7, float p8, int flags)
 void _NETWORK_FORCE_LOCAL_USE_OF_SYNCED_SCENE_CAMERA(int netScene, const char* animDict, const char* animName)
 void NETWORK_ATTACH_SYNCHRONISED_SCENE_TO_ENTITY(int netScene, Entity entity, int bone)
 void NETWORK_START_SYNCHRONISED_SCENE(int netScene)
 void NETWORK_STOP_SYNCHRONISED_SCENE(int netScene)
 int _NETWORK_CONVERT_SYNCHRONISED_SCENE_TO_SYNCHRONIZED_SCENE(int netScene)
 void _0xC9B43A33D09CADA7(Any p0)
 void _0x144DA052257AE7D8(Any p0)
 Any _0xFB1F9381E80FA13F(int p0, Any p1)
 BOOL NETWORK_START_RESPAWN_SEARCH_FOR_PLAYER(Player player, float p1, float p2, float p3, float p4, float p5, float p6, float p7, int flags)
 BOOL NETWORK_START_RESPAWN_SEARCH_IN_ANGLED_AREA_FOR_PLAYER(Player player, float p1, float p2, float p3, float p4, float p5, float p6, float p7, float p8, float p9, float p10, int flags)
 Any NETWORK_QUERY_RESPAWN_RESULTS(Any* p0)
 void NETWORK_CANCEL_RESPAWN_SEARCH()
 void NETWORK_GET_RESPAWN_RESULT(int randomInt, Vector3* coordinates, float* heading)
 Any NETWORK_GET_RESPAWN_RESULT_FLAGS(Any p0)
 void NETWORK_START_SOLO_TUTORIAL_SESSION()
 void _0xFB680D403909DC70(Any p0, Any p1)
 void NETWORK_END_TUTORIAL_SESSION()
 BOOL NETWORK_IS_IN_TUTORIAL_SESSION()
 BOOL _0xB37E4E6A2388CA7B()
 BOOL NETWORK_IS_TUTORIAL_SESSION_CHANGE_PENDING()
 int NETWORK_GET_PLAYER_TUTORIAL_SESSION_INSTANCE(Player player)
 BOOL _NETWORK_IS_PLAYER_EQUAL_TO_INDEX(Player player, int index)
 void NETWORK_CONCEAL_PLAYER(Player player, BOOL toggle, BOOL p2)
 BOOL NETWORK_IS_PLAYER_CONCEALED(Player player)
 void _NETWORK_CONCEAL_ENTITY(Entity entity, BOOL toggle)
 BOOL _NETWORK_IS_ENTITY_CONCEALED(Entity entity)
 void NETWORK_OVERRIDE_CLOCK_TIME(int Hours, int Minutes, int Seconds)
 void NETWORK_CLEAR_CLOCK_TIME_OVERRIDE()
 BOOL NETWORK_IS_CLOCK_TIME_OVERRIDDEN()
 Any NETWORK_ADD_ENTITY_AREA(float p0, float p1, float p2, float p3, float p4, float p5)
 Any NETWORK_ADD_ENTITY_ANGLED_AREA(float p0, float p1, float p2, float p3, float p4, float p5, float p6)
 Any NETWORK_ADD_ENTITY_DISPLAYED_BOUNDARIES(float p0, float p1, float p2, float p3, float p4, float p5)
 Any _0x2B1C623823DB0D9D(Any p0, Any p1, Any p2, Any p3, Any p4, Any p5, Any p6)
 BOOL NETWORK_REMOVE_ENTITY_AREA(Any p0)
 BOOL NETWORK_ENTITY_AREA_DOES_EXIST(Any p0)
 BOOL _0x4DF7CFFF471A7FB1(Any p0)
 BOOL NETWORK_ENTITY_AREA_IS_OCCUPIED(Any p0)
 void _NETWORK_SET_NETWORK_ID_DYNAMIC(int netID, BOOL toggle)
 void _0xA6FCECCF4721D679(Any p0)
 void _0x95BAF97C82464629(Any p0, Any p1)
 BOOL NETWORK_REQUEST_CLOUD_BACKGROUND_SCRIPTS()
 BOOL _NETWORK_IS_CLOUD_BACKGROUND_SCRIPTS_REQUEST_PENDING()
 void NETWORK_REQUEST_CLOUD_TUNABLES()
 BOOL NETWORK_IS_TUNABLE_CLOUD_REQUEST_PENDING()
 int NETWORK_GET_TUNABLE_CLOUD_CRC()
 BOOL NETWORK_DOES_TUNABLE_EXIST(const char* tunableContext, const char* tunableName)
 BOOL NETWORK_ACCESS_TUNABLE_INT(const char* tunableContext, const char* tunableName, int* value)
 BOOL NETWORK_ACCESS_TUNABLE_FLOAT(const char* tunableContext, const char* tunableName, float* value)
 BOOL NETWORK_ACCESS_TUNABLE_BOOL(const char* tunableContext, const char* tunableName)
 BOOL NETWORK_DOES_TUNABLE_EXIST_HASH(Hash tunableContext, Hash tunableName)
 BOOL _NETWORK_ALLOCATE_TUNABLES_REGISTRATION_DATA_MAP()
 BOOL NETWORK_ACCESS_TUNABLE_INT_HASH(Hash tunableContext, Hash tunableName, int* value)
 BOOL _NETWORK_REGISTER_TUNABLE_INT_HASH(Hash contextHash, Hash nameHash, int* value)
 BOOL NETWORK_ACCESS_TUNABLE_FLOAT_HASH(Hash tunableContext, Hash tunableName, float* value)
 BOOL _NETWORK_REGISTER_TUNABLE_FLOAT_HASH(Hash contextHash, Hash nameHash, float* value)
 BOOL NETWORK_ACCESS_TUNABLE_BOOL_HASH(Hash tunableContext, Hash tunableName)
 BOOL _NETWORK_REGISTER_TUNABLE_BOOL_HASH(Hash contextHash, Hash nameHash, BOOL* value)
 BOOL NETWORK_TRY_ACCESS_TUNABLE_BOOL_HASH(Hash tunableContext, Hash tunableName, BOOL defaultValue)
 int NETWORK_GET_CONTENT_MODIFIER_LIST_ID(Hash contentHash)
 int _0x7DB53B37A2F211A0()
 void NETWORK_RESET_BODY_TRACKER()
 int _NETWORK_GET_NUM_BODY_TRACKERS()
 BOOL _0x2E0BF682CC778D49(Any p0)
 BOOL _0x0EDE326D47CD0F3E(Ped ped, Player player)
 void _NETWORK_SET_VEHICLE_WHEELS_DESTRUCTIBLE(Any p0, Any p1)
 void _0x38B7C51AB1EDC7D8(Entity entity, BOOL toggle)
 void NETWORK_EXPLODE_VEHICLE(Vehicle vehicle, BOOL isAudible, BOOL isInvisible, BOOL p3)
 void _0x2A5E0621DD815A9A(Any p0, Any p1, Any p2, Any p3)
 void _0xCD71A4ECAB22709E(Entity entity)
 void NETWORK_OVERRIDE_COORDS_AND_HEADING(Ped ped, float x, float y, float z, float heading)
 void _0xE6717E652B8C8D8A(Any p0, Any p1)
 void NETWORK_DISABLE_PROXIMITY_MIGRATION(int netID)
 void NETWORK_SET_PROPERTY_ID(int id)
 void NETWORK_CLEAR_PROPERTY_ID()
 void _0x367EF5E2F439B4C6(int p0)
 void _0x94538037EE44F5CF(BOOL p0)
 void NETWORK_CACHE_LOCAL_PLAYER_HEAD_BLEND_DATA()
 BOOL NETWORK_HAS_CACHED_PLAYER_HEAD_BLEND_DATA(Player player)
 BOOL NETWORK_APPLY_CACHED_PLAYER_HEAD_BLEND_DATA(Ped ped, Player player)
 int GET_NUM_COMMERCE_ITEMS()
 BOOL IS_COMMERCE_DATA_VALID()
 void _0xB606E6CC59664972(Any p0)
 BOOL _0x1D4DC17C38FEAFF0()
 const char* GET_COMMERCE_ITEM_ID(int index)
 const char* GET_COMMERCE_ITEM_NAME(int index)
 const char* GET_COMMERCE_PRODUCT_PRICE(int index)
 int GET_COMMERCE_ITEM_NUM_CATS(int index)
 const char* GET_COMMERCE_ITEM_CAT(int index, int index2)
 void _0x58C21165F6545892(const char* p0, const char* p1, int p2)
 BOOL IS_COMMERCE_STORE_OPEN()
 void SET_STORE_ENABLED(BOOL toggle)
 BOOL REQUEST_COMMERCE_ITEM_IMAGE(int index)
 void RELEASE_ALL_COMMERCE_ITEM_IMAGES()
 Any _0x722F5D28B61C5EA8(Any p0)
 BOOL IS_STORE_AVAILABLE_TO_USER()
 void _0x265635150FB0D82E()
 void _0x444C4525ECE0A4B9()
 BOOL _0x59328EB08C5CEB2B()
 void _0xFAE628F1E9ADB239(Hash p0, int p1, Hash p2)
 int _0x754615490A029508()
 int _0x155467ACA0F55705()
 int CLOUD_DELETE_MEMBER_FILE(const char* p0)
 BOOL CLOUD_HAS_REQUEST_COMPLETED(Any p0)
 BOOL _0x3A3D5568AF297CD5(Any p0)
 void CLOUD_CHECK_AVAILABILITY()
 Any _0xC7ABAC5DE675EE3B()
 Any CLOUD_GET_AVAILABILITY_CHECK_RESULT()
 Any _0x8B0C2964BA471961()
 Any _0x88B588B41FF7868E()
 Any _0x67FC09BC554A75E5()
 void _0x966DD84FB6A46017()
 BOOL UGC_COPY_CONTENT(Any* p0, Any* p1)
 Any _0x9FEDF86898F100E9()
 BOOL UGC_HAS_CREATE_FINISHED()
 Any _0x24E4E51FC16305F9()
 Any UGC_GET_CREATE_RESULT()
 Any UGC_GET_CREATE_CONTENT_ID()
 void UGC_CLEAR_CREATE_RESULT()
 BOOL UGC_QUERY_MY_CONTENT(Any p0, Any p1, Any* p2, Any p3, Any p4, Any p5)
 BOOL _0x692D58DF40657E8C(Any p0, Any p1, Any p2, Any* p3, Any p4, BOOL p5)
 BOOL UGC_QUERY_BY_CONTENT_ID(const char* contentId, BOOL latestVersion, const char* contentTypeName)
 BOOL UGC_QUERY_BY_CONTENT_IDS(Any* data, int count, BOOL latestVersion, const char* contentTypeName)
 BOOL _UGC_QUERY_RECENTLY_CREATED_CONTENT(int offset, int count, const char* contentTypeName, int p3)
 BOOL UGC_GET_BOOKMARKED_CONTENT(Any p0, Any p1, Any* p2, Any* p3)
 BOOL UGC_GET_MY_CONTENT(Any p0, Any p1, Any* p2, Any* p3)
 BOOL UGC_GET_FRIEND_CONTENT(Any p0, Any p1, Any* p2, Any* p3)
 BOOL UGC_GET_CREW_CONTENT(Any p0, Any p1, Any p2, Any* p3, Any* p4)
 BOOL UGC_GET_GET_BY_CATEGORY(Any p0, Any p1, Any p2, Any* p3, Any* p4)
 BOOL SET_BALANCE_ADD_MACHINE(const char* contentId, const char* contentTypeName)
 BOOL SET_BALANCE_ADD_MACHINES(Any* data, int dataCount, const char* contentTypeName)
 BOOL _0xA7862BC5ED1DFD7E(Any p0, Any p1, Any* p2, Any* p3)
 BOOL _0x97A770BEEF227E2B(Any p0, Any p1, Any* p2, Any* p3)
 BOOL _0x5324A0E3E4CE3570(Any p0, Any p1, Any* p2, Any* p3)
 void UGC_CANCEL_QUERY()
 BOOL UGC_IS_GETTING()
 BOOL UGC_HAS_GET_FINISHED()
 Any _0x941E5306BCD7C2C7()
 Any _0xC87E740D9F3872CC()
 Any UGC_GET_QUERY_RESULT()
 Any UGC_GET_CONTENT_NUM()
 Any UGC_GET_CONTENT_TOTAL()
 Hash UGC_GET_CONTENT_HASH()
 void UGC_CLEAR_QUERY_RESULTS()
 const char* UGC_GET_CONTENT_USER_ID(int p0)
 BOOL _0x584770794D758C18(Any p0, Any* p1)
 BOOL _0x8C8D2739BA44AF0F(Any p0)
 Any UGC_GET_CONTENT_USER_NAME(Any p0)
 BOOL _0xAEAB987727C5A8A4(Any p0)
 int _GET_CONTENT_CATEGORY(int p0)
 const char* UGC_GET_CONTENT_ID(int p0)
 const char* UGC_GET_ROOT_CONTENT_ID(int p0)
 Any UGC_GET_CONTENT_NAME(Any p0)
 int UGC_GET_CONTENT_DESCRIPTION_HASH(Any p0)
 const char* UGC_GET_CONTENT_PATH(int p0, int p1)
 void UGC_GET_CONTENT_UPDATED_DATE(Any p0, Any* p1)
 Any UGC_GET_CONTENT_FILE_VERSION(Any p0, Any p1)
 BOOL _0x1D610EB0FEA716D9(int p0)
 BOOL _0x7FCC39C46C3C03BD(int p0)
 Any UGC_GET_CONTENT_LANGUAGE(Any p0)
 BOOL UGC_GET_CONTENT_IS_PUBLISHED(Any p0)
 BOOL UGC_GET_CONTENT_IS_VERIFIED(Any p0)
 Any UGC_GET_CONTENT_RATING(Any p0, Any p1)
 Any UGC_GET_CONTENT_RATING_COUNT(Any p0, Any p1)
 Any UGC_GET_CONTENT_RATING_POSITIVE_COUNT(Any p0, Any p1)
 Any UGC_GET_CONTENT_RATING_NEGATIVE_COUNT(Any p0, Any p1)
 BOOL UGC_GET_CONTENT_HAS_PLAYER_RECORD(Any p0)
 BOOL UGC_GET_CONTENT_HAS_PLAYER_BOOKMARKED(Any p0)
 int UGC_REQUEST_CONTENT_DATA_FROM_INDEX(int p0, int p1)
 int UGC_REQUEST_CONTENT_DATA_FROM_PARAMS(const char* contentTypeName, const char* contentId, int p2, int p3, int p4)
 int UGC_REQUEST_CACHED_DESCRIPTION(int p0)
 BOOL _0x2D5DC831176D0114(Any p0)
 BOOL _0xEBFA8D50ADDC54C4(Any p0)
 BOOL _0x162C23CA83ED0A62(Any p0)
 Any UGC_GET_CACHED_DESCRIPTION(Any p0, Any p1)
 BOOL _0x5A34CD9C3C5BEC44(Any p0)
 void _0x68103E2247887242()
 BOOL UGC_PUBLISH(const char* contentId, const char* baseContentId, const char* contentTypeName)
 BOOL UGC_SET_BOOKMARKED(const char* contentId, BOOL bookmarked, const char* contentTypeName)
 BOOL UGC_SET_DELETED(Any* p0, BOOL p1, Any* p2)
 Any _0x45E816772E93A9DB()
 BOOL UGC_HAS_MODIFY_FINISHED()
 Any _0x793FF272D5B365F4()
 Any UGC_GET_MODIFY_RESULT()
 void UGC_CLEAR_MODIFY_RESULT()
 BOOL _0xB746D20B17F2A229(Any* p0, Any* p1)
 Any _0x63B406D7884BFA95()
 Any _0x4D02279C83BE69FE()
 Any UGC_GET_CREATOR_NUM()
 BOOL UGC_POLICIES_MAKE_PRIVATE(Any p0)
 void UGC_CLEAR_OFFLINE_QUERY()
 void _0xF98DDE0A8ED09323(BOOL p0)
 void _0xFD75DABC0957BF33(BOOL p0)
 BOOL UGC_IS_LANGUAGE_SUPPORTED(Any p0)
 BOOL _FACEBOOK_SET_HEIST_COMPLETE(const char* heistName, int cashEarned, int xpEarned)
 BOOL _FACEBOOK_SET_CREATE_CHARACTER_COMPLETE()
 BOOL _FACEBOOK_SET_MILESTONE_COMPLETE(int milestoneId)
 BOOL _FACEBOOK_IS_SENDING_DATA()
 BOOL _FACEBOOK_DO_UNK_CHECK()
 BOOL _FACEBOOK_IS_AVAILABLE()
 int TEXTURE_DOWNLOAD_REQUEST(int* PlayerHandle, const char* FilePath, const char* Name, BOOL p3)
 Any _0x0B203B4AFDE53A4F(Any* p0, Any* p1, BOOL p2)
 Any UGC_TEXTURE_DOWNLOAD_REQUEST(Any* p0, Any p1, Any p2, Any p3, Any* p4, BOOL p5)
 void TEXTURE_DOWNLOAD_RELEASE(int p0)
 BOOL TEXTURE_DOWNLOAD_HAS_FAILED(int p0)
 const char* TEXTURE_DOWNLOAD_GET_NAME(int p0)
 int _GET_STATUS_OF_TEXTURE_DOWNLOAD(int p0)
 BOOL _0x60EDD13EB3AC1FF3()
 BOOL _NETWORK_SHOULD_SHOW_CONNECTIVITY_TROUBLESHOOTING()
 BOOL NETWORK_IS_CABLE_CONNECTED()
 BOOL _NETWORK_GET_ROS_PRIVILEGE_9()
 BOOL _NETWORK_GET_ROS_PRIVILEGE_10()
 BOOL _NETWORK_HAS_PLAYER_BEEN_BANNED()
 BOOL _NETWORK_HAVE_SOCIAL_CLUB_PRIVILEGE()
 BOOL _NETWORK_GET_ROS_PRIVILEGE_3()
 BOOL _NETWORK_GET_ROS_PRIVILEGE_4()
 BOOL NETWORK_HAS_ROS_PRIVILEGE(int index)
 BOOL NETWORK_HAS_ROS_PRIVILEGE_END_DATE(int privilege, int* type, Any* endData)
 BOOL _NETWORK_GET_ROS_PRIVILEGE_24()
 BOOL _NETWORK_GET_ROS_PRIVILEGE_25()
 Any _0x36391F397731595D(Any p0)
 Any _0xDEB2B99A1AF1A2A6(Any p0)
 void _0x9465E683B12D3F6B()
 void _0xCA59CCAE5D01E4CE()
 BOOL _NETWORK_HAS_GAME_BEEN_ALTERED()
 void _NETWORK_UPDATE_PLAYER_SCARS()
 void _0xC505036A35AFD01B(BOOL toggle)
 void _0x267C78C60E806B9A(Any p0, BOOL p1)
 void _0x6BFF5F84102DF80A(Player player)
 void _0x5C497525F803486B()
 Any _0x6FB7BB3607D27FA2()
 void _0x45A83257ED02D9BC()
 BOOL _0x16D3D49902F697BB(Player player)
 float _0xD414BE129BB81B32(Player player)
 float _0x0E3A041ED6AC2B45(Player player)
 float _0x350C23949E43686C(Player player)
 int _NETWORK_GET_NUM_UNACKED_FOR_PLAYER(Player player)
 int _0x3765C3A3E8192E10(Player player)
 int _NETWORK_GET_OLDEST_RESEND_COUNT_FOR_PLAYER(Player player)
 void _NETWORK_REPORT_MYSELF()
 Vector3 _0x64D779659BC37B19(Entity entity)
 Vector3 _NETWORK_GET_PLAYER_COORDS(Player player)
 Vector3 _0x33DE49EDF4DDE77A(Entity entity)
 Vector3 _0xAA5FAFCD2C5F5E47(Entity entity)
 Any _0xAEDF1BC1C133D6E3()
 Any _0x2555CF7DA5473794()
 Any _0x6FD992C4A1C1B986()
 int _0xDB663CC9FF3407A9(Player player)
}
namespace OBJECT
{
 Object CREATE_OBJECT(Object modelHash, float x, float y, float z, BOOL isNetwork, BOOL thisScriptCheck, BOOL dynamic)
 Object CREATE_OBJECT_NO_OFFSET(Hash modelHash, float x, float y, float z, BOOL isNetwork, BOOL thisScriptCheck, BOOL dynamic)
 void DELETE_OBJECT(Object* object)
 BOOL PLACE_OBJECT_ON_GROUND_PROPERLY(Object object)
 BOOL _PLACE_OBJECT_ON_GROUND_PROPERLY_2(Object object)
 BOOL _0xAFE24E4D29249E4A(Object object, float p1, float p2, BOOL p3)
 BOOL SLIDE_OBJECT(Object object, float toX, float toY, float toZ, float speedX, float speedY, float speedZ, BOOL collision)
 void SET_OBJECT_TARGETTABLE(Object object, BOOL targettable)
 void _SET_OBJECT_SOMETHING(Object object, BOOL p1)
 Object GET_CLOSEST_OBJECT_OF_TYPE(float x, float y, float z, float radius, Hash modelHash, BOOL isMission, BOOL p6, BOOL p7)
 BOOL HAS_OBJECT_BEEN_BROKEN(Object object, Any p1)
 BOOL HAS_CLOSEST_OBJECT_OF_TYPE_BEEN_BROKEN(float p0, float p1, float p2, float p3, Hash modelHash, Any p5)
 BOOL HAS_CLOSEST_OBJECT_OF_TYPE_BEEN_COMPLETELY_DESTROYED(float p0, float p1, float p2, float p3, Hash modelHash, BOOL p5)
 Any _0x2542269291C6AC84(Any p0)
 Vector3 _GET_OBJECT_OFFSET_FROM_COORDS(float xPos, float yPos, float zPos, float heading, float xOffset, float yOffset, float zOffset)
 Any GET_COORDS_AND_ROTATION_OF_CLOSEST_OBJECT_OF_TYPE(Object object, float radius, Hash modelHash, float x, float y, float z, Vector3* p6, int p7)
 void SET_STATE_OF_CLOSEST_DOOR_OF_TYPE(Hash type, float x, float y, float z, BOOL locked, float heading, BOOL p6)
 void GET_STATE_OF_CLOSEST_DOOR_OF_TYPE(Hash type, float x, float y, float z, BOOL* locked, float* heading)
 void _DOOR_CONTROL(Hash doorHash, float x, float y, float z, BOOL locked, float xRotMult, float yRotMult, float zRotMult)
 void ADD_DOOR_TO_SYSTEM(Hash doorHash, Hash modelHash, float x, float y, float z, BOOL p5, BOOL p6, BOOL p7)
 void REMOVE_DOOR_FROM_SYSTEM(Hash doorHash)
 void DOOR_SYSTEM_SET_DOOR_STATE(Hash doorHash, int limit, BOOL p2, BOOL p3)
 int DOOR_SYSTEM_GET_DOOR_STATE(Hash doorHash)
 int DOOR_SYSTEM_GET_DOOR_PENDING_STATE(Hash doorHash)
 void DOOR_SYSTEM_SET_AUTOMATIC_RATE(Hash doorHash, float p1, BOOL p2, BOOL p3)
 void DOOR_SYSTEM_SET_AUTOMATIC_DISTANCE(Hash doorHash, float heading, BOOL p2, BOOL p3)
 void DOOR_SYSTEM_SET_OPEN_RATIO(Hash doorHash, float ajar, BOOL p2, BOOL p3)
 float DOOR_SYSTEM_GET_OPEN_RATIO(Hash doorHash)
 void DOOR_SYSTEM_SET_SPRING_REMOVED(Hash doorHash, BOOL p1, BOOL p2, BOOL p3)
 void DOOR_SYSTEM_SET_HOLD_OPEN(Hash doorHash, BOOL toggle)
 void _0xA85A21582451E951(Hash doorHash, BOOL p1)
 BOOL IS_DOOR_REGISTERED_WITH_SYSTEM(Hash doorHash)
 BOOL IS_DOOR_CLOSED(Hash doorHash)
 void _0xC7F29CA00F46350E(BOOL p0)
 void _0x701FDA1E82076BA4()
 BOOL DOOR_SYSTEM_GET_IS_PHYSICS_LOADED(Any p0)
 BOOL DOOR_SYSTEM_FIND_EXISTING_DOOR(float p0, float p1, float p2, Any p3, Any* p4)
 BOOL IS_GARAGE_EMPTY(Hash garageHash, BOOL p1, int p2)
 BOOL IS_PLAYER_ENTIRELY_INSIDE_GARAGE(Hash garageHash, Player player, float p2, int p3)
 BOOL IS_PLAYER_PARTIALLY_INSIDE_GARAGE(Hash garageHash, Player player, int p2)
 BOOL ARE_ENTITIES_ENTIRELY_INSIDE_GARAGE(Hash garageHash, BOOL p1, BOOL p2, BOOL p3, Any p4)
 BOOL IS_ANY_ENTITY_ENTIRELY_INSIDE_GARAGE(Hash garageHash, BOOL p1, BOOL p2, BOOL p3, Any p4)
 BOOL IS_OBJECT_ENTIRELY_INSIDE_GARAGE(Hash garageHash, Entity entity, float p2, int p3)
 BOOL IS_OBJECT_PARTIALLY_INSIDE_GARAGE(Hash garageHash, Entity entity, int p2)
 void _CLEAR_GARAGE_AREA(Hash garageHash, BOOL isNetwork)
 void _0x190428512B240692(Hash garageHash, BOOL vehicles, BOOL peds, BOOL objects, BOOL isNetwork)
 void _0x659F9D71F52843F8(Any p0, Any p1)
 void ENABLE_SAVING_IN_GARAGE(Hash garageHash, BOOL toggle)
 void _0x66A49D021870FE88()
 BOOL DOES_OBJECT_OF_TYPE_EXIST_AT_COORDS(float x, float y, float z, float radius, Hash hash, BOOL p5)
 BOOL IS_POINT_IN_ANGLED_AREA(float p0, float p1, float p2, float p3, float p4, float p5, float p6, float p7, float p8, float p9, BOOL p10, BOOL p11)
 void _SET_OBJECT_CAN_CLIMB_ON(Object object, BOOL toggle)
 void SET_OBJECT_PHYSICS_PARAMS(Object object, float weight, float p2, float p3, float p4, float p5, float gravity, float p7, float p8, float p9, float p10, float buoyancy)
 float GET_OBJECT_FRAGMENT_DAMAGE_HEALTH(Any p0, BOOL p1)
 void SET_ACTIVATE_OBJECT_PHYSICS_AS_SOON_AS_IT_IS_UNFROZEN(Object object, BOOL toggle)
 BOOL IS_ANY_OBJECT_NEAR_POINT(float x, float y, float z, float range, BOOL p4)
 BOOL IS_OBJECT_NEAR_POINT(Hash objectHash, float x, float y, float z, float range)
 void REMOVE_OBJECT_HIGH_DETAIL_MODEL(Object object)
 void _0xE7E4C198B0185900(Object p0, Any p1, BOOL p2)
 void _0xE05F6AEEFEB0BB02(Any p0, Any p1, Any p2)
 void _0xF9C1681347C8BD15(Object object)
 void TRACK_OBJECT_VISIBILITY(Object object)
 BOOL IS_OBJECT_VISIBLE(Object object)
 void _0xC6033D32241F6FB5(Object object, BOOL toggle)
 void _0xEB6F1A9B5510A5D2(Any p0, BOOL p1)
 void _SET_UNK_GLOBAL_BOOL_RELATED_TO_DAMAGE(BOOL value)
 void _SET_CREATE_WEAPON_OBJECT_LIGHT_SOURCE(Any p0, BOOL p1)
 Object GET_RAYFIRE_MAP_OBJECT(float x, float y, float z, float radius, const char* name)
 void SET_STATE_OF_RAYFIRE_MAP_OBJECT(Object object, int state)
 int GET_STATE_OF_RAYFIRE_MAP_OBJECT(Object object)
 BOOL DOES_RAYFIRE_MAP_OBJECT_EXIST(Object object)
 float GET_RAYFIRE_MAP_OBJECT_ANIM_PHASE(Object object)
 Pickup CREATE_PICKUP(Hash pickupHash, float posX, float posY, float posZ, int p4, int value, BOOL p6, Hash modelHash)
 Pickup CREATE_PICKUP_ROTATE(Hash pickupHash, float posX, float posY, float posZ, float rotX, float rotY, float rotZ, int flag, int amount, Any p9, BOOL p10, Hash modelHash)
 void _0x394CD08E31313C28()
 void _0x826D1EE4D1CAFC78(Any p0, Any p1)
 Pickup CREATE_AMBIENT_PICKUP(Hash pickupHash, float posX, float posY, float posZ, int flags, int value, Hash modelHash, BOOL p7, BOOL p8)
 void _0x1E3F1B1B891A2AAA(Any p0, Any p1)
 Object CREATE_PORTABLE_PICKUP(Hash pickupHash, float x, float y, float z, BOOL placeOnGround, Hash modelHash)
 Object _CREATE_PORTABLE_PICKUP_2(Hash pickupHash, float x, float y, float z, BOOL placeOnGround, Hash modelHash)
 void ATTACH_PORTABLE_PICKUP_TO_PED(Object pickupObject, Ped ped)
 void DETACH_PORTABLE_PICKUP_FROM_PED(Object pickupObject)
 void _HIDE_PICKUP(Object pickupObject, BOOL toggle)
 void _0x0BF3B3BD47D79C08(Hash modelHash, int p1)
 void _0x78857FC65CADB909(BOOL p0)
 Vector3 GET_SAFE_PICKUP_COORDS(float x, float y, float z, float p3, float p4)
 void _0xD4A7A435B3710D05(float x, float y, float z, float radius)
 void _0xB7C6D80FB371659A()
 Vector3 GET_PICKUP_COORDS(Pickup pickup)
 void _0x8DCA505A5C196F05(Any p0, Any p1)
 void REMOVE_ALL_PICKUPS_OF_TYPE(Hash pickupHash)
 BOOL HAS_PICKUP_BEEN_COLLECTED(Pickup pickup)
 void REMOVE_PICKUP(Pickup pickup)
 void CREATE_MONEY_PICKUPS(float x, float y, float z, int value, int amount, Hash model)
 BOOL DOES_PICKUP_EXIST(Pickup pickup)
 BOOL DOES_PICKUP_OBJECT_EXIST(Object pickupObject)
 Object GET_PICKUP_OBJECT(Pickup pickup)
 Any _0xFC481C641EBBD27D(Any p0)
 BOOL _0x0378C08504160D0D(Any p0)
 BOOL DOES_PICKUP_OF_TYPE_EXIST_IN_AREA(Hash pickupHash, float x, float y, float z, float radius)
 void SET_PICKUP_REGENERATION_TIME(Pickup pickup, int duration)
 void _0x758A5C1B3B1E1990(Any p0)
 void _0x616093EC6B139DD9(Player player, Hash pickupHash, BOOL toggle)
 void _SET_LOCAL_PLAYER_CAN_USE_PICKUPS_WITH_THIS_MODEL(Hash modelHash, BOOL toggle)
 void _0xFDC07C58E8AAB715(Hash pickupHash)
 void SET_TEAM_PICKUP_OBJECT(Object object, Any p1, BOOL p2)
 void _0x92AEFB5F6E294023(Object object, BOOL p1, BOOL p2)
 void _0x0596843B34B95CE5(Any p0, Any p1)
 void _0xA08FE5E49BDC39DD(Any p0, float p1, BOOL p2)
 void _0x62454A641B41F3C5(Any p0)
 void _0x39A5FB7EAF150840(Any p0, Any p1)
 Any _0xDB41D07A45A6D4B7(Any p0)
 void SET_PICKUP_GENERATION_RANGE_MULTIPLIER(float multiplier)
 float _GET_PICKUP_GENERATION_RANGE_MULTIPLIER()
 void _0x31F924B53EADDF65(BOOL p0)
 void _0x1C1B69FAE509BA97(Any p0, Any p1)
 void _0x858EC9FD25DE04AA(Any p0, Any p1)
 void _0x3ED2B83AB2E82799(Any p0, Any p1)
 void _0x8881C98A31117998(Any p0, Any p1)
 void _0x8CFF648FBD7330F1(Any p0)
 void _0x46F3ADD1E2D5BAF2(Any p0, Any p1)
 void _0x641F272B52E2F0F8(Any p0, Any p1)
 void _0x4C134B4DF76025D0(Any p0, Any p1)
 void _0xAA059C615DE9DD03(Any p0, Any p1)
 void _0xF92099527DB8E2A7(Any p0, Any p1)
 void _0xA2C1F5E92AFE49ED()
 void _0x762DB2D380B48D04(Any p0)
 void _HIGHLIGHT_PLACEMENT_COORDS(float x, float y, float z, int colorIndex)
 void _0x7813E8B8C4AE4799(Pickup pickup)
 void _0xBFFE53AE7E67FCDC(Any p0, Any p1)
 void _0xD05A3241B9A86F19(Any p0, Any p1)
 void _0xB2D0BDE54F0E8E5A(Object object, BOOL toggle)
 Hash GET_WEAPON_TYPE_FROM_PICKUP_TYPE(Hash pickupHash)
 Any _0xD6429A016084F1A5(Any p0)
 BOOL IS_PICKUP_WEAPON_OBJECT_VALID(Object object)
 int _GET_OBJECT_TEXTURE_VARIATION(Object object)
 void _SET_OBJECT_TEXTURE_VARIATION(Object object, int textureVariation)
 Any _0xF12E33034D887F66(Any p0, Any p1, Any p2, Any p3, Any p4, Any p5)
 Any _SET_OBJECT_LIGHT_COLOR(Object object, BOOL p1, int r, int g, int b)
 Any _0xADF084FB8F075D06(Any p0)
 void _0x3B2FD68DB5F8331C(Object object, BOOL toggle)
 void _SET_OBJECT_STUNT_PROP_SPEEDUP(Any p0, Any p1)
 void _SET_OBJECT_STUNT_PROP_DURATION(Any p0, Any p1)
 Hash _GET_PICKUP_HASH(Hash pickupHash)
 void SET_FORCE_OBJECT_THIS_FRAME(float x, float y, float z, float p3)
 void _MARK_OBJECT_FOR_DELETION(Object object)
 void _0x8CAAB2BD3EA58BD4(Any p0)
 void _0x63ECF581BC70E363(Any p0, Any p1)
 void _SET_ENABLE_ARENA_PROP_PHYSICS(Any p0, Any p1, Any p2)
 void _SET_ENABLE_ARENA_PROP_PHYSICS_ON_PED(Any p0, Any p1, Any p2, Any p3)
 void _0x734E1714D077DA9A(Any p0, Any p1)
 void _0x1A6CBB06E2D0D79D(Any p0, Any p1)
 Any _GET_IS_ARENA_PROP_PHYSICS_DISABLED(Any p0, Any p1)
 Any _0x3BD770D281982DB5(Any p0, Any p1)
 void _0x1C57C94A6446492A(Any p0, Any p1)
 void _0xB5B7742424BD4445(Any p0, Any p1)
}

namespace PAD
{
 BOOL IS_CONTROL_ENABLED(int padIndex, int control)
 BOOL IS_CONTROL_PRESSED(int padIndex, int control)
 BOOL IS_CONTROL_RELEASED(int padIndex, int control)
 BOOL IS_CONTROL_JUST_PRESSED(int padIndex, int control)
 BOOL IS_CONTROL_JUST_RELEASED(int padIndex, int control)
 int GET_CONTROL_VALUE(int padIndex, int control)
 float GET_CONTROL_NORMAL(int padIndex, int control)
 void _0x5B73C77D9EB66E24(BOOL p0)
 float GET_CONTROL_UNBOUND_NORMAL(int padIndex, int control)
 BOOL _SET_CONTROL_NORMAL(int padIndex, int control, float amount)
 BOOL IS_DISABLED_CONTROL_PRESSED(int padIndex, int control)
 BOOL IS_DISABLED_CONTROL_RELEASED(int padIndex, int control)
 BOOL IS_DISABLED_CONTROL_JUST_PRESSED(int padIndex, int control)
 BOOL IS_DISABLED_CONTROL_JUST_RELEASED(int padIndex, int control)
 float GET_DISABLED_CONTROL_NORMAL(int padIndex, int control)
 float GET_DISABLED_CONTROL_UNBOUND_NORMAL(int padIndex, int control)
 int _0xD7D22F5592AED8BA(int p0)
 BOOL _IS_INPUT_DISABLED(int padIndex)
 BOOL _IS_INPUT_JUST_DISABLED(int padIndex)
 BOOL _SET_CURSOR_LOCATION(float x, float y)
 BOOL _0x23F09EADC01449D6(int padIndex)
 BOOL _0x6CD79468A1E595C6(int padIndex)
 const char* GET_CONTROL_INSTRUCTIONAL_BUTTON(int padIndex, int control, BOOL p2)
 const char* GET_CONTROL_GROUP_INSTRUCTIONAL_BUTTON(int padIndex, int controlGroup, BOOL p2)
 void _SET_CONTROL_GROUP_COLOR(int padIndex, int red, int green, int blue)
 void _0xCB0360EFEFB2580D(int padIndex)
 void SET_PAD_SHAKE(int padIndex, int duration, int frequency)
 void _0x14D29BB12D47F68C(Any p0, Any p1, Any p2, Any p3, Any p4)
 void STOP_PAD_SHAKE(int padIndex)
 void _0xF239400E16C23E08(Any p0, Any p1)
 void _0xA0CEFCEA390AAB9B(Any p0)
 BOOL IS_LOOK_INVERTED()
 BOOL _0xE1615EC03B3BB4FD()
 int GET_LOCAL_PLAYER_AIM_STATE()
 int _GET_LOCAL_PLAYER_AIM_STATE_2()
 Any _0x25AAA32BDC98F2A3()
 BOOL GET_IS_USING_ALTERNATE_DRIVEBY()
 BOOL GET_ALLOW_MOVEMENT_WHILE_ZOOMED()
 void SET_PLAYERPAD_SHAKES_WHEN_CONTROLLER_DISABLED(BOOL toggle)
 void SET_INPUT_EXCLUSIVE(int padIndex, int control)
 void DISABLE_CONTROL_ACTION(int padIndex, int control, BOOL disable)
 void ENABLE_CONTROL_ACTION(int padIndex, int control, BOOL enable)
 void DISABLE_ALL_CONTROL_ACTIONS(int padIndex)
 void ENABLE_ALL_CONTROL_ACTIONS(int padIndex)
 BOOL _SWITCH_TO_INPUT_MAPPING_SCHEME(const char* name)
 BOOL _SWITCH_TO_INPUT_MAPPING_SCHEME_2(const char* name)
 void _RESET_INPUT_MAPPING_SCHEME()
 void _0x7F4724035FDCA1DD(int padIndex)
}

namespace PATHFIND
{
 void SET_ROADS_IN_AREA(float x1, float y1, float z1, float x2, float y2, float z2, BOOL unknown1, BOOL unknown2)
 void SET_ROADS_IN_ANGLED_AREA(float x1, float y1, float z1, float x2, float y2, float z2, float angle, BOOL unknown1, BOOL unknown2, BOOL unknown3)
 void SET_PED_PATHS_IN_AREA(float x1, float y1, float z1, float x2, float y2, float z2, BOOL unknown, Any p7)
 BOOL GET_SAFE_COORD_FOR_PED(float x, float y, float z, BOOL onGround, Vector3* outPosition, int flags)
 BOOL GET_CLOSEST_VEHICLE_NODE(float x, float y, float z, Vector3* outPosition, int nodeType, float p5, float p6)
 BOOL GET_CLOSEST_MAJOR_VEHICLE_NODE(float x, float y, float z, Vector3* outPosition, float unknown1, int unknown2)
 BOOL GET_CLOSEST_VEHICLE_NODE_WITH_HEADING(float x, float y, float z, Vector3* outPosition, float* outHeading, int nodeType, float p6, int p7)
 BOOL GET_NTH_CLOSEST_VEHICLE_NODE(float x, float y, float z, int nthClosest, Vector3* outPosition, Any unknown1, Any unknown2, Any unknown3)
 int GET_NTH_CLOSEST_VEHICLE_NODE_ID(float x, float y, float z, int nth, int nodetype, float p5, float p6)
 BOOL GET_NTH_CLOSEST_VEHICLE_NODE_WITH_HEADING(float x, float y, float z, int nthClosest, Vector3* outPosition, float* heading, Any* unknown1, int unknown2, float unknown3, float unknown4)
 BOOL GET_NTH_CLOSEST_VEHICLE_NODE_ID_WITH_HEADING(float x, float y, float z, int nthClosest, Vector3* outPosition, float outHeading, Any p6, float p7, float p8)
 BOOL GET_NTH_CLOSEST_VEHICLE_NODE_FAVOUR_DIRECTION(float x, float y, float z, float desiredX, float desiredY, float desiredZ, int nthClosest, Vector3* outPosition, float* outHeading, int nodetype, Any p10, Any p11)
 BOOL GET_VEHICLE_NODE_PROPERTIES(float x, float y, float z, int* density, int* flags)
 BOOL IS_VEHICLE_NODE_ID_VALID(int vehicleNodeId)
 void GET_VEHICLE_NODE_POSITION(int nodeId, Vector3* outPosition)
 BOOL GET_VEHICLE_NODE_IS_GPS_ALLOWED(int nodeID)
 BOOL GET_VEHICLE_NODE_IS_SWITCHED_OFF(int nodeID)
 Any GET_CLOSEST_ROAD(float x, float y, float z, float p3, int p4, Vector3* p5, Vector3* p6, Any* p7, Any* p8, float* p9, BOOL p10)
 void _0x228E5C6AD4D74BFD(BOOL toggle)
 BOOL _ARE_PATH_NODES_LOADED_IN_AREA(float x1, float y1, float x2, float y2)
 BOOL _0x07FB139B592FA687(float p0, float p1, float p2, float p3)
 void SET_ROADS_BACK_TO_ORIGINAL(float p0, float p1, float p2, float p3, float p4, float p5, Any p6)
 void SET_ROADS_BACK_TO_ORIGINAL_IN_ANGLED_AREA(float x1, float y1, float z1, float x2, float y2, float z2, float p6, Any p7)
 void SET_AMBIENT_PED_RANGE_MULTIPLIER_THIS_FRAME(float multiplier)
 void _0xAA76052DDA9BFC3E(Any p0, Any p1, Any p2, Any p3, Any p4, Any p5, Any p6)
 void SET_PED_PATHS_BACK_TO_ORIGINAL(Any p0, Any p1, Any p2, Any p3, Any p4, Any p5, Any p6)
 BOOL GET_RANDOM_VEHICLE_NODE(float x, float y, float z, float radius, BOOL p4, BOOL p5, BOOL p6, Vector3* outPosition, int* nodeId)
 void GET_STREET_NAME_AT_COORD(float x, float y, float z, Hash* streetName, Hash* crossingRoad)
 int GENERATE_DIRECTIONS_TO_COORD(float x, float y, float z, BOOL p3, int* direction, float* p5, float* distToNxJunction)
 void SET_IGNORE_NO_GPS_FLAG(BOOL toggle)
 void _SET_IGNORE_SECONDARY_ROUTE_NODES(BOOL toggle)
 void SET_GPS_DISABLED_ZONE(float x1, float y1, float z1, float x2, float y2, float z3)
 int GET_GPS_BLIP_ROUTE_LENGTH()
 Any _0xF3162836C28F9DA5(Any p0, Any p1, Any p2, Any p3)
 BOOL GET_GPS_BLIP_ROUTE_FOUND()
 Any _GET_ROAD_SIDE_POINT_WITH_HEADING(Any p0, Any p1, Any p2, Any p3, Any p4)
 Any _GET_POINT_ON_ROAD_SIDE(Any p0, Any p1, Any p2, Any p3, Any p4)
 BOOL IS_POINT_ON_ROAD(float x, float y, float z, Vehicle vehicle)
 int GET_NEXT_GPS_DISABLED_ZONE_INDEX()
 void SET_GPS_DISABLED_ZONE_AT_INDEX(float x1, float y1, float z1, float x2, float y2, float z2, int index)
 void CLEAR_GPS_DISABLED_ZONE_AT_INDEX(int index)
 void ADD_NAVMESH_REQUIRED_REGION(float x, float y, float radius)
 void REMOVE_NAVMESH_REQUIRED_REGIONS()
 BOOL _IS_NAVMESH_REQUIRED_REGION_OWNED_BY_ANY_THREAD()
 void DISABLE_NAVMESH_IN_AREA(Any p0, Any p1, Any p2, Any p3, Any p4, Any p5, Any p6)
 BOOL ARE_ALL_NAVMESH_REGIONS_LOADED()
 BOOL IS_NAVMESH_LOADED_IN_AREA(float x1, float y1, float z1, float x2, float y2, float z2)
 Any _0x01708E8DD3FF8C65(float p0, float p1, float p2, float p3, float p4, float p5)
 Any ADD_NAVMESH_BLOCKING_OBJECT(float p0, float p1, float p2, float p3, float p4, float p5, float p6, BOOL p7, Any p8)
 void UPDATE_NAVMESH_BLOCKING_OBJECT(Any p0, float p1, float p2, float p3, float p4, float p5, float p6, float p7, Any p8)
 void REMOVE_NAVMESH_BLOCKING_OBJECT(Any p0)
 BOOL DOES_NAVMESH_BLOCKING_OBJECT_EXIST(Any p0)
 float _GET_HEIGHTMAP_TOP_Z_FOR_POSITION(float p0, float p1)
 float _GET_HEIGHTMAP_TOP_Z_FOR_AREA(float p0, float p1, float p2, float p3)
 float _GET_HEIGHTMAP_BOTTOM_Z_FOR_POSITION(float left, float right)
 float _GET_HEIGHTMAP_BOTTOM_Z_FOR_AREA(float p0, float p1, float p2, float p3)
 float CALCULATE_TRAVEL_DISTANCE_BETWEEN_POINTS(float x1, float y1, float z1, float x2, float y2, float z2)
}

namespace PED
{
 Ped CREATE_PED(int pedType, Hash modelHash, float x, float y, float z, float heading, BOOL isNetwork, BOOL thisScriptCheck)
 void DELETE_PED(Ped* ped)
 Ped CLONE_PED(Ped ped, float heading, BOOL isNetwork, BOOL thisScriptCheck)
 Ped _CLONE_PED_EX(Ped ped, float heading, BOOL isNetwork, BOOL thisScriptCheck, Any p4)
 void CLONE_PED_TO_TARGET(Ped ped, Ped targetPed)
 void _CLONE_PED_TO_TARGET_EX(Ped ped, Ped targetPed, Any p2)
 BOOL IS_PED_IN_VEHICLE(Ped ped, Vehicle vehicle, BOOL atGetIn)
 BOOL IS_PED_IN_MODEL(Ped ped, Hash modelHash)
 BOOL IS_PED_IN_ANY_VEHICLE(Ped ped, BOOL atGetIn)
 BOOL IS_COP_PED_IN_AREA_3D(float x1, float y1, float z1, float x2, float y2, float z2)
 BOOL IS_PED_INJURED(Ped ped)
 BOOL IS_PED_HURT(Ped ped)
 BOOL IS_PED_FATALLY_INJURED(Ped ped)
 BOOL IS_PED_DEAD_OR_DYING(Ped ped, BOOL p1)
 BOOL IS_CONVERSATION_PED_DEAD(Ped ped)
 BOOL IS_PED_AIMING_FROM_COVER(Ped ped)
 BOOL IS_PED_RELOADING(Ped ped)
 BOOL IS_PED_A_PLAYER(Ped ped)
 Ped CREATE_PED_INSIDE_VEHICLE(Vehicle vehicle, int pedType, Hash modelHash, int seat, BOOL isNetwork, BOOL thisScriptCheck)
 void SET_PED_DESIRED_HEADING(Ped ped, float heading)
 void _FREEZE_PED_CAMERA_ROTATION(Ped ped)
 BOOL IS_PED_FACING_PED(Ped ped, Ped otherPed, float angle)
 BOOL IS_PED_IN_MELEE_COMBAT(Ped ped)
 BOOL IS_PED_STOPPED(Ped ped)
 BOOL IS_PED_SHOOTING_IN_AREA(Ped ped, float x1, float y1, float z1, float x2, float y2, float z2, BOOL p7, BOOL p8)
 BOOL IS_ANY_PED_SHOOTING_IN_AREA(float x1, float y1, float z1, float x2, float y2, float z2, BOOL p6, BOOL p7)
 BOOL IS_PED_SHOOTING(Ped ped)
 void SET_PED_ACCURACY(Ped ped, int accuracy)
 int GET_PED_ACCURACY(Ped ped)
 void _0x87DDEB611B329A9C(float multiplier)
 BOOL IS_PED_MODEL(Ped ped, Hash modelHash)
 void EXPLODE_PED_HEAD(Ped ped, Hash weaponHash)
 void REMOVE_PED_ELEGANTLY(Ped* ped)
 void ADD_ARMOUR_TO_PED(Ped ped, int amount)
 void SET_PED_ARMOUR(Ped ped, int amount)
 void SET_PED_INTO_VEHICLE(Ped ped, Vehicle vehicle, int seatIndex)
 void SET_PED_ALLOW_VEHICLES_OVERRIDE(Ped ped, BOOL toggle)
 BOOL CAN_CREATE_RANDOM_PED(BOOL unk)
 Ped CREATE_RANDOM_PED(float posX, float posY, float posZ)
 Ped CREATE_RANDOM_PED_AS_DRIVER(Vehicle vehicle, BOOL returnHandle)
 BOOL CAN_CREATE_RANDOM_DRIVER()
 BOOL CAN_CREATE_RANDOM_BIKE_RIDER()
 void SET_PED_MOVE_ANIMS_BLEND_OUT(Ped ped)
 void SET_PED_CAN_BE_DRAGGED_OUT(Ped ped, BOOL toggle)
 void _0xF2BEBCDFAFDAA19E(BOOL toggle)
 BOOL IS_PED_MALE(Ped ped)
 BOOL IS_PED_HUMAN(Ped ped)
 Vehicle GET_VEHICLE_PED_IS_IN(Ped ped, BOOL lastVehicle)
 void RESET_PED_LAST_VEHICLE(Ped ped)
 void SET_PED_DENSITY_MULTIPLIER_THIS_FRAME(float multiplier)
 void SET_SCENARIO_PED_DENSITY_MULTIPLIER_THIS_FRAME(float p0, float p1)
 void _0x5A7F62FDA59759BD()
 void SET_SCRIPTED_CONVERSION_COORD_THIS_FRAME(float x, float y, float z)
 void SET_PED_NON_CREATION_AREA(float x1, float y1, float z1, float x2, float y2, float z2)
 void CLEAR_PED_NON_CREATION_AREA()
 void _0x4759CC730F947C81()
 BOOL IS_PED_ON_MOUNT(Ped ped)
 Ped GET_MOUNT(Ped ped)
 BOOL IS_PED_ON_VEHICLE(Ped ped)
 BOOL IS_PED_ON_SPECIFIC_VEHICLE(Ped ped, Vehicle vehicle)
 void SET_PED_MONEY(Ped ped, int amount)
 int GET_PED_MONEY(Ped ped)
 void _0xFF4803BC019852D9(float p0, Any p1)
 void _0x6B0E6172C9A4D902(BOOL p0)
 void _0x9911F4A24485F653(BOOL p0)
 void SET_PED_SUFFERS_CRITICAL_HITS(Ped ped, BOOL toggle)
 void _0xAFC976FD0580C7B3(Ped ped, BOOL toggle)
 BOOL IS_PED_SITTING_IN_VEHICLE(Ped ped, Vehicle vehicle)
 BOOL IS_PED_SITTING_IN_ANY_VEHICLE(Ped ped)
 BOOL IS_PED_ON_FOOT(Ped ped)
 BOOL IS_PED_ON_ANY_BIKE(Ped ped)
 BOOL IS_PED_PLANTING_BOMB(Ped ped)
 Vector3 GET_DEAD_PED_PICKUP_COORDS(Ped ped, float p1, float p2)
 BOOL IS_PED_IN_ANY_BOAT(Ped ped)
 BOOL IS_PED_IN_ANY_SUB(Ped ped)
 BOOL IS_PED_IN_ANY_HELI(Ped ped)
 BOOL IS_PED_IN_ANY_PLANE(Ped ped)
 BOOL IS_PED_IN_FLYING_VEHICLE(Ped ped)
 void SET_PED_DIES_IN_WATER(Ped ped, BOOL toggle)
 void SET_PED_DIES_IN_SINKING_VEHICLE(Ped ped, BOOL toggle)
 int GET_PED_ARMOUR(Ped ped)
 void SET_PED_STAY_IN_VEHICLE_WHEN_JACKED(Ped ped, BOOL toggle)
 void SET_PED_CAN_BE_SHOT_IN_VEHICLE(Ped ped, BOOL toggle)
 BOOL GET_PED_LAST_DAMAGE_BONE(Ped ped, int* outBone)
 void CLEAR_PED_LAST_DAMAGE_BONE(Ped ped)
 void SET_AI_WEAPON_DAMAGE_MODIFIER(float value)
 void RESET_AI_WEAPON_DAMAGE_MODIFIER()
 void SET_AI_MELEE_WEAPON_DAMAGE_MODIFIER(float modifier)
 void RESET_AI_MELEE_WEAPON_DAMAGE_MODIFIER()
 void _0x2F3C3D9F50681DE4(Any p0, BOOL p1)
 void SET_PED_CAN_BE_TARGETTED(Ped ped, BOOL toggle)
 void SET_PED_CAN_BE_TARGETTED_BY_TEAM(Ped ped, int team, BOOL toggle)
 void SET_PED_CAN_BE_TARGETTED_BY_PLAYER(Ped ped, Player player, BOOL toggle)
 void _0x061CB768363D6424(Ped ped, BOOL toggle)
 void _0xFD325494792302D7(Ped ped, BOOL toggle)
 BOOL IS_PED_IN_ANY_POLICE_VEHICLE(Ped ped)
 void FORCE_PED_TO_OPEN_PARACHUTE(Ped ped)
 BOOL IS_PED_IN_PARACHUTE_FREE_FALL(Ped ped)
 BOOL IS_PED_FALLING(Ped ped)
 BOOL IS_PED_JUMPING(Ped ped)
 Any _0x412F1364FA066CFB(Any p0)
 Any _0x451D05012CCEC234(Any p0)
 BOOL IS_PED_CLIMBING(Ped ped)
 BOOL IS_PED_VAULTING(Ped ped)
 BOOL IS_PED_DIVING(Ped ped)
 BOOL IS_PED_JUMPING_OUT_OF_VEHICLE(Ped ped)
 BOOL _IS_PED_OPENING_A_DOOR(Ped ped)
 int GET_PED_PARACHUTE_STATE(Ped ped)
 int GET_PED_PARACHUTE_LANDING_TYPE(Ped ped)
 void SET_PED_PARACHUTE_TINT_INDEX(Ped ped, int tintIndex)
 void GET_PED_PARACHUTE_TINT_INDEX(Ped ped, int* outTintIndex)
 void SET_PED_RESERVE_PARACHUTE_TINT_INDEX(Ped ped, Any p1)
 Object _CREATE_PARACHUTE_OBJECT(Ped ped, BOOL p1, BOOL p2)
 void SET_PED_DUCKING(Ped ped, BOOL toggle)
 BOOL IS_PED_DUCKING(Ped ped)
 BOOL IS_PED_IN_ANY_TAXI(Ped ped)
 void SET_PED_ID_RANGE(Ped ped, float value)
 void SET_PED_HIGHLY_PERCEPTIVE(Ped ped, BOOL toggle)
 void _0x2F074C904D85129E(Any p0, Any p1, Any p2, Any p3, Any p4, Any p5, Any p6)
 void _0xEC4B4B3B9908052A(Ped ped, float unk)
 void _0x733C87D4CE22BEA2(Any p0)
 void SET_PED_SEEING_RANGE(Ped ped, float value)
 void SET_PED_HEARING_RANGE(Ped ped, float value)
 void SET_PED_VISUAL_FIELD_MIN_ANGLE(Ped ped, float value)
 void SET_PED_VISUAL_FIELD_MAX_ANGLE(Ped ped, float value)
 void SET_PED_VISUAL_FIELD_MIN_ELEVATION_ANGLE(Ped ped, float angle)
 void SET_PED_VISUAL_FIELD_MAX_ELEVATION_ANGLE(Ped ped, float angle)
 void SET_PED_VISUAL_FIELD_PERIPHERAL_RANGE(Ped ped, float range)
 void SET_PED_VISUAL_FIELD_CENTER_ANGLE(Ped ped, float angle)
 float _GET_PED_VISUAL_FIELD_CENTER_ANGLE(Ped ped)
 void SET_PED_STEALTH_MOVEMENT(Ped ped, BOOL p1, const char* action)
 BOOL GET_PED_STEALTH_MOVEMENT(Ped ped)
 int CREATE_GROUP(int unused)
 void SET_PED_AS_GROUP_LEADER(Ped ped, int groupId)
 void SET_PED_AS_GROUP_MEMBER(Ped ped, int groupId)
 void SET_PED_CAN_TELEPORT_TO_GROUP_LEADER(Ped pedHandle, int groupHandle, BOOL toggle)
 void REMOVE_GROUP(int groupId)
 void REMOVE_PED_FROM_GROUP(Ped ped)
 BOOL IS_PED_GROUP_MEMBER(Ped ped, int groupId)
 BOOL IS_PED_HANGING_ON_TO_VEHICLE(Ped ped)
 void SET_GROUP_SEPARATION_RANGE(int groupHandle, float separationRange)
 void SET_PED_MIN_GROUND_TIME_FOR_STUNGUN(Ped ped, int ms)
 BOOL IS_PED_PRONE(Ped ped)
 BOOL IS_PED_IN_COMBAT(Ped ped, Ped target)
 BOOL CAN_PED_IN_COMBAT_SEE_TARGET(Ped ped, Ped target)
 BOOL IS_PED_DOING_DRIVEBY(Ped ped)
 BOOL IS_PED_JACKING(Ped ped)
 BOOL IS_PED_BEING_JACKED(Ped ped)
 BOOL IS_PED_BEING_STUNNED(Ped ped, int p1)
 Ped GET_PEDS_JACKER(Ped ped)
 Ped GET_JACK_TARGET(Ped ped)
 BOOL IS_PED_FLEEING(Ped ped)
 BOOL IS_PED_IN_COVER(Ped ped, BOOL exceptUseWeapon)
 BOOL IS_PED_IN_COVER_FACING_LEFT(Ped ped)
 BOOL IS_PED_IN_HIGH_COVER(Ped ped)
 BOOL IS_PED_GOING_INTO_COVER(Ped ped)
 Any SET_PED_PINNED_DOWN(Ped ped, BOOL pinned, int i)
 int GET_SEAT_PED_IS_TRYING_TO_ENTER(Ped ped)
 Vehicle GET_VEHICLE_PED_IS_TRYING_TO_ENTER(Ped ped)
 Entity GET_PED_SOURCE_OF_DEATH(Ped ped)
 Hash GET_PED_CAUSE_OF_DEATH(Ped ped)
 int GET_PED_TIME_OF_DEATH(Ped ped)
 int _0x5407B7288D0478B7(Any p0)
 Any _0x336B3D200AB007CB(Any p0, float p1, float p2, float p3, float p4)
 void SET_PED_RELATIONSHIP_GROUP_DEFAULT_HASH(Ped ped, Hash hash)
 void SET_PED_RELATIONSHIP_GROUP_HASH(Ped ped, Hash hash)
 void SET_RELATIONSHIP_BETWEEN_GROUPS(int relationship, Hash group1, Hash group2)
 void CLEAR_RELATIONSHIP_BETWEEN_GROUPS(int relationship, Hash group1, Hash group2)
 Any ADD_RELATIONSHIP_GROUP(const char* name, Hash* groupHash)
 void REMOVE_RELATIONSHIP_GROUP(Hash groupHash)
 Any _DOES_RELATIONSHIP_GROUP_EXIST(Any p0)
 int GET_RELATIONSHIP_BETWEEN_PEDS(Ped ped1, Ped ped2)
 Hash GET_PED_RELATIONSHIP_GROUP_DEFAULT_HASH(Ped ped)
 Hash GET_PED_RELATIONSHIP_GROUP_HASH(Ped ped)
 int GET_RELATIONSHIP_BETWEEN_GROUPS(Hash group1, Hash group2)
 void _0x5615E0C5EB2BC6E2(Any p0, Any p1)
 void _0xAD27D957598E49E9(Any p0, Any p1, Any p2, Any p3, Any p4, Any p5)
 void SET_PED_CAN_BE_TARGETED_WITHOUT_LOS(Ped ped, BOOL toggle)
 void SET_PED_TO_INFORM_RESPECTED_FRIENDS(Ped ped, float radius, int maxFriends)
 BOOL IS_PED_RESPONDING_TO_EVENT(Ped ped, Any event)
 void SET_PED_FIRING_PATTERN(Ped ped, Hash patternHash)
 void SET_PED_SHOOT_RATE(Ped ped, int shootRate)
 void SET_COMBAT_FLOAT(Ped ped, int combatType, float p2)
 float GET_COMBAT_FLOAT(Ped ped, int p1)
 void GET_GROUP_SIZE(int groupID, Any* unknown, int* sizeInMembers)
 BOOL DOES_GROUP_EXIST(int groupId)
 int GET_PED_GROUP_INDEX(Ped ped)
 BOOL IS_PED_IN_GROUP(Ped ped)
 Player GET_PLAYER_PED_IS_FOLLOWING(Ped ped)
 void SET_GROUP_FORMATION(int groupId, int formationType)
 void SET_GROUP_FORMATION_SPACING(int groupId, float p1, float p2, float p3)
 void RESET_GROUP_FORMATION_DEFAULT_SPACING(int groupHandle)
 Vehicle GET_VEHICLE_PED_IS_USING(Ped ped)
 Vehicle GET_VEHICLE_PED_IS_ENTERING(Ped ped)
 void SET_PED_GRAVITY(Ped ped, BOOL toggle)
 void APPLY_DAMAGE_TO_PED(Ped ped, int damageAmount, BOOL p2, Any p3)
 int _GET_TIME_OF_LAST_PED_WEAPON_DAMAGE(Ped ped, Hash weaponHash)
 void SET_PED_ALLOWED_TO_DUCK(Ped ped, BOOL toggle)
 void SET_PED_NEVER_LEAVES_GROUP(Ped ped, BOOL toggle)
 int GET_PED_TYPE(Ped ped)
 void SET_PED_AS_COP(Ped ped, BOOL toggle)
 void SET_PED_MAX_HEALTH(Ped ped, int value)
 int GET_PED_MAX_HEALTH(Ped ped)
 void SET_PED_MAX_TIME_IN_WATER(Ped ped, float value)
 void SET_PED_MAX_TIME_UNDERWATER(Ped ped, float value)
 void _0x2735233A786B1BEF(Ped ped, float p1)
 void SET_PED_VEHICLE_FORCED_SEAT_USAGE(Ped ped, Vehicle vehicle, int seatIndex, int flags)
 void CLEAR_ALL_PED_VEHICLE_FORCED_SEAT_USAGE(Ped ped)
 void _0xB282749D5E028163(Any p0, Any p1)
 void SET_PED_CAN_BE_KNOCKED_OFF_VEHICLE(Ped ped, int state)
 BOOL CAN_KNOCK_PED_OFF_VEHICLE(Ped ped)
 void KNOCK_PED_OFF_VEHICLE(Ped ped)
 void SET_PED_COORDS_NO_GANG(Ped ped, float posX, float posY, float posZ)
 Ped GET_PED_AS_GROUP_MEMBER(int groupID, int memberNumber)
 Ped GET_PED_AS_GROUP_LEADER(int groupID)
 void SET_PED_KEEP_TASK(Ped ped, BOOL toggle)
 void _0x49E50BDB8BA4DAB2(Ped ped, BOOL toggle)
 BOOL IS_PED_SWIMMING(Ped ped)
 BOOL IS_PED_SWIMMING_UNDER_WATER(Ped ped)
 void SET_PED_COORDS_KEEP_VEHICLE(Ped ped, float posX, float posY, float posZ)
 void SET_PED_DIES_IN_VEHICLE(Ped ped, BOOL toggle)
 void SET_CREATE_RANDOM_COPS(BOOL toggle)
 void SET_CREATE_RANDOM_COPS_NOT_ON_SCENARIOS(BOOL toggle)
 void SET_CREATE_RANDOM_COPS_ON_SCENARIOS(BOOL toggle)
 BOOL CAN_CREATE_RANDOM_COPS()
 void SET_PED_AS_ENEMY(Ped ped, BOOL toggle)
 void SET_PED_CAN_SMASH_GLASS(Ped ped, BOOL p1, BOOL p2)
 BOOL IS_PED_IN_ANY_TRAIN(Ped ped)
 BOOL IS_PED_GETTING_INTO_A_VEHICLE(Ped ped)
 BOOL IS_PED_TRYING_TO_ENTER_A_LOCKED_VEHICLE(Ped ped)
 void SET_ENABLE_HANDCUFFS(Ped ped, BOOL toggle)
 void SET_ENABLE_BOUND_ANKLES(Ped ped, BOOL toggle)
 void SET_ENABLE_SCUBA(Ped ped, BOOL toggle)
 void SET_CAN_ATTACK_FRIENDLY(Ped ped, BOOL toggle, BOOL p2)
 int GET_PED_ALERTNESS(Ped ped)
 void SET_PED_ALERTNESS(Ped ped, int value)
 void SET_PED_GET_OUT_UPSIDE_DOWN_VEHICLE(Ped ped, BOOL toggle)
 void SET_PED_MOVEMENT_CLIPSET(Ped ped, const char* clipSet, float p2)
 void RESET_PED_MOVEMENT_CLIPSET(Ped ped, float p1)
 void SET_PED_STRAFE_CLIPSET(Ped ped, const char* clipSet)
 void RESET_PED_STRAFE_CLIPSET(Ped ped)
 void SET_PED_WEAPON_MOVEMENT_CLIPSET(Ped ped, const char* clipSet)
 void RESET_PED_WEAPON_MOVEMENT_CLIPSET(Ped ped)
 void SET_PED_DRIVE_BY_CLIPSET_OVERRIDE(Ped ped, const char* clipset)
 void CLEAR_PED_DRIVE_BY_CLIPSET_OVERRIDE(Ped ped)
 void _SET_PED_COVER_CLIPSET_OVERRIDE(Ped ped, const char* p1)
 void _CLEAR_PED_COVER_CLIPSET_OVERRIDE(Ped ped)
 void _0x80054D7FCC70EEC6(Ped ped)
 void SET_PED_IN_VEHICLE_CONTEXT(Ped ped, Hash context)
 void RESET_PED_IN_VEHICLE_CONTEXT(Ped ped)
 BOOL IS_SCRIPTED_SCENARIO_PED_USING_CONDITIONAL_ANIM(Ped ped, const char* animDict, const char* anim)
 void SET_PED_ALTERNATE_WALK_ANIM(Ped ped, const char* animDict, const char* animName, float p3, BOOL p4)
 void CLEAR_PED_ALTERNATE_WALK_ANIM(Ped ped, float p1)
 void SET_PED_ALTERNATE_MOVEMENT_ANIM(Ped ped, int stance, const char* animDictionary, const char* animationName, float p4, BOOL p5)
 void CLEAR_PED_ALTERNATE_MOVEMENT_ANIM(Ped ped, int stance, float p2)
 void SET_PED_GESTURE_GROUP(Ped ped, const char* animGroupGesture)
 Vector3 GET_ANIM_INITIAL_OFFSET_POSITION(const char* animDict, const char* animName, float x, float y, float z, float xRot, float yRot, float zRot, float p8, int p9)
 Vector3 GET_ANIM_INITIAL_OFFSET_ROTATION(const char* animDict, const char* animName, float x, float y, float z, float xRot, float yRot, float zRot, float p8, int p9)
 int GET_PED_DRAWABLE_VARIATION(Ped ped, int componentId)
 int GET_NUMBER_OF_PED_DRAWABLE_VARIATIONS(Ped ped, int componentId)
 int GET_PED_TEXTURE_VARIATION(Ped ped, int componentId)
 int GET_NUMBER_OF_PED_TEXTURE_VARIATIONS(Ped ped, int componentId, int drawableId)
 int GET_NUMBER_OF_PED_PROP_DRAWABLE_VARIATIONS(Ped ped, int propId)
 int GET_NUMBER_OF_PED_PROP_TEXTURE_VARIATIONS(Ped ped, int propId, int drawableId)
 int GET_PED_PALETTE_VARIATION(Ped ped, int componentId)
 BOOL _0x9E30E91FB03A2CAF(Any* p0, Any* p1)
 Any _0x1E77FA7A62EE6C4C(Any p0)
 Any _0xF033419D1B81FAE8(Any p0)
 BOOL IS_PED_COMPONENT_VARIATION_VALID(Ped ped, int componentId, int drawableId, int textureId)
 void SET_PED_COMPONENT_VARIATION(Ped ped, int componentId, int drawableId, int textureId, int paletteId)
 void SET_PED_RANDOM_COMPONENT_VARIATION(Ped ped, int p1)
 void SET_PED_RANDOM_PROPS(Ped ped)
 void SET_PED_DEFAULT_COMPONENT_VARIATION(Ped ped)
 void SET_PED_BLEND_FROM_PARENTS(Ped ped, Any p1, Any p2, float p3, float p4)
 void SET_PED_HEAD_BLEND_DATA(Ped ped, int shapeFirstID, int shapeSecondID, int shapeThirdID, int skinFirstID, int skinSecondID, int skinThirdID, float shapeMix, float skinMix, float thirdMix, BOOL isParent)
 BOOL GET_PED_HEAD_BLEND_DATA(Ped ped, Any* headBlendData)
 void UPDATE_PED_HEAD_BLEND_DATA(Ped ped, float shapeMix, float skinMix, float thirdMix)
 void _SET_PED_EYE_COLOR(Ped ped, int index)
 Any _0x76BBA2CEE66D47E9(Any p0)
 void SET_PED_HEAD_OVERLAY(Ped ped, int overlayID, int index, float opacity)
 int _GET_PED_HEAD_OVERLAY_VALUE(Ped ped, int overlayID)
 int GET_PED_HEAD_OVERLAY_NUM(int overlayID)
 void _SET_PED_HEAD_OVERLAY_COLOR(Ped ped, int overlayID, int colorType, int colorID, int secondColorID)
 void _SET_PED_HAIR_COLOR(Ped ped, int colorID, int highlightColorID)
 int _GET_NUM_HAIR_COLORS()
 int _GET_NUM_MAKEUP_COLORS()
 void _GET_PED_HAIR_RGB_COLOR(int p0, int* r, int* g, int* b)
 void _GET_PED_MAKEUP_RGB_COLOR(int p0, int* r, int* g, int* b)
 BOOL _IS_PED_HAIR_COLOR_VALID_2(Any p0)
 int _0xEA9960D07DADCF10(Any p0)
 BOOL _IS_PED_LIPSTICK_COLOR_VALID_2(Any p0)
 BOOL _IS_PED_BLUSH_COLOR_VALID_2(Any p0)
 BOOL _IS_PED_HAIR_COLOR_VALID(int colorID)
 Any _0xAAA6A3698A69E048(Any p0)
 BOOL _IS_PED_LIPSTICK_COLOR_VALID(int colorID)
 BOOL _IS_PED_BLUSH_COLOR_VALID(int colorID)
 Any _0x09E7ECA981D9B210(Any p0)
 Any _0xC56FBF2F228E1DAC(Hash modelHash, Any p1, Any p2)
 void _SET_PED_FACE_FEATURE(Ped ped, int index, float scale)
 BOOL HAS_PED_HEAD_BLEND_FINISHED(Ped ped)
 void _0x4668D80430D6C299(Ped ped)
 void SET_HEAD_BLEND_PALETTE_COLOR(Ped ped, int r, int g, int b, int p4)
 void DISABLE_HEAD_BLEND_PALETTE_COLOR(Ped ped)
 int GET_PED_HEAD_BLEND_FIRST_INDEX(int type)
 int _GET_NUM_PARENT_PEDS_OF_TYPE(int type)
 Any SET_PED_PRELOAD_VARIATION_DATA(Ped ped, int slot, int drawableId, int textureId)
 BOOL HAS_PED_PRELOAD_VARIATION_DATA_FINISHED(Ped ped)
 void RELEASE_PED_PRELOAD_VARIATION_DATA(Ped ped)
 BOOL SET_PED_PRELOAD_PROP_DATA(Ped ped, int componentId, int drawableId, int TextureId)
 BOOL HAS_PED_PRELOAD_PROP_DATA_FINISHED(Ped ped)
 void RELEASE_PED_PRELOAD_PROP_DATA(Ped ped)
 int GET_PED_PROP_INDEX(Ped ped, int componentId)
 void SET_PED_PROP_INDEX(Ped ped, int componentId, int drawableId, int TextureId, BOOL attach)
 void KNOCK_OFF_PED_PROP(Ped ped, BOOL p1, BOOL p2, BOOL p3, BOOL p4)
 void CLEAR_PED_PROP(Ped ped, int propId)
 void CLEAR_ALL_PED_PROPS(Ped ped)
 void DROP_AMBIENT_PROP(Ped ped)
 int GET_PED_PROP_TEXTURE_INDEX(Ped ped, int componentId)
 void CLEAR_PED_PARACHUTE_PACK_VARIATION(Any p0)
 void _0x36C6984C3ED0C911(Any p0)
 void CLEAR_PED_SCUBA_GEAR_VARIATION(Ped ped)
 BOOL _0xFEC9A3B1820F3331(Any p0)
 void SET_BLOCKING_OF_NON_TEMPORARY_EVENTS(Ped ped, BOOL toggle)
 void SET_PED_BOUNDS_ORIENTATION(Ped ped, float p1, float p2, float p3, float p4, float p5)
 void REGISTER_TARGET(Ped ped, Ped target)
 void REGISTER_HATED_TARGETS_AROUND_PED(Ped ped, float radius)
 Ped GET_RANDOM_PED_AT_COORD(float x, float y, float z, float xRadius, float yRadius, float zRadius, int pedType)
 BOOL GET_CLOSEST_PED(float x, float y, float z, float radius, BOOL p4, BOOL p5, Ped* outPed, BOOL p7, BOOL p8, int pedType)
 void SET_SCENARIO_PEDS_TO_BE_RETURNED_BY_NEXT_COMMAND(BOOL value)
 BOOL _0x03EA03AF85A85CB7(Ped ped, BOOL p1, BOOL p2, BOOL p3, BOOL p4, BOOL p5, BOOL p6, BOOL p7, Any p8)
 void SET_DRIVER_RACING_MODIFIER(Ped driver, float modifier)
 void SET_DRIVER_ABILITY(Ped driver, float ability)
 void SET_DRIVER_AGGRESSIVENESS(Ped driver, float aggressiveness)
 BOOL CAN_PED_RAGDOLL(Ped ped)
 BOOL SET_PED_TO_RAGDOLL(Ped ped, int time1, int time2, int ragdollType, BOOL p4, BOOL p5, BOOL p6)
 BOOL SET_PED_TO_RAGDOLL_WITH_FALL(Ped ped, int time, int p2, int ragdollType, float x, float y, float z, float p7, float p8, float p9, float p10, float p11, float p12, float p13)
 void SET_PED_RAGDOLL_ON_COLLISION(Ped ped, BOOL toggle)
 BOOL IS_PED_RAGDOLL(Ped ped)
 BOOL IS_PED_RUNNING_RAGDOLL_TASK(Ped ped)
 void SET_PED_RAGDOLL_FORCE_FALL(Ped ped)
 void RESET_PED_RAGDOLL_TIMER(Ped ped)
 void SET_PED_CAN_RAGDOLL(Ped ped, BOOL toggle)
 BOOL IS_PED_RUNNING_MELEE_TASK(Ped ped)
 BOOL IS_PED_RUNNING_MOBILE_PHONE_TASK(Ped ped)
 BOOL _0xA3F3564A5B3646C0(Ped ped)
 void SET_RAGDOLL_BLOCKING_FLAGS(Ped ped, int flags)
 void CLEAR_RAGDOLL_BLOCKING_FLAGS(Ped ped, int flags)
 void SET_PED_ANGLED_DEFENSIVE_AREA(Ped ped, float p1, float p2, float p3, float p4, float p5, float p6, float p7, BOOL p8, BOOL p9)
 void SET_PED_SPHERE_DEFENSIVE_AREA(Ped ped, float x, float y, float z, float radius, BOOL p5, BOOL p6)
 void SET_PED_DEFENSIVE_SPHERE_ATTACHED_TO_PED(Ped ped, Ped target, float xOffset, float yOffset, float zOffset, float radius, BOOL p6)
 void SET_PED_DEFENSIVE_SPHERE_ATTACHED_TO_VEHICLE(Ped ped, Vehicle target, float xOffset, float yOffset, float zOffset, float radius, BOOL p6)
 void SET_PED_DEFENSIVE_AREA_ATTACHED_TO_PED(Ped ped, Ped attachPed, float p2, float p3, float p4, float p5, float p6, float p7, float p8, BOOL p9, BOOL p10)
 void SET_PED_DEFENSIVE_AREA_DIRECTION(Ped ped, float p1, float p2, float p3, BOOL p4)
 void REMOVE_PED_DEFENSIVE_AREA(Ped ped, BOOL toggle)
 Vector3 GET_PED_DEFENSIVE_AREA_POSITION(Ped ped, BOOL p1)
 BOOL IS_PED_DEFENSIVE_AREA_ACTIVE(Ped ped, BOOL p1)
 void SET_PED_PREFERRED_COVER_SET(Ped ped, Any itemSet)
 void REMOVE_PED_PREFERRED_COVER_SET(Ped ped)
 void REVIVE_INJURED_PED(Ped ped)
 void RESURRECT_PED(Ped ped)
 void SET_PED_NAME_DEBUG(Ped ped, const char* name)
 Vector3 GET_PED_EXTRACTED_DISPLACEMENT(Ped ped, BOOL worldSpace)
 void SET_PED_DIES_WHEN_INJURED(Ped ped, BOOL toggle)
 void SET_PED_ENABLE_WEAPON_BLOCKING(Ped ped, BOOL toggle)
 void _0xF9ACF4A08098EA25(Ped ped, BOOL p1)
 void RESET_PED_VISIBLE_DAMAGE(Ped ped)
 void APPLY_PED_BLOOD_DAMAGE_BY_ZONE(Ped ped, Any p1, float p2, float p3, Any p4)
 void APPLY_PED_BLOOD(Ped ped, int boneIndex, float xRot, float yRot, float zRot, const char* woundType)
 void APPLY_PED_BLOOD_BY_ZONE(Ped ped, Any p1, float p2, float p3, Any* p4)
 void APPLY_PED_BLOOD_SPECIFIC(Ped ped, Any p1, float p2, float p3, float p4, float p5, Any p6, float p7, Any* p8)
 void APPLY_PED_DAMAGE_DECAL(Ped ped, int damageZone, float xOffset, float yOffset, float heading, float scale, float alpha, int variation, BOOL fadeIn, const char* decalName)
 void APPLY_PED_DAMAGE_PACK(Ped ped, const char* damagePack, float damage, float mult)
 void CLEAR_PED_BLOOD_DAMAGE(Ped ped)
 void CLEAR_PED_BLOOD_DAMAGE_BY_ZONE(Ped ped, int p1)
 void HIDE_PED_BLOOD_DAMAGE_BY_ZONE(Ped ped, Any p1, BOOL p2)
 void CLEAR_PED_DAMAGE_DECAL_BY_ZONE(Ped ped, int p1, const char* p2)
 int GET_PED_DECORATIONS_STATE(Ped ped)
 void _0x2B694AFCF64E6994(Ped ped, BOOL p1)
 void CLEAR_PED_WETNESS(Ped ped)
 void SET_PED_WETNESS_HEIGHT(Ped ped, float height)
 void SET_PED_WETNESS_ENABLED_THIS_FRAME(Ped ped)
 void CLEAR_PED_ENV_DIRT(Ped ped)
 void SET_PED_SWEAT(Ped ped, float sweat)
 void ADD_PED_DECORATION_FROM_HASHES(Ped ped, Hash collection, Hash overlay)
 void ADD_PED_DECORATION_FROM_HASHES_IN_CORONA(Ped ped, Hash collection, Hash overlay)
 int GET_PED_DECORATION_ZONE_FROM_HASHES(Hash collection, Hash overlay)
 void CLEAR_PED_DECORATIONS(Ped ped)
 void CLEAR_PED_DECORATIONS_LEAVE_SCARS(Ped ped)
 BOOL WAS_PED_SKELETON_UPDATED(Ped ped)
 Vector3 GET_PED_BONE_COORDS(Ped ped, int boneId, float offsetX, float offsetY, float offsetZ)
 void CREATE_NM_MESSAGE(BOOL startImmediately, int messageId)
 void GIVE_PED_NM_MESSAGE(Ped ped)
 int ADD_SCENARIO_BLOCKING_AREA(float x1, float y1, float z1, float x2, float y2, float z2, BOOL p6, BOOL p7, BOOL p8, BOOL p9)
 void REMOVE_SCENARIO_BLOCKING_AREAS()
 void REMOVE_SCENARIO_BLOCKING_AREA(Any p0, BOOL p1)
 void SET_SCENARIO_PEDS_SPAWN_IN_SPHERE_AREA(float x, float y, float z, float range, int p4)
 BOOL _DOES_SCENARIO_BLOCKING_AREA_EXIST(float x1, float y1, float z1, float x2, float y2, float z2)
 BOOL IS_PED_USING_SCENARIO(Ped ped, const char* scenario)
 BOOL IS_PED_USING_ANY_SCENARIO(Ped ped)
 Any SET_PED_PANIC_EXIT_SCENARIO(Any p0, Any p1, Any p2, Any p3)
 void _0x9A77DFD295E29B09(Any p0, BOOL p1)
 Any _0x25361A96E0F7E419(Any p0, Any p1, Any p2, Any p3)
 Any _0xEC6935EBE0847B90(Any p0, Any p1, Any p2, Any p3)
 void _0xA3A9299C4F2ADB98(Any p0)
 void _0xF1C03A5352243A30(Any p0)
 Any _0xEEED8FAFEC331A70(Any p0, Any p1, Any p2, Any p3)
 void _0x425AECF167663F48(Ped ped, BOOL p1)
 void _0x5B6010B3CBC29095(Any p0, BOOL p1)
 void _0xCEDA60A74219D064(Any p0, BOOL p1)
 void PLAY_FACIAL_ANIM(Ped ped, const char* animName, const char* animDict)
 void _0x5687C7F05B39E401(Ped ped, const char* animDict)
 void SET_FACIAL_IDLE_ANIM_OVERRIDE(Ped ped, const char* animName, const char* animDict)
 void CLEAR_FACIAL_IDLE_ANIM_OVERRIDE(Ped ped)
 void SET_PED_CAN_PLAY_GESTURE_ANIMS(Ped ped, BOOL toggle)
 void SET_PED_CAN_PLAY_VISEME_ANIMS(Ped ped, BOOL toggle, BOOL p2)
 void _SET_PED_CAN_PLAY_INJURED_ANIMS(Ped ped, BOOL p1)
 void SET_PED_CAN_PLAY_AMBIENT_ANIMS(Ped ped, BOOL toggle)
 void SET_PED_CAN_PLAY_AMBIENT_BASE_ANIMS(Ped ped, BOOL toggle)
 void _0xC2EE020F5FB4DB53(Ped ped)
 void SET_PED_CAN_ARM_IK(Ped ped, BOOL toggle)
 void SET_PED_CAN_HEAD_IK(Ped ped, BOOL toggle)
 void SET_PED_CAN_LEG_IK(Ped ped, BOOL toggle)
 void SET_PED_CAN_TORSO_IK(Ped ped, BOOL toggle)
 void SET_PED_CAN_TORSO_REACT_IK(Ped ped, BOOL p1)
 void _0x6647C5F6F5792496(Ped ped, BOOL p1)
 void SET_PED_CAN_USE_AUTO_CONVERSATION_LOOKAT(Ped ped, BOOL toggle)
 BOOL IS_PED_HEADTRACKING_PED(Ped ped1, Ped ped2)
 BOOL IS_PED_HEADTRACKING_ENTITY(Ped ped, Entity entity)
 void SET_PED_PRIMARY_LOOKAT(Ped ped, Ped lookAt)
 void SET_PED_CLOTH_PACKAGE_INDEX(Any p0, Any p1)
 void SET_PED_CLOTH_PRONE(Any p0, Any p1)
 void _0xA660FAF550EB37E5(Any p0, BOOL p1)
 void SET_PED_CONFIG_FLAG(Ped ped, int flagId, BOOL value)
 void SET_PED_RESET_FLAG(Ped ped, int flagId, BOOL doReset)
 BOOL GET_PED_CONFIG_FLAG(Ped ped, int flagId, BOOL p2)
 BOOL GET_PED_RESET_FLAG(Ped ped, int flagId)
 void SET_PED_GROUP_MEMBER_PASSENGER_INDEX(Ped ped, int index)
 void SET_PED_CAN_EVASIVE_DIVE(Ped ped, BOOL toggle)
 BOOL IS_PED_EVASIVE_DIVING(Ped ped, Entity* evadingEntity)
 void SET_PED_SHOOTS_AT_COORD(Ped ped, float x, float y, float z, BOOL toggle)
 void SET_PED_MODEL_IS_SUPPRESSED(Ped ped, BOOL toggle)
 void STOP_ANY_PED_MODEL_BEING_SUPPRESSED()
 void SET_PED_CAN_BE_TARGETED_WHEN_INJURED(Ped ped, BOOL toggle)
 void SET_PED_GENERATES_DEAD_BODY_EVENTS(Ped ped, BOOL toggle)
 void _BLOCK_PED_DEAD_BODY_SHOCKING_EVENTS(Ped ped, BOOL p1)
 void _0x3E9679C1DFCF422C(Any p0, Any p1)
 void SET_PED_CAN_RAGDOLL_FROM_PLAYER_IMPACT(Ped ped, BOOL toggle)
 void GIVE_PED_HELMET(Ped ped, BOOL cannotRemove, int helmetFlag, int textureIndex)
 void REMOVE_PED_HELMET(Ped ped, BOOL instantly)
 BOOL _0x14590DDBEDB1EC85(Ped ped)
 void SET_PED_HELMET(Ped ped, BOOL canWearHelmet)
 void SET_PED_HELMET_FLAG(Ped ped, int helmetFlag)
 void SET_PED_HELMET_PROP_INDEX(Ped ped, int propIndex, BOOL p2)
 void _SET_PED_HELMET_UNK(Ped ped, BOOL p1, int p2, int p3)
 BOOL _IS_PED_HELMET_UNK(Ped ped)
 void SET_PED_HELMET_TEXTURE_INDEX(Ped ped, int textureIndex)
 BOOL IS_PED_WEARING_HELMET(Ped ped)
 void _0x687C0B594907D2E8(Ped ped)
 Any _0x451294E859ECC018(Any p0)
 Any _0x9D728C1E12BF5518(Any p0)
 BOOL _0xF2385935BFFD4D92(Any p0)
 void SET_PED_TO_LOAD_COVER(Ped ped, BOOL toggle)
 void SET_PED_CAN_COWER_IN_COVER(Ped ped, BOOL toggle)
 void SET_PED_CAN_PEEK_IN_COVER(Ped ped, BOOL toggle)
 void SET_PED_PLAYS_HEAD_ON_HORN_ANIM_WHEN_DIES_IN_VEHICLE(Ped ped, BOOL toggle)
 void SET_PED_LEG_IK_MODE(Ped ped, int mode)
 void SET_PED_MOTION_BLUR(Ped ped, BOOL toggle)
 void SET_PED_CAN_SWITCH_WEAPON(Ped ped, BOOL toggle)
 void SET_PED_DIES_INSTANTLY_IN_WATER(Ped ped, BOOL toggle)
 void _0x1A330D297AAC6BC1(Ped ped, int p1)
 void STOP_PED_WEAPON_FIRING_WHEN_DROPPED(Ped ped)
 void SET_SCRIPTED_ANIM_SEAT_OFFSET(Ped ped, float p1)
 void SET_PED_COMBAT_MOVEMENT(Ped ped, int combatMovement)
 int GET_PED_COMBAT_MOVEMENT(Ped ped)
 void SET_PED_COMBAT_ABILITY(Ped ped, int p1)
 void SET_PED_COMBAT_RANGE(Ped ped, int p1)
 int GET_PED_COMBAT_RANGE(Ped ped)
 void SET_PED_COMBAT_ATTRIBUTES(Ped ped, int attributeIndex, BOOL enabled)
 void SET_PED_TARGET_LOSS_RESPONSE(Ped ped, int responseType)
 BOOL IS_PED_PERFORMING_MELEE_ACTION(Ped ped)
 BOOL IS_PED_PERFORMING_STEALTH_KILL(Ped ped)
 BOOL IS_PED_PERFORMING_DEPENDENT_COMBO_LIMIT(Ped ped)
 BOOL IS_PED_BEING_STEALTH_KILLED(Ped ped)
 Ped GET_MELEE_TARGET_FOR_PED(Ped ped)
 BOOL WAS_PED_KILLED_BY_STEALTH(Ped ped)
 BOOL WAS_PED_KILLED_BY_TAKEDOWN(Ped ped)
 BOOL WAS_PED_KNOCKED_OUT(Ped ped)
 void SET_PED_FLEE_ATTRIBUTES(Ped ped, int attributeFlags, BOOL enable)
 void SET_PED_COWER_HASH(Ped ped, const char* p1)
 void _0x2016C603D6B8987C(Ped ped, BOOL toggle)
 void SET_PED_STEERS_AROUND_PEDS(Ped ped, BOOL toggle)
 void SET_PED_STEERS_AROUND_OBJECTS(Ped ped, BOOL toggle)
 void SET_PED_STEERS_AROUND_VEHICLES(Ped ped, BOOL toggle)
 void _0xA9B61A329BFDCBEA(Any p0, BOOL p1)
 void SET_PED_INCREASED_AVOIDANCE_RADIUS(Ped ped)
 void SET_PED_BLOCKS_PATHING_WHEN_DEAD(Ped ped, BOOL toggle)
 void _0xA52D5247A4227E14(Any p0)
 BOOL IS_ANY_PED_NEAR_POINT(float x, float y, float z, float radius)
 void _0x2208438012482A1A(Ped ped, BOOL p1, BOOL p2)
 BOOL IS_PED_HEADING_TOWARDS_POSITION(Ped ped, float x, float y, float z, float p4)
 void REQUEST_PED_VISIBILITY_TRACKING(Ped ped)
 void REQUEST_PED_VEHICLE_VISIBILITY_TRACKING(Ped ped, BOOL p1)
 void _0xCD018C591F94CB43(Ped ped, BOOL p1)
 void _0x75BA1CB3B7D40CAF(Ped ped, BOOL p1)
 BOOL IS_TRACKED_PED_VISIBLE(Ped ped)
 int _0x511F1A683387C7E2(Ped ped)
 BOOL IS_PED_TRACKED(Ped ped)
 BOOL HAS_PED_RECEIVED_EVENT(Ped ped, int eventId)
 BOOL CAN_PED_SEE_HATED_PED(Ped ped1, Ped ped2)
 BOOL _0x9C6A6C19B6C0C496(Ped ped, int* p1)
 BOOL _0x2DFC81C9B9608549(Ped ped, int* p1)
 int GET_PED_BONE_INDEX(Ped ped, int boneId)
 int GET_PED_RAGDOLL_BONE_INDEX(Ped ped, int bone)
 void SET_PED_ENVEFF_SCALE(Ped ped, float value)
 float GET_PED_ENVEFF_SCALE(Ped ped)
 void SET_ENABLE_PED_ENVEFF_SCALE(Ped ped, BOOL toggle)
 void _0x110F526AB784111F(Ped ped, float p1)
 void SET_PED_ENVEFF_COLOR_MODULATOR(Ped ped, int p1, int p2, int p3)
 void _SET_PED_REFLECTION_INTENSITY(Ped ped, float intensity)
 float _GET_PED_REFLECTION_INTENSITY(Ped ped)
 BOOL _IS_PED_SHADER_EFFECT_VALID(Ped ped)
 void _0xE906EC930F5FE7C8(Any p0, Any p1)
 void _0x1216E0BFA72CC703(Any p0, Any p1)
 void _0x2B5AA717A181FB4C(Any p0, BOOL p1)
 BOOL _0xB8B52E498014F5B0(Ped ped)
 int CREATE_SYNCHRONIZED_SCENE(float x, float y, float z, float roll, float pitch, float yaw, int p6)
 int _CREATE_SYNCHRONIZED_SCENE_2(float x, float y, float z, float radius, Hash object)
 BOOL IS_SYNCHRONIZED_SCENE_RUNNING(int sceneId)
 void SET_SYNCHRONIZED_SCENE_ORIGIN(int sceneID, float x, float y, float z, float roll, float pitch, float yaw, BOOL p7)
 void SET_SYNCHRONIZED_SCENE_PHASE(int sceneID, float phase)
 float GET_SYNCHRONIZED_SCENE_PHASE(int sceneID)
 void SET_SYNCHRONIZED_SCENE_RATE(int sceneID, float rate)
 float GET_SYNCHRONIZED_SCENE_RATE(int sceneID)
 void SET_SYNCHRONIZED_SCENE_LOOPED(int sceneID, BOOL toggle)
 BOOL IS_SYNCHRONIZED_SCENE_LOOPED(int sceneID)
 void _SET_SYNCHRONIZED_SCENE_OCCLUSION_PORTAL(Any sceneID, BOOL p1)
 BOOL _0x7F2F4F13AC5257EF(Any p0)
 void ATTACH_SYNCHRONIZED_SCENE_TO_ENTITY(int sceneID, Entity entity, int boneIndex)
 void DETACH_SYNCHRONIZED_SCENE(int sceneID)
 void _DISPOSE_SYNCHRONIZED_SCENE(int scene)
 BOOL FORCE_PED_MOTION_STATE(Ped ped, Hash motionStateHash, BOOL p2, int p3, BOOL p4)
 BOOL _0xF60165E1D2C5370B(Ped ped, Any* p1, Any* p2)
 void SET_PED_MAX_MOVE_BLEND_RATIO(Ped ped, float value)
 void SET_PED_MIN_MOVE_BLEND_RATIO(Ped ped, float value)
 void SET_PED_MOVE_RATE_OVERRIDE(Ped ped, float value)
 void _0x0B3E35AC043707D9(Any p0, Any p1)
 BOOL _0x46B05BCAE43856B0(Ped ped, int flag)
 int GET_PED_NEARBY_VEHICLES(Ped ped, int* sizeAndVehs)
 int GET_PED_NEARBY_PEDS(Ped ped, int* sizeAndPeds, int ignore)
 BOOL _HAS_STREAMED_PED_ASSETS_LOADED(Ped ped)
 BOOL IS_PED_USING_ACTION_MODE(Ped ped)
 void SET_PED_USING_ACTION_MODE(Ped ped, BOOL p1, int p2, const char* action)
 void SET_MOVEMENT_MODE_OVERRIDE(Ped ped, const char* name)
 void SET_PED_CAPSULE(Ped ped, float value)
 int REGISTER_PEDHEADSHOT(Ped ped)
 int _REGISTER_PEDHEADSHOT_3(Ped ped)
 int REGISTER_PEDHEADSHOT_TRANSPARENT(Ped ped)
 void UNREGISTER_PEDHEADSHOT(int id)
 BOOL IS_PEDHEADSHOT_VALID(int id)
 BOOL IS_PEDHEADSHOT_READY(int id)
 const char* GET_PEDHEADSHOT_TXD_STRING(int id)
 BOOL REQUEST_PEDHEADSHOT_IMG_UPLOAD(int id)
 void RELEASE_PEDHEADSHOT_IMG_UPLOAD(int id)
 BOOL IS_PEDHEADSHOT_IMG_UPLOAD_AVAILABLE()
 BOOL HAS_PEDHEADSHOT_IMG_UPLOAD_FAILED()
 BOOL HAS_PEDHEADSHOT_IMG_UPLOAD_SUCCEEDED()
 void SET_PED_HEATSCALE_OVERRIDE(Ped ped, float heatScale)
 void DISABLE_PED_HEATSCALE_OVERRIDE(Any p0)
 void _0x2DF9038C90AD5264(float p0, float p1, float p2, float p3, float p4, int interiorFlags, float scale, int duration)
 void _0xB2AFF10216DEFA2F(float x, float y, float z, float p3, float p4, float p5, float p6, int interiorFlags, float scale, int duration)
 void _0xFEE4A5459472A9F8()
 Any _0x3C67506996001F5E()
 Any _0xA586FBEB32A53DBB()
 Any _0xF445DE8DA80A1792()
 Any _0xA635C11B8C44AFC2()
 void _0x280C7E3AC7F56E90(Any p0, Any* p1, Any* p2, Any* p3)
 void _0xB782F8238512BAD5(Any p0, Any* p1)
 void SET_IK_TARGET(Ped ped, int ikIndex, Entity entityLookAt, int boneLookAt, float offsetX, float offsetY, float offsetZ, Any p7, int blendInDuration, int blendOutDuration)
 void _0xED3C76ADFA6D07C4(Ped ped)
 void REQUEST_ACTION_MODE_ASSET(const char* asset)
 BOOL HAS_ACTION_MODE_ASSET_LOADED(const char* asset)
 void REMOVE_ACTION_MODE_ASSET(const char* asset)
 void REQUEST_STEALTH_MODE_ASSET(const char* asset)
 BOOL HAS_STEALTH_MODE_ASSET_LOADED(const char* asset)
 void REMOVE_STEALTH_MODE_ASSET(const char* asset)
 void SET_PED_LOD_MULTIPLIER(Ped ped, float multiplier)
 void _0xE861D0B05C7662B8(Ped ped, BOOL p1, int p2)
 void SET_FORCE_FOOTSTEP_UPDATE(Ped ped, BOOL toggle)
 void SET_FORCE_STEP_TYPE(Ped ped, BOOL p1, int type, int p3)
 BOOL IS_ANY_HOSTILE_PED_NEAR_POINT(Ped ped, float x, float y, float z, float radius)
 void _0x820E9892A77E97CD(Any p0, Any p1)
 BOOL _0x06087579E7AA85A9(Any p0, Any p1, float p2, float p3, float p4, float p5)
 void SET_POP_CONTROL_SPHERE_THIS_FRAME(Any p0, Any p1, Any p2, Any p3, Any p4)
 void _0xD33DAA36272177C4(Ped ped)
 void _0x711794453CFD692B(Any p0, Any p1)
 void _0x83A169EABCDB10A2(Any p0, Any p1)
 void _0x288DF530C92DAD6F(Any p0, float p1)
 BOOL _0x3795688A307E1EB6(Ped Ped)
 void _0x0F62619393661D6E(Any p0, Any p1, Any p2)
 void _0xDFE68C4B787E1BFB(Any p0)
 void _SET_ENABLE_SCUBA_GEAR_LIGHT(Ped ped, BOOL toggle)
 BOOL _IS_SCUBA_GEAR_LIGHT_ENABLED(Ped ped)
 void _0x637822DC2AFEEBF8(Any p0)
 void _0xFAB944D4D481ACCB(Ped ped, BOOL toggle)
}

namespace PHYSICS
{
 int ADD_ROPE(float x, float y, float z, float rotX, float rotY, float rotZ, float length, int ropeType, float maxLength, float minLength, float p10, BOOL p11, BOOL p12, BOOL rigid, float p14, BOOL breakWhenShot, Any* unkPtr)
 void DELETE_ROPE(int* ropeId)
 void DELETE_CHILD_ROPE(int ropeId)
 BOOL DOES_ROPE_EXIST(int* ropeId)
 void ROPE_DRAW_SHADOW_ENABLED(int* ropeId, BOOL toggle)
 void LOAD_ROPE_DATA(int ropeId, const char* rope_preset)
 void PIN_ROPE_VERTEX(int ropeId, int vertex, float x, float y, float z)
 void UNPIN_ROPE_VERTEX(int ropeId, int vertex)
 int GET_ROPE_VERTEX_COUNT(int ropeId)
 void ATTACH_ENTITIES_TO_ROPE(int ropeId, Entity ent1, Entity ent2, float ent1_x, float ent1_y, float ent1_z, float ent2_x, float ent2_y, float ent2_z, float length, BOOL p10, BOOL p11, Any* p12, Any* p13)
 void ATTACH_ROPE_TO_ENTITY(int ropeId, Entity entity, float x, float y, float z, BOOL p5)
 void DETACH_ROPE_FROM_ENTITY(int ropeId, Entity entity)
 void ROPE_SET_UPDATE_PINVERTS(int ropeId)
 void ROPE_SET_UPDATE_ORDER(int ropeId, Any p1)
 void _0x36CCB9BE67B970FD(int ropeId, BOOL p1)
 BOOL _0x84DE3B5FB3E666F0(int* ropeId)
 Vector3 GET_ROPE_LAST_VERTEX_COORD(int ropeId)
 Vector3 GET_ROPE_VERTEX_COORD(int ropeId, int vertex)
 void START_ROPE_WINDING(int ropeId)
 void STOP_ROPE_WINDING(int ropeId)
 void START_ROPE_UNWINDING_FRONT(int ropeId)
 void STOP_ROPE_UNWINDING_FRONT(int ropeId)
 void ROPE_CONVERT_TO_SIMPLE(int ropeId)
 void ROPE_LOAD_TEXTURES()
 BOOL ROPE_ARE_TEXTURES_LOADED()
 void ROPE_UNLOAD_TEXTURES()
 BOOL _DOES_ROPE_BELONG_TO_THIS_SCRIPT(int ropeId)
 void _0xBC0CE682D4D05650(int ropeId, int p1, float p2, float p3, float p4, float p5, float p6, float p7, float p8, float p9, float p10, float p11, float p12, float p13)
 void _0xB1B6216CA2E7B55E(Any p0, BOOL p1, BOOL p2)
 void _0xB743F735C03D7810(int ropeId, int p1)
 float ROPE_GET_DISTANCE_BETWEEN_ENDS(int ropeId)
 void ROPE_FORCE_LENGTH(int ropeId, float length)
 void ROPE_RESET_LENGTH(int ropeId, float length)
 void APPLY_IMPULSE_TO_CLOTH(float posX, float posY, float posZ, float vecX, float vecY, float vecZ, float impulse)
 void SET_DAMPING(Entity entity, int vertex, float value)
 void ACTIVATE_PHYSICS(Entity entity)
 void SET_CGOFFSET(Entity entity, float x, float y, float z)
 Vector3 GET_CGOFFSET(Entity entity)
 void SET_CG_AT_BOUNDCENTER(Entity entity)
 void BREAK_ENTITY_GLASS(Entity entity, float p1, float p2, float p3, float p4, float p5, float p6, float p7, float p8, Any p9, BOOL p10)
 BOOL _GET_HAS_OBJECT_FRAG_INST(Object object)
 void SET_DISABLE_BREAKING(Object object, BOOL toggle)
 void _0xCC6E963682533882(Object object)
 void SET_DISABLE_FRAG_DAMAGE(Object object, BOOL toggle)
 void _SET_ENTITY_PROOF_UNK(Entity entity, BOOL toggle)
 void _0x9EBD751E5787BAF2(BOOL p0)
 void _0xAA6A6098851C396F(BOOL p0)
}

namespace PLAYER
{
 Ped GET_PLAYER_PED(Player player)
 Ped GET_PLAYER_PED_SCRIPT_INDEX(Player player)
 void SET_PLAYER_MODEL(Player player, Hash model)
 void CHANGE_PLAYER_PED(Player player, Ped ped, BOOL p2, BOOL resetDamage)
 void GET_PLAYER_RGB_COLOUR(Player player, int* r, int* g, int* b)
 int GET_NUMBER_OF_PLAYERS()
 int GET_PLAYER_TEAM(Player player)
 void SET_PLAYER_TEAM(Player player, int team)
 int _GET_NUMBER_OF_PLAYERS_IN_TEAM(int team)
 const char* GET_PLAYER_NAME(Player player)
 float GET_WANTED_LEVEL_RADIUS(Player player)
 Vector3 GET_PLAYER_WANTED_CENTRE_POSITION(Player player)
 void SET_PLAYER_WANTED_CENTRE_POSITION(Player player, Vector3* position, BOOL p2, BOOL p3)
 int GET_WANTED_LEVEL_THRESHOLD(int wantedLevel)
 void SET_PLAYER_WANTED_LEVEL(Player player, int wantedLevel, BOOL disableNoMission)
 void SET_PLAYER_WANTED_LEVEL_NO_DROP(Player player, int wantedLevel, BOOL p2)
 void SET_PLAYER_WANTED_LEVEL_NOW(Player player, BOOL p1)
 BOOL ARE_PLAYER_FLASHING_STARS_ABOUT_TO_DROP(Player player)
 BOOL ARE_PLAYER_STARS_GREYED_OUT(Player player)
 Any _0x7E07C78925D5FD96(Any p0)
 void SET_DISPATCH_COPS_FOR_PLAYER(Player player, BOOL toggle)
 BOOL IS_PLAYER_WANTED_LEVEL_GREATER(Player player, int wantedLevel)
 void CLEAR_PLAYER_WANTED_LEVEL(Player player)
 BOOL IS_PLAYER_DEAD(Player player)
 BOOL IS_PLAYER_PRESSING_HORN(Player player)
 void SET_PLAYER_CONTROL(Player player, BOOL bHasControl, int flags)
 int GET_PLAYER_WANTED_LEVEL(Player player)
 void SET_MAX_WANTED_LEVEL(int maxWantedLevel)
 void SET_POLICE_RADAR_BLIPS(BOOL toggle)
 void SET_POLICE_IGNORE_PLAYER(Player player, BOOL toggle)
 BOOL IS_PLAYER_PLAYING(Player player)
 void SET_EVERYONE_IGNORE_PLAYER(Player player, BOOL toggle)
 void SET_ALL_RANDOM_PEDS_FLEE(Player player, BOOL toggle)
 void SET_ALL_RANDOM_PEDS_FLEE_THIS_FRAME(Player player)
 void _0xDE45D1A1EF45EE61(Player player, BOOL toggle)
 void _0xC3376F42B1FACCC6(Player player)
 void _0xFAC75988A7D078D3(Player player)
 void SET_IGNORE_LOW_PRIORITY_SHOCKING_EVENTS(Player player, BOOL toggle)
 void SET_WANTED_LEVEL_MULTIPLIER(float multiplier)
 void SET_WANTED_LEVEL_DIFFICULTY(Player player, float difficulty)
 void RESET_WANTED_LEVEL_DIFFICULTY(Player player)
 void START_FIRING_AMNESTY(int duration)
 void REPORT_CRIME(Player player, int crimeType, int wantedLvlThresh)
 void _SWITCH_CRIME_TYPE(Player player, int p1)
 void _0xBC9490CA15AEA8FB(Player player)
 void _0x4669B3ED80F24B4E(Player player)
 void _0x2F41A3BAE005E5FA(Any p0, Any p1)
 void _0xAD73CE5A09E42D12(Player player)
 void _0x36F1B38855F2A8DF(Player player)
 void _0xDC64D2C53493ED12(Player player)
 void _0xB45EFF719D8427A6(float p0)
 void _0x0032A6DBA562C518()
 BOOL CAN_PLAYER_START_MISSION(Player player)
 BOOL IS_PLAYER_READY_FOR_CUTSCENE(Player player)
 BOOL IS_PLAYER_TARGETTING_ENTITY(Player player, Entity entity)
 BOOL GET_PLAYER_TARGET_ENTITY(Player player, Entity* entity)
 BOOL IS_PLAYER_FREE_AIMING(Player player)
 BOOL IS_PLAYER_FREE_AIMING_AT_ENTITY(Player player, Entity entity)
 BOOL GET_ENTITY_PLAYER_IS_FREE_AIMING_AT(Player player, Entity* entity)
 void SET_PLAYER_LOCKON_RANGE_OVERRIDE(Player player, float range)
 void SET_PLAYER_CAN_DO_DRIVE_BY(Player player, BOOL toggle)
 void SET_PLAYER_CAN_BE_HASSLED_BY_GANGS(Player player, BOOL toggle)
 void SET_PLAYER_CAN_USE_COVER(Player player, BOOL toggle)
 int GET_MAX_WANTED_LEVEL()
 BOOL IS_PLAYER_TARGETTING_ANYTHING(Player player)
 void SET_PLAYER_SPRINT(Player player, BOOL toggle)
 void RESET_PLAYER_STAMINA(Player player)
 void RESTORE_PLAYER_STAMINA(Player player, float p1)
 float GET_PLAYER_SPRINT_STAMINA_REMAINING(Player player)
 float GET_PLAYER_SPRINT_TIME_REMAINING(Player player)
 float GET_PLAYER_UNDERWATER_TIME_REMAINING(Player player)
 Any _0xA0D3E4F7AAFB7E78(Any p0, Any p1)
 int GET_PLAYER_GROUP(Player player)
 int GET_PLAYER_MAX_ARMOUR(Player player)
 BOOL IS_PLAYER_CONTROL_ON(Player player)
 BOOL _IS_PLAYER_CAM_CONTROL_DISABLED()
 BOOL IS_PLAYER_SCRIPT_CONTROL_ON(Player player)
 BOOL IS_PLAYER_CLIMBING(Player player)
 BOOL IS_PLAYER_BEING_ARRESTED(Player player, BOOL atArresting)
 void RESET_PLAYER_ARREST_STATE(Player player)
 Vehicle GET_PLAYERS_LAST_VEHICLE()
 Player GET_PLAYER_INDEX()
 Player INT_TO_PLAYERINDEX(int value)
 int INT_TO_PARTICIPANTINDEX(int value)
 int GET_TIME_SINCE_PLAYER_HIT_VEHICLE(Player player)
 int GET_TIME_SINCE_PLAYER_HIT_PED(Player player)
 int GET_TIME_SINCE_PLAYER_DROVE_ON_PAVEMENT(Player player)
 int GET_TIME_SINCE_PLAYER_DROVE_AGAINST_TRAFFIC(Player player)
 BOOL IS_PLAYER_FREE_FOR_AMBIENT_TASK(Player player)
 Player PLAYER_ID()
 Ped PLAYER_PED_ID()
 int NETWORK_PLAYER_ID_TO_INT()
 BOOL HAS_FORCE_CLEANUP_OCCURRED(int cleanupFlags)
 void FORCE_CLEANUP(int cleanupFlags)
 void FORCE_CLEANUP_FOR_ALL_THREADS_WITH_THIS_NAME(const char* name, int cleanupFlags)
 void FORCE_CLEANUP_FOR_THREAD_WITH_THIS_ID(int id, int cleanupFlags)
 int GET_CAUSE_OF_MOST_RECENT_FORCE_CLEANUP()
 void SET_PLAYER_MAY_ONLY_ENTER_THIS_VEHICLE(Player player, Vehicle vehicle)
 void SET_PLAYER_MAY_NOT_ENTER_ANY_VEHICLE(Player player)
 BOOL GIVE_ACHIEVEMENT_TO_PLAYER(int achievement)
 BOOL _SET_ACHIEVEMENT_PROGRESS(int achievement, int progress)
 int _GET_ACHIEVEMENT_PROGRESS(int achievement)
 BOOL HAS_ACHIEVEMENT_BEEN_PASSED(int achievement)
 BOOL IS_PLAYER_ONLINE()
 BOOL IS_PLAYER_LOGGING_IN_NP()
 void DISPLAY_SYSTEM_SIGNIN_UI(BOOL unk)
 BOOL IS_SYSTEM_UI_BEING_DISPLAYED()
 void SET_PLAYER_INVINCIBLE(Player player, BOOL toggle)
 BOOL GET_PLAYER_INVINCIBLE(Player player)
 void _SET_PLAYER_INVINCIBLE_KEEP_RAGDOLL_ENABLED(Player player, BOOL toggle)
 void _0xCAC57395B151135F(Player player, BOOL p1)
 void REMOVE_PLAYER_HELMET(Player player, BOOL p2)
 void GIVE_PLAYER_RAGDOLL_CONTROL(Player player, BOOL toggle)
 void SET_PLAYER_LOCKON(Player player, BOOL toggle)
 void SET_PLAYER_TARGETING_MODE(int targetMode)
 void SET_PLAYER_TARGET_LEVEL(int targetLevel)
 BOOL _0xB9CF1F793A9F1BF1()
 BOOL _0xCB645E85E97EA48B()
 void CLEAR_PLAYER_HAS_DAMAGED_AT_LEAST_ONE_PED(Player player)
 BOOL HAS_PLAYER_DAMAGED_AT_LEAST_ONE_PED(Player player)
 void CLEAR_PLAYER_HAS_DAMAGED_AT_LEAST_ONE_NON_ANIMAL_PED(Player player)
 BOOL HAS_PLAYER_DAMAGED_AT_LEAST_ONE_NON_ANIMAL_PED(Player player)
 void SET_AIR_DRAG_MULTIPLIER_FOR_PLAYERS_VEHICLE(Player player, float multiplier)
 void SET_SWIM_MULTIPLIER_FOR_PLAYER(Player player, float multiplier)
 void SET_RUN_SPRINT_MULTIPLIER_FOR_PLAYER(Player player, float multiplier)
 int GET_TIME_SINCE_LAST_ARREST()
 int GET_TIME_SINCE_LAST_DEATH()
 void ASSISTED_MOVEMENT_CLOSE_ROUTE()
 void ASSISTED_MOVEMENT_FLUSH_ROUTE()
 void SET_PLAYER_FORCED_AIM(Player player, BOOL toggle)
 void SET_PLAYER_FORCED_ZOOM(Player player, BOOL toggle)
 void SET_PLAYER_FORCE_SKIP_AIM_INTRO(Player player, BOOL toggle)
 void DISABLE_PLAYER_FIRING(Player player, BOOL toggle)
 void _0xB885852C39CC265D()
 void SET_DISABLE_AMBIENT_MELEE_MOVE(Player player, BOOL toggle)
 void SET_PLAYER_MAX_ARMOUR(Player player, int value)
 void _SPECIAL_ABILITY_ACTIVATE(Any p0)
 void _SET_SPECIAL_ABILITY(Player player, int p1)
 void _SPECIAL_ABILITY_DEPLETE(Any p0)
 void SPECIAL_ABILITY_DEACTIVATE(Player player)
 void SPECIAL_ABILITY_DEACTIVATE_FAST(Player player)
 void SPECIAL_ABILITY_RESET(Player player)
 void SPECIAL_ABILITY_CHARGE_ON_MISSION_FAILED(Player player)
 void SPECIAL_ABILITY_CHARGE_SMALL(Player player, BOOL p1, BOOL p2)
 void SPECIAL_ABILITY_CHARGE_MEDIUM(Player player, BOOL p1, BOOL p2)
 void SPECIAL_ABILITY_CHARGE_LARGE(Player player, BOOL p1, BOOL p2)
 void SPECIAL_ABILITY_CHARGE_CONTINUOUS(Player player, Ped p2)
 void SPECIAL_ABILITY_CHARGE_ABSOLUTE(Player player, int p1, BOOL p2)
 void SPECIAL_ABILITY_CHARGE_NORMALIZED(Player player, float normalizedValue, BOOL p2)
 void SPECIAL_ABILITY_FILL_METER(Player player, BOOL p1)
 void SPECIAL_ABILITY_DEPLETE_METER(Player player, BOOL p1)
 void SPECIAL_ABILITY_LOCK(Hash playerModel)
 void SPECIAL_ABILITY_UNLOCK(Hash playerModel)
 BOOL IS_SPECIAL_ABILITY_UNLOCKED(Hash playerModel)
 BOOL IS_SPECIAL_ABILITY_ACTIVE(Player player)
 BOOL IS_SPECIAL_ABILITY_METER_FULL(Player player)
 void ENABLE_SPECIAL_ABILITY(Player player, BOOL toggle)
 BOOL IS_SPECIAL_ABILITY_ENABLED(Player player)
 void SET_SPECIAL_ABILITY_MULTIPLIER(float multiplier)
 void _0xFFEE8FA29AB9A18E(Player player)
 BOOL _0x5FC472C501CCADB3(Player player)
 BOOL _0xF10B44FD479D69F3(Player player, int p1)
 BOOL _0xDD2620B7B9D16FF1(Player player, float p1)
 void START_PLAYER_TELEPORT(Player player, float x, float y, float z, float heading, BOOL p5, BOOL p6, BOOL p7)
 BOOL _HAS_PLAYER_TELEPORT_FINISHED(Player player)
 void STOP_PLAYER_TELEPORT()
 BOOL IS_PLAYER_TELEPORT_ACTIVE()
 float GET_PLAYER_CURRENT_STEALTH_NOISE(Player player)
 void SET_PLAYER_HEALTH_RECHARGE_MULTIPLIER(Player player, float regenRate)
 float _GET_PLAYER_HEALTH_RECHARGE_LIMIT(Player player)
 void _SET_PLAYER_HEALTH_RECHARGE_LIMIT(Player player, float limit)
 void _SET_PLAYER_FALL_DISTANCE(Any p0, Any p1)
 void SET_PLAYER_WEAPON_DAMAGE_MODIFIER(Player player, float modifier)
 void SET_PLAYER_WEAPON_DEFENSE_MODIFIER(Player player, float modifier)
 void _SET_PLAYER_WEAPON_DEFENSE_MODIFIER_2(Player player, float modifier)
 void SET_PLAYER_MELEE_WEAPON_DAMAGE_MODIFIER(Player player, float modifier, BOOL p2)
 void SET_PLAYER_MELEE_WEAPON_DEFENSE_MODIFIER(Player player, float modifier)
 void SET_PLAYER_VEHICLE_DAMAGE_MODIFIER(Player player, float modifier)
 void SET_PLAYER_VEHICLE_DEFENSE_MODIFIER(Player player, float modifier)
 void _0x8D768602ADEF2245(Player player, float p1)
 void _0xD821056B9ACF8052(Any p0, Any p1)
 void _0x31E90B8873A4CD3B(Any p0, Any p1)
 void SET_PLAYER_PARACHUTE_TINT_INDEX(Player player, int tintIndex)
 void GET_PLAYER_PARACHUTE_TINT_INDEX(Player player, int* tintIndex)
 void SET_PLAYER_RESERVE_PARACHUTE_TINT_INDEX(Player player, int index)
 void GET_PLAYER_RESERVE_PARACHUTE_TINT_INDEX(Player player, int* index)
 void SET_PLAYER_PARACHUTE_PACK_TINT_INDEX(Player player, int tintIndex)
 void GET_PLAYER_PARACHUTE_PACK_TINT_INDEX(Player player, int* tintIndex)
 void SET_PLAYER_HAS_RESERVE_PARACHUTE(Player player)
 BOOL GET_PLAYER_HAS_RESERVE_PARACHUTE(Player player)
 void SET_PLAYER_CAN_LEAVE_PARACHUTE_SMOKE_TRAIL(Player player, BOOL enabled)
 void SET_PLAYER_PARACHUTE_SMOKE_TRAIL_COLOR(Player player, int r, int g, int b)
 void GET_PLAYER_PARACHUTE_SMOKE_TRAIL_COLOR(Player player, int* r, int* g, int* b)
 void SET_PLAYER_RESET_FLAG_PREFER_REAR_SEATS(Player player, int flags)
 void SET_PLAYER_NOISE_MULTIPLIER(Player player, float multiplier)
 void SET_PLAYER_SNEAKING_NOISE_MULTIPLIER(Player player, float multiplier)
 BOOL CAN_PED_HEAR_PLAYER(Player player, Ped ped)
 void SIMULATE_PLAYER_INPUT_GAIT(Player player, float amount, int gaitType, float speed, BOOL p4, BOOL p5)
 void RESET_PLAYER_INPUT_GAIT(Player player)
 void SET_AUTO_GIVE_PARACHUTE_WHEN_ENTER_PLANE(Player player, BOOL toggle)
 void SET_AUTO_GIVE_SCUBA_GEAR_WHEN_EXIT_VEHICLE(Player player, BOOL toggle)
 void SET_PLAYER_STEALTH_PERCEPTION_MODIFIER(Player player, float value)
 BOOL _0x690A61A6D13583F6(Player player)
 void _0x9EDD76E87D5D51BA(Player player)
 void SET_PLAYER_SIMULATE_AIMING(Player player, BOOL toggle)
 void SET_PLAYER_CLOTH_PIN_FRAMES(Player player, BOOL toggle)
 void SET_PLAYER_CLOTH_PACKAGE_INDEX(int index)
 void SET_PLAYER_CLOTH_LOCK_COUNTER(int value)
 void PLAYER_ATTACH_VIRTUAL_BOUND(float p0, float p1, float p2, float p3, float p4, float p5, float p6, float p7)
 void PLAYER_DETACH_VIRTUAL_BOUND()
 BOOL HAS_PLAYER_BEEN_SPOTTED_IN_STOLEN_VEHICLE(Player player)
 BOOL IS_PLAYER_BATTLE_AWARE(Player player)
 BOOL _0xBC0753C9CA14B506(Player player, int p1, BOOL p2)
 void EXTEND_WORLD_BOUNDARY_FOR_PLAYER(float x, float y, float z)
 void RESET_WORLD_BOUNDARY_FOR_PLAYER()
 BOOL IS_PLAYER_RIDING_TRAIN(Player player)
 BOOL HAS_PLAYER_LEFT_THE_WORLD(Player player)
 void SET_PLAYER_LEAVE_PED_BEHIND(Player player, BOOL toggle)
 void SET_PLAYER_PARACHUTE_VARIATION_OVERRIDE(Player player, int p1, Any p2, Any p3, BOOL p4)
 void CLEAR_PLAYER_PARACHUTE_VARIATION_OVERRIDE(Player player)
 void SET_PLAYER_PARACHUTE_MODEL_OVERRIDE(Player player, Hash model)
 void CLEAR_PLAYER_PARACHUTE_MODEL_OVERRIDE(Player player)
 void SET_PLAYER_PARACHUTE_PACK_MODEL_OVERRIDE(Player player, Hash model)
 void CLEAR_PLAYER_PARACHUTE_PACK_MODEL_OVERRIDE(Player player)
 void DISABLE_PLAYER_VEHICLE_REWARDS(Player player)
 void _0x2F7CEB6520288061(BOOL p0)
 void SET_PLAYER_BLUETOOTH_STATE(Player player, BOOL state)
 BOOL IS_PLAYER_BLUETOOTH_ENABLE(Player player)
 void _0x5501B7A5CDB79D37(Player player)
 int GET_PLAYER_FAKE_WANTED_LEVEL(Player player)
 void _0x55FCC0C390620314(Any p0, Any p1, Any p2)
 void _0x2382AB11450AE7BA(Any p0, Any p1)
 Any _0x6E4361FF3E8CD7CA(Any p0)
 void _0x237440E46D918649(Any p0)
 void _SET_PLAYER_HOMING_ROCKET_DISABLED(Any p0, Any p1)
 void _0x7BAE68775557AE0B(Any p0, Any p1, Any p2, Any p3, Any p4, Any p5)
 void _0x7148E0F43D11F0D9()
 void _0x70A382ADEC069DD3(Any p0, Any p1, Any p2)
}

namespace RECORDING
{
 void _0x48621C9FCA3EBD28(int p0)
 void _0x81CBAE94390F9F89()
 void _0x13B350B8AD0EEE10()
 void _0x293220DA1B46CEBC(float p0, float p1, int p2)
 void _0x208784099002BC30(const char* missionNameLabel, Any p1)
 void _STOP_RECORDING_THIS_FRAME()
 void _0xF854439EFBB3B583()
 void _DISABLE_ROCKSTAR_EDITOR_CAMERA_CHANGES()
 void _0x66972397E0757E7A(int p0, int p1, int p2)
 void _START_RECORDING(int mode)
 void _STOP_RECORDING_AND_SAVE_CLIP()
 void _STOP_RECORDING_AND_DISCARD_CLIP()
 BOOL _SAVE_RECORDING_CLIP()
 BOOL _IS_RECORDING()
 Any _0xDF4B952F7D381B95()
 Any _0x4282E08174868BE3()
 BOOL _0x33D47E85B476ABCD(BOOL p0)
}

namespace REPLAY
{
 void _0x7E2BD3EF6C205F09(const char* p0, BOOL p1)
 BOOL _IS_INTERIOR_RENDERING_DISABLED()
 void _0x5AD3932DAEB1E5D3()
 void _0xE058175F8EAFE79A(BOOL p0)
 void _RESET_EDITOR_VALUES()
 void _ACTIVATE_ROCKSTAR_EDITOR()
}

namespace SCRIPT
{
 void REQUEST_SCRIPT(const char* scriptName)
 void SET_SCRIPT_AS_NO_LONGER_NEEDED(const char* scriptName)
 BOOL HAS_SCRIPT_LOADED(const char* scriptName)
 BOOL DOES_SCRIPT_EXIST(const char* scriptName)
 void REQUEST_SCRIPT_WITH_NAME_HASH(Hash scriptHash)
 void SET_SCRIPT_WITH_NAME_HASH_AS_NO_LONGER_NEEDED(Hash scriptHash)
 BOOL HAS_SCRIPT_WITH_NAME_HASH_LOADED(Hash scriptHash)
 BOOL DOES_SCRIPT_WITH_NAME_HASH_EXIST(Hash scriptHash)
 void TERMINATE_THREAD(int threadId)
 BOOL IS_THREAD_ACTIVE(int threadId)
 const char* _GET_NAME_OF_THREAD(int threadId)
 void SCRIPT_THREAD_ITERATOR_RESET()
 int SCRIPT_THREAD_ITERATOR_GET_NEXT_THREAD_ID()
 int GET_ID_OF_THIS_THREAD()
 void TERMINATE_THIS_THREAD()
 int _GET_NUMBER_OF_REFERENCES_OF_SCRIPT_WITH_NAME_HASH(Hash scriptHash)
 const char* GET_THIS_SCRIPT_NAME()
 Hash GET_HASH_OF_THIS_SCRIPT_NAME()
 int GET_NUMBER_OF_EVENTS(int eventGroup)
 BOOL GET_EVENT_EXISTS(int eventGroup, int eventIndex)
 int GET_EVENT_AT_INDEX(int eventGroup, int eventIndex)
 BOOL GET_EVENT_DATA(int eventGroup, int eventIndex, int* argStruct, int argStructSize)
 void TRIGGER_SCRIPT_EVENT(int eventGroup, int* args, int argCount, int bit)
 void SHUTDOWN_LOADING_SCREEN()
 void SET_NO_LOADING_SCREEN(BOOL toggle)
 BOOL GET_NO_LOADING_SCREEN()
 void _0xB1577667C3708F9B()
 BOOL _0x836B62713E0534CA()
 void _0x760910B49D2B98EA()
 void BG_START_CONTEXT_HASH(Hash contextHash)
 void BG_END_CONTEXT_HASH(Hash contextHash)
 void BG_START_CONTEXT(const char* contextName)
 void BG_END_CONTEXT(const char* contextName)
 BOOL _0x0F6F1EBBC4E1D5E6(int scriptIndex, const char* p1)
 int _0x22E21FBCFC88C149(int scriptIndex, const char* p1)
 int _0x829CD22E043A2577(Hash p0)
 void _TRIGGER_SCRIPT_EVENT_2(int eventGroup, int* args, int argCount, int bit)
}

namespace SHAPETEST
{
 int START_SHAPE_TEST_LOS_PROBE(float x1, float y1, float z1, float x2, float y2, float z2, int flags, Entity entity, int p8)
 int _START_SHAPE_TEST_RAY(float x1, float y1, float z1, float x2, float y2, float z2, int flags, Entity entity, int p8)
 int START_SHAPE_TEST_BOUNDING_BOX(Entity entity, int flags1, int flags2)
 int START_SHAPE_TEST_BOX(float x, float y, float z, float x1, float y2, float z2, float rotX, float rotY, float rotZ, Any p9, Any p10, Any entity, Any p12)
 int START_SHAPE_TEST_BOUND(Entity entity, int flags1, int flags2)
 int START_SHAPE_TEST_CAPSULE(float x1, float y1, float z1, float x2, float y2, float z2, float radius, int flags, Entity entity, int p9)
 int START_SHAPE_TEST_SWEPT_SPHERE(float x1, float y1, float z1, float x2, float y2, float z2, float radius, int flags, Entity entity, Any p9)
 int _START_SHAPE_TEST_SURROUNDING_COORDS(Vector3* pVec1, Vector3* pVec2, int flag, Entity entity, int flag2)
 int GET_SHAPE_TEST_RESULT(int rayHandle, BOOL* hit, Vector3* endCoords, Vector3* surfaceNormal, Entity* entityHit)
 int GET_SHAPE_TEST_RESULT_INCLUDING_MATERIAL(int rayHandle, BOOL* hit, Vector3* endCoords, Vector3* surfaceNormal, Hash* materialHash, Entity* entityHit)
 void _SHAPE_TEST_RESULT_ENTITY(Entity entityHit)
}

namespace SOCIALCLUB
{
 int _GET_TOTAL_SC_INBOX_IDS()
 Hash _SC_INBOX_MESSAGE_INIT(int p0)
 BOOL _IS_SC_INBOX_VALID(int p0)
 BOOL _SC_INBOX_MESSAGE_POP(int p0)
 BOOL SC_INBOX_MESSAGE_GET_DATA_INT(int p0, const char* context, int* out)
 BOOL _SC_INBOX_MESSAGE_GET_DATA_BOOL(int p0, const char* p1)
 BOOL SC_INBOX_MESSAGE_GET_DATA_STRING(int p0, const char* context, char* out)
 BOOL SC_INBOX_MESSAGE_DO_APPLY(int p0)
 const char* _SC_INBOX_MESSAGE_GET_STRING(int p0)
 void _SC_INBOX_MESSAGE_PUSH_GAMER_TO_EVENT_RECIP_LIST(int* networkHandle)
 void _SC_INBOX_MESSAGE_SEND_UGC_STAT_UPDATE_EVENT(Any* data)
 BOOL SC_INBOX_MESSAGE_GET_UGCDATA(Any p0, Any* p1)
 BOOL _SC_INBOX_MESSAGE_SEND_BOUNTY_PRESENCE_EVENT(Any* data)
 BOOL _SC_INBOX_MESSAGE_GET_BOUNTY_DATA(int index, Any* outData)
 void _SC_INBOX_GET_EMAILS(int offset, int limit)
 Any _0x16DA8172459434AA()
 Any _0x7DB18CA8CAD5B098()
 BOOL _0x4737980E8A283806(int p0, Any* p1)
 void _0x44ACA259D67651DB(Any* p0, Any p1)
 void SC_EMAIL_MESSAGE_PUSH_GAMER_TO_RECIP_LIST(int* networkHandle)
 void SC_EMAIL_MESSAGE_CLEAR_RECIP_LIST()
 void _0x116FB94DC4B79F17(const char* p0)
 Any _0x07DBD622D9533857(Any p0)
 void _SET_HANDLE_ROCKSTAR_MESSAGE_VIA_SCRIPT(BOOL toggle)
 BOOL _IS_ROCKSTAR_MESSAGE_READY_FOR_SCRIPT()
 const char* _ROCKSTAR_MESSAGE_GET_STRING()
 BOOL _0x1F1E9682483697C7(Any p0, Any p1)
 Any _0xC4C4575F62534A24()
 BOOL _0x287F1F75D2803595(Any p0, Any* p1)
 BOOL _0x487912FD248EFDDF(Any p0, float p1)
 Any _0xC85A7127E7AD02AA()
 Any _0xA770C8EEC6FB2AC5()
 BOOL _SC_GET_IS_PROFILE_ATTRIBUTE_SET(const char* name)
 Any _0x7FFCBFEE44ECFABF()
 Any _0x2D874D4AE612A65F()
 BOOL SC_PROFANITY_CHECK_STRING(const char* string, int* token)
 BOOL _SC_PROFANITY_CHECK_UGC_STRING(const char* string, int* token)
 BOOL SC_PROFANITY_GET_CHECK_IS_VALID(int token)
 BOOL SC_PROFANITY_GET_CHECK_IS_PENDING(int token)
 BOOL SC_PROFANITY_GET_STRING_PASSED(int token)
 int SC_PROFANITY_GET_STRING_STATUS(int token)
 BOOL _0xF6BAAAF762E1BF40(const char* p0, int* p1)
 BOOL _0xF22CA0FD74B80E7A(Any p0)
 Any _0x9237E334F6E43156(Any p0)
 Any _0x700569DBA175A77C(Any p0)
 Any _0x1D4446A62D35B0D0(Any p0, Any p1)
 Any _0x2E89990DDFF670C3(Any p0, Any p1)
 BOOL _0xD0EE05FE193646EA(Any* p0, Any* p1, Any* p2)
 BOOL _0x1989C6E6F67E76A8(Any* p0, Any* p1, Any* p2)
 Any _0x07C61676E5BB52CD(Any p0)
 Any _0x8147FFF6A718E1AD(Any p0)
 BOOL _0x0F73393BAC7E6730(Any* p0, int* p1)
 Any _0xD302E99EDF0449CF(Any p0)
 Any _0x5C4EBFFA98BDB41C(Any p0)
 Any _0xFF8F3A92B75ED67A()
 Any _0x4ED9C8D6DA297639()
 Any _0x710BCDA8071EDED1()
 Any _0x50A8A36201DBF83E()
 Any _0x9DE5D2F723575ED0()
 Any _0xC2C97EA97711D1AE()
 Any _0x450819D8CF90C416()
 Any _0x4A7D6E727F941747(Any* p0)
 Any _0xE75A4A2E5E316D86()
 Any _0x2570E26BE63964E3()
 Any _0x1D12A56FC95BE92E()
 Any _0x33DF47CC0642061B()
 Any _0xA468E0BE12B12C70()
 BOOL _0x8CC469AB4D349B7C(int p0, const char* p1, Any* p2)
 Any _0xC5A35C73B68F3C49()
 BOOL _0x699E4A5C8C893A18(int p0, const char* p1, Any* p2)
 BOOL _0x19853B5B17D77BCA(Any p0, Any* p1)
 BOOL _0x6BFB12CE158E3DD4(Any p0)
 BOOL _0xFE4C1D0D3B9CC17E(Any p0, Any p1)
 Any _0xD8122C407663B995()
 BOOL _0x3001BEF2FECA3680()
 BOOL _0x92DA6E70EF249BD1(const char* p0, int* p1)
 void _0x675721C9F644D161()
 Any _0xE4F6E8D07A2F0F51(Any p0)
 Any _0x8A4416C0DB05FA66(Any p0)
 void _0xEA95C0853A27888E()
 const char* _SC_GET_NICKNAME()
 BOOL _0x225798743970412B(int* p0)
 BOOL _SC_GET_HAS_ACHIEVEMENT_BEEN_PASSED(int achievement)
}

namespace STATS
{
 Any STAT_CLEAR_SLOT_FOR_RELOAD(int statSlot)
 BOOL STAT_LOAD(int p0)
 BOOL STAT_SAVE(int p0, BOOL p1, int p2)
 void _0x5688585E6D563CD8(int p0)
 BOOL STAT_LOAD_PENDING(Any p0)
 BOOL STAT_SAVE_PENDING()
 BOOL STAT_SAVE_PENDING_OR_REQUESTED()
 Any STAT_DELETE_SLOT(Any p0)
 BOOL STAT_SLOT_IS_LOADED(Any p0)
 BOOL _0x7F2C4CDF2E82DF4C(Any p0)
 Any _0xE496A53BA5F50A56(Any p0)
 void _0xF434A10BA01C37D0(BOOL toggle)
 BOOL _0x7E6946F68A38B74F(Any p0)
 void _0xA8733668D1047B51(Any p0)
 BOOL _0xECB41AC6AB754401()
 void _0x9B4BD21D69B1E609()
 Any _0xC0E0D686DDFC6EAE()
 BOOL STAT_SET_INT(Hash statName, int value, BOOL save)
 BOOL STAT_SET_FLOAT(Hash statName, float value, BOOL save)
 BOOL STAT_SET_BOOL(Hash statName, BOOL value, BOOL save)
 BOOL STAT_SET_GXT_LABEL(Hash statName, const char* value, BOOL save)
 BOOL STAT_SET_DATE(Hash statName, Any* value, int numFields, BOOL save)
 BOOL STAT_SET_STRING(Hash statName, const char* value, BOOL save)
 BOOL STAT_SET_POS(Hash statName, float x, float y, float z, BOOL save)
 BOOL STAT_SET_MASKED_INT(Hash statName, Any p1, Any p2, int p3, BOOL save)
 BOOL STAT_SET_USER_ID(Hash statName, const char* value, BOOL save)
 BOOL STAT_SET_CURRENT_POSIX_TIME(Hash statName, BOOL p1)
 BOOL STAT_GET_INT(Hash statHash, int* outValue, int p2)
 BOOL STAT_GET_FLOAT(Hash statHash, float* outValue, Any p2)
 BOOL STAT_GET_BOOL(Hash statHash, BOOL* outValue, Any p2)
 BOOL STAT_GET_DATE(Hash statHash, Any* p1, Any p2, Any p3)
 const char* STAT_GET_STRING(Hash statHash, int p1)
 BOOL STAT_GET_POS(Any p0, Any* p1, Any* p2, Any* p3, Any p4)
 BOOL STAT_GET_MASKED_INT(Any p0, Any* p1, Any p2, Any p3, Any p4)
 const char* STAT_GET_USER_ID(Any p0)
 const char* STAT_GET_LICENSE_PLATE(Hash statName)
 BOOL STAT_SET_LICENSE_PLATE(Hash statName, const char* str)
 void STAT_INCREMENT(Hash statName, float value)
 BOOL _0x5A556B229A169402()
 BOOL _0xB1D2BB1E1631F5B1()
 BOOL _0xBED9F5693F34ED17(Hash statName, int p1, float* outValue)
 void _0x26D7399B9587FE89(int p0)
 void _0xA78B8FA58200DA56(int p0)
 int STAT_GET_NUMBER_OF_DAYS(Hash statName)
 int STAT_GET_NUMBER_OF_HOURS(Hash statName)
 int STAT_GET_NUMBER_OF_MINUTES(Hash statName)
 int STAT_GET_NUMBER_OF_SECONDS(Hash statName)
 void STAT_SET_PROFILE_SETTING_VALUE(int profileSetting, int value)
 int _0xF4D8E7AC2A27758C(int p0)
 int _0x94F12ABF9C79E339(int p0)
 Hash GET_PACKED_BOOL_STAT_KEY(int index, BOOL spStat, BOOL charStat, int character)
 Hash GET_PACKED_INT_STAT_KEY(int index, BOOL spStat, BOOL charStat, int character)
 Hash _GET_PACKED_TITLE_UPDATE_BOOL_STAT_KEY(int index, BOOL spStat, BOOL charStat, int character)
 Hash _GET_PACKED_TITLE_UPDATE_INT_STAT_KEY(int index, BOOL spStat, BOOL charStat, int character)
 Hash _GET_NGSTAT_BOOL_HASH(int index, BOOL spStat, BOOL charStat, int character, const char* section)
 Hash _GET_NGSTAT_INT_HASH(int index, BOOL spStat, BOOL charStat, int character, const char* section)
 BOOL STAT_GET_BOOL_MASKED(Hash statName, int mask, int p2)
 BOOL STAT_SET_BOOL_MASKED(Hash statName, BOOL value, int mask, BOOL save)
 void PLAYSTATS_BACKGROUND_SCRIPT_ACTION(const char* action, int value)
 void PLAYSTATS_NPC_INVITE(Any* p0)
 void PLAYSTATS_AWARD_XP(int amount, Hash type, Hash category)
 void PLAYSTATS_RANK_UP(int rank)
 void _PLAYSTATS_START_OFFLINE_MODE()
 void _0xA071E0ED98F91286(Any p0, Any p1)
 void _0xC5BE134EC7BA96A0(Any p0, Any p1, Any p2, Any p3, Any p4)
 void PLAYSTATS_MISSION_STARTED(Any* p0, Any p1, Any p2, BOOL p3)
 void PLAYSTATS_MISSION_OVER(Any* p0, Any p1, Any p2, BOOL p3, BOOL p4, BOOL p5)
 void PLAYSTATS_MISSION_CHECKPOINT(Any* p0, Any p1, Any p2, Any p3)
 void PLAYSTATS_RANDOM_MISSION_DONE(const char* name, Any p1, Any p2, Any p3)
 void PLAYSTATS_ROS_BET(int amount, int act, Player player, float cm)
 void PLAYSTATS_RACE_CHECKPOINT(Any p0, Any p1, Any p2, Any p3, Any p4)
 BOOL _0x6DEE77AFF8C21BD1(int* playerAccountId, int* posixTime)
 void PLAYSTATS_MATCH_STARTED(Any p0, Any p1, Any p2)
 void PLAYSTATS_SHOP_ITEM(Any p0, Any p1, Any p2, Any p3, Any p4)
 void _PLAYSTATS_CRATE_DROP(Any p0, Any p1, Any p2, Any p3, Any p4, Any p5, Any p6, Any p7)
 void _PLAYSTATS_CRATE_CREATED(float p0, float p1, float p2)
 void _PLAYSTATS_HOLD_UP(Any p0, Any p1, Any p2, Any p3)
 void _PLAYSTATS_IMP_EXP(Any p0, Any p1, Any p2, Any p3)
 void _PLAYSTATS_RACE_TO_POINT(Any p0, Any p1, Any p2, Any p3, Any p4, Any p5, Any p6, Any p7, Any p8, Any p9)
 void PLAYSTATS_ACQUIRED_HIDDEN_PACKAGE(Any p0)
 void PLAYSTATS_WEBSITE_VISITED(Hash scaleformHash, int p1)
 void PLAYSTATS_FRIEND_ACTIVITY(Any p0, Any p1)
 void PLAYSTATS_ODDJOB_DONE(Any p0, Any p1, Any p2)
 void PLAYSTATS_PROP_CHANGE(Any p0, Any p1, Any p2, Any p3)
 void PLAYSTATS_CLOTH_CHANGE(Any p0, Any p1, Any p2, Any p3, Any p4)
 void PLAYSTATS_WEAPON_MODE_CHANGE(Hash weaponHash, Hash componentHashTo, Hash componentHashFrom)
 void PLAYSTATS_CHEAT_APPLIED(const char* cheat)
 void _0xF8C54A461C3E11DC(Any* p0, Any* p1, Any* p2, Any* p3)
 void _0xF5BB8DAC426A52C0(Any* p0, Any* p1, Any* p2, Any* p3)
 void _0xA736CF7FB7C5BFF4(Any* p0, Any* p1, Any* p2, Any* p3)
 void _0x14E0B2D1AD1044E0(Any* p0, Any* p1, Any* p2, Any* p3)
 void PLAYSTATS_QUICKFIX_TOOL(int element, const char* item)
 void PLAYSTATS_IDLE_KICK(int time)
 void _0xD1032E482629049E(int p0)
 void _PLAYSTATS_HEIST_SAVE_CHEAT(Hash hash, int p1)
 void _PLAYSTATS_DIRECTOR_MODE(Any* p0)
 void _PLAYSTATS_AWARD_BADSPORT(int id)
 void _PLAYSTATS_PEGASAIRCRAFT(Hash modelHash)
 void _0x6A60E43998228229(Any p0)
 void _0xBFAFDB5FAAA5C5AB(Any p0)
 void _0x8C9D11605E59D955(Any p0)
 void _0x3DE3AA516FB126A4(Any p0)
 void _0xBAA2F0490E146BE8(Any p0)
 void _0x1A7CE7CD3E653485(Any p0)
 void _0x419615486BBF1956(Any p0)
 void _0x84DFC579C2FC214C(Any p0)
 void _0x0A9C7F36E5D7B683(Any p0)
 void _0x164C5FF663790845(Any p0)
 void _0xEDBF6C9B0D2C65C8(Any p0)
 void _0x6551B1F7F6CD46EA(Any p0)
 void _0x2CD90358F67D0AA8(Any p0)
 void _PLAYSTATS_PI_MENU_HIDE_SETTINGS(Any* data)
 Any LEADERBOARDS_GET_NUMBER_OF_COLUMNS(Any p0, Any p1)
 Any LEADERBOARDS_GET_COLUMN_ID(Any p0, Any p1, Any p2)
 Any LEADERBOARDS_GET_COLUMN_TYPE(Any p0, Any p1, Any p2)
 Any LEADERBOARDS_READ_CLEAR_ALL()
 Any LEADERBOARDS_READ_CLEAR(Any p0, Any p1, Any p2)
 BOOL LEADERBOARDS_READ_PENDING(Any p0, Any p1, Any p2)
 BOOL LEADERBOARDS_READ_ANY_PENDING()
 BOOL LEADERBOARDS_READ_SUCCESSFUL(Any p0, Any p1, Any p2)
 BOOL LEADERBOARDS2_READ_FRIENDS_BY_ROW(Any* p0, Any* p1, Any p2, BOOL p3, Any p4, Any p5)
 BOOL LEADERBOARDS2_READ_BY_HANDLE(Any* p0, Any* p1)
 BOOL LEADERBOARDS2_READ_BY_ROW(Any* p0, Any* p1, Any p2, Any* p3, Any p4, Any* p5, Any p6)
 BOOL LEADERBOARDS2_READ_BY_RANK(Any* p0, Any p1, Any p2)
 BOOL LEADERBOARDS2_READ_BY_RADIUS(Any* p0, Any p1, Any* p2)
 BOOL LEADERBOARDS2_READ_BY_SCORE_INT(Any* p0, Any p1, Any p2)
 BOOL LEADERBOARDS2_READ_BY_SCORE_FLOAT(Any* p0, float p1, Any p2)
 BOOL LEADERBOARDS2_READ_RANK_PREDICTION(Any* p0, Any* p1, Any* p2)
 BOOL _LEADERBOARDS2_READ_BY_PLATFORM(Any* p0, const char* gamerHandleCsv, const char* platformName)
 BOOL _0xA0F93D5465B3094D(Any* p0)
 void _0x71B008056E5692D6()
 BOOL _0x34770B9CE0E03B91(Any p0, Any* p1)
 Any _0x88578F6EC36B4A3A(Any p0, Any p1)
 float _0x38491439B6BA7F7D(Any p0, Any p1)
 BOOL LEADERBOARDS2_WRITE_DATA(Any* p0)
 void LEADERBOARDS_WRITE_ADD_COLUMN(Any p0, Any p1, float p2)
 void LEADERBOARDS_WRITE_ADD_COLUMN_LONG(Any p0, Any p1, Any p2)
 BOOL LEADERBOARDS_CACHE_DATA_ROW(Any* p0)
 void LEADERBOARDS_CLEAR_CACHE_DATA()
 void _0x8EC74CEB042E7CFF(Any p0)
 BOOL LEADERBOARDS_GET_CACHE_EXISTS(Any p0)
 Any LEADERBOARDS_GET_CACHE_TIME(Any p0)
 int LEADERBOARDS_GET_CACHE_NUMBER_OF_ROWS(Any p0)
 BOOL LEADERBOARDS_GET_CACHE_DATA_ROW(Any p0, Any p1, Any* p2)
 void _UPDATE_STAT_INT(Hash statHash, int value, int p2)
 void _UPDATE_STAT_FLOAT(Hash statHash, float value, int p2)
 void _0x6483C25849031C4F(Any p0, Any p1, Any p2, Any* p3)
 BOOL _0x5EAD2BF6484852E4()
 void _0xC141B8917E0017EC()
 void _0xB475F27C6A994D65()
 void _0xC67E2DA1CBE759E2()
 void _0xF1A1803D3476F215(int value)
 void _0x38BAAA5DD4C9D19F(int value)
 void _0x55384438FC55AD8E(int value)
 void _0x723C1CE13FBFDB67(Any p0, Any p1)
 void _0x0D01D20616FC73FB(Any p0, Any p1)
 void _0x428EAF89E24F6C36(Any p0, float p1)
 void _0x047CBED6F6F8B63C()
 BOOL LEADERBOARDS2_WRITE_DATA_FOR_EVENT_TYPE(Any* p0, Any* p1)
 void _0x6F361B8889A792A3()
 void _0xC847B43F369AC0B5()
 BOOL _STAT_MIGRATE_SAVE(const char* platformName)
 int _0x9A62EC95AE10E011()
 Any _0x4C89FE2BDEB3F169()
 Any _0xC6E0E2616A7576BB()
 Any _0x5BD5F255321C4AAF(Any p0)
 Any _0xDEAAF77EB3687E97(Any p0, Any* p1)
 BOOL STAT_SAVE_MIGRATION_STATUS_START()
 int STAT_GET_SAVE_MIGRATION_STATUS(Any* data)
 BOOL _STAT_SAVE_MIGRATION_CANCEL()
 int _STAT_GET_CANCEL_SAVE_MIGRATION_STATUS()
 BOOL _STAT_SAVE_MIGRATION_CONSUME_CONTENT_UNLOCK(Hash contentId, const char* srcPlatform, const char* srcGamerHandle)
 int _STAT_GET_SAVE_MIGRATION_CONSUME_CONTENT_UNLOCK_STATUS(int* p0)
 void _0x98E2BC1CA26287C3()
 void _0x629526ABA383BCAA()
 Any _0xBE3DB208333D9844()
 Any _0x33D72899E24C3365(Any p0, Any p1)
 Any _0xA761D4AC6115623D()
 Any _0xF11F01D98113536A(Any p0)
 Any _0x8B9CDBD6C566C38C()
 Any _0xE8853FBCE7D8D0D6()
 Any _0xA943FD1722E11EFD()
 Any _0x84A810B375E69C0E()
 Any _0x9EC8858184CD253A()
 Any _0xBA9749CC94C1FD85()
 Any _0x55A8BECAF28A4EB7()
 Any _0x32CAC93C9DE73D32()
 Any _0xAFF47709F1D5DCCE()
 Any _0x6E0A5253375C4584()
 Any _0x1A8EA222F9C67DBB(Any p0)
 Any _0xF9F2922717B819EC()
 Any _0x0B8B7F74BF061C6D()
 BOOL _0xB3DA2606774A8E2D()
 void _SET_HAS_CONTENT_UNLOCKS_FLAGS(int value)
 void _SET_SAVE_MIGRATION_TRANSACTION_ID(int transactionId)
 void _0x6BC0ACD0673ACEBE(Any p0, Any p1, Any p2)
 void _0x8D8ADB562F09A245(Any p0)
 void _0xD1A1EE3B4FA8E760(Any p0)
 void _0x88087EE1F28024AE(Any p0)
 void _0xFCC228E07217FCAC(Any p0)
 void _0x678F86D8FC040BDB(Any p0)
 void _0xA6F54BB2FFCA35EA(Any p0)
 void _0x5FF2C33B13A02A11(Any p0)
 void _0x282B6739644F4347(Any p0)
 void _0xF06A6F41CB445443(Any p0)
 void _0x7B18DA61F6BAE9D5(Any p0)
 void _0x06EAF70AE066441E(Any p0)
 void _0x14EDA9EE27BD1626(Any p0)
 void _0x930F504203F561C9(Any p0)
 void _0xE3261D791EB44ACB(Any p0)
 void _0x73001E34F85137F8(Any p0)
 void _0x53CAE13E9B426993(Any p0)
 void _0x7D36291161859389(Any p0)
 void _PLAYSTATS_SPENT_PI_CUSTOM_LOADOUT(int amount)
 void _0xD6781E42755531F7(Any p0)
 void _0xC729991A9065376E(Any p0)
 void _0x2605663BD4F23B5D(Any p0)
 void _0x04D90BA8207ADA2D(Any p0)
 void _0x60EEDC12AF66E846(Any p0)
 void _0x3EBEAC6C3F81F6BD(Any p0)
 void _0x96E6D5150DBF1C09(Any p0, Any p1, Any p2)
 void _0xA3C53804BDB68ED2(Any p0, Any p1)
 void _0x6BCCF9948492FD85(Any p0, Any p1, Any p2, Any p3, Any p4)
 void _HIRED_LIMO(Any p0, Any p1)
 void _ORDERED_BOSS_VEHICLE(Any p0, Any p1, Hash vehicleHash)
 void _0xD1C9B92BDD3F151D(Any p0, Any p1, Any p2)
 void _0x44919CC079BB60BF(Any p0)
 void _0x7033EEFD9B28088E(Any p0)
 void _0xAA525DFF66BB82F5(Any p0, Any p1, Any p2)
 void _0x015B03EE1C43E6EC(Any p0)
 void _PLAYSTATS_STUNT_PERFORMED_EVENT_ALLOW_TRIGGER()
 void _PLAYSTATS_STUNT_PERFORMED_EVENT_DISALLOW_TRIGGER()
 void _0xBF371CD2B64212FD(Any p0)
 void _0x7D8BA05688AD64C7(Any p0)
 void _0x0B565B0AAE56A0E8(Any p0, Any p1, Any p2, Any p3, Any p4, Any p5, Any p6)
 void _0x28ECB8AC2F607DB2(Any p0, Any p1, Any p2, Any p3, Any p4)
 void _PLAYSTATS_CHANGE_MC_EMBLEM(Any p0, Any p1, Any p2, Any p3, Any p4)
 void _0xCC25A4553DFBF9EA(Any p0, Any p1, Any p2, Any p3, Any p4)
 void _0xF534D94DFA2EAD26(Any p0, Any p1, Any p2, Any p3, Any p4)
 void _0xD558BEC0BBA7E8D2(Any p0, Any p1, Any p2, Any p3, Any p4)
 void _PLAYSTATS_EARNED_MC_POINTS(Any p0, Any p1, Any p2, Any p3, Any p4, Any p5)
 void _0x03C2EEBB04B3FB72(Any p0, Any p1, Any p2, Any p3, Any p4, Any p5, Any p6)
 void _0x8989CBD7B4E82534(Any p0, Any p1, Any p2, Any p3, Any p4, Any p5, Any p6)
 void _0x27AA1C973CACFE63(Any p0, Any p1, Any p2, Any p3, Any p4, Any p5, Any p6, Any p7, Any p8, Any p9)
 void _PLAYSTATS_COPY_RANK_INTO_NEW_SLOT(Any p0, Any p1, Any p2, Any p3, Any p4, Any p5, Any p6)
 void _PLAYSTATS_DUPE_DETECTION(Any* data)
 void _PLAYSTATS_BAN_ALERT(int p0)
 void _PLAYSTATS_GUNRUN_MISSION_ENDED(Any* data)
 void _0xDAF80797FC534BEC(Any p0)
 void _0x316DB59CD14C1774(Any p0)
 void _0x2D7A9B577E72385E(Any p0)
 void _0x830C3A44EB3F2CF9(Any p0)
 void _0xB26F670685631727(Any p0)
 void _0xC14BD9F5337219B2(Any p0)
 void _PLAYSTATS_STONE_HATCHET_END(Any* data)
 void _PLAYSTATS_SMUG_MISSION_ENDED(Any* data)
 void _PLAYSTATS_H2_FMPREP_END(Any* data)
 void _PLAYSTATS_H2_INSTANCE_END(Any* data, Any p1, Any p2, Any p3)
 void _PLAYSTATS_DAR_MISSION_END(Any* data)
 void _PLAYSTATS_ENTER_SESSION_PACK(Any* data)
 void _PLAYSTATS_DRONE_USAGE(int p0, int p1, int p2)
 void _PLAYSTATS_SPECTATOR_WHEEL_SPIN(int p0, int p1, int p2, int p3)
 void _PLAYSTATS_ARENA_WAR_SPECTATOR(int p0, int p1, int p2, int p3, int p4)
 void _PLAYSTATS_ARENA_WARS_ENDED(Any* data)
 void _PLAYSTATS_PASSIVE_MODE(BOOL p0, int p1, int p2, int p3)
 void _PLAYSTATS_COLLECTIBLE(Any p0, Any p1, Any p2, Any p3, Any p4, Any p5, Any p6, Any p7, Any p8, Any p9)
 void _PLAYSTATS_CASINO_STORY_MISSION_ENDED(Any p0, Any p1)
 void _PLAYSTATS_CASINO_CHIP(Any p0)
 void _PLAYSTATS_CASINO_ROULETTE(Any p0)
 void _PLAYSTATS_CASINO_BLACKJACK(Any p0)
 void _PLAYSTATS_CASINO_THREECARDPOKER(Any p0)
 void _PLAYSTATS_CASINO_SLOTMACHINE(Any p0)
 void _PLAYSTATS_CASINO_INSIDETRACK(Any p0)
 void _PLAYSTATS_CASINO_LUCKYSEVEN(Any p0)
 void _PLAYSTATS_CASINO_ROULETTE_LIGHT(Any p0)
 void _PLAYSTATS_CASINO_BLACKJACK_LIGHT(Any p0)
 void _PLAYSTATS_CASINO_THREECARDPOKER_LIGHT(Any p0)
 void _PLAYSTATS_CASINO_SLOTMACHINE_LIGHT(Any p0)
 void _PLAYSTATS_CASINO_INSIDETRACK_LIGHT(Any p0)
 void _PLAYSTATS_ARCADEGAME(Any p0, Any p1, Any p2, Any p3, Any p4, Any p5)
 void _PLAYSTATS_CASINO_MISSION_ENDED(Any* data)
}

namespace STREAMING
{
 void LOAD_ALL_OBJECTS_NOW()
 void LOAD_SCENE(float x, float y, float z)
 BOOL NETWORK_UPDATE_LOAD_SCENE()
 BOOL IS_NETWORK_LOADING_SCENE()
 void SET_INTERIOR_ACTIVE(int interiorID, BOOL toggle)
 void REQUEST_MODEL(Hash model)
 void REQUEST_MENU_PED_MODEL(Hash model)
 BOOL HAS_MODEL_LOADED(Hash model)
 void REQUEST_MODELS_IN_ROOM(Interior interior, const char* roomName)
 void SET_MODEL_AS_NO_LONGER_NEEDED(Hash model)
 BOOL IS_MODEL_IN_CDIMAGE(Hash model)
 BOOL IS_MODEL_VALID(Hash model)
 BOOL IS_MODEL_A_PED(Hash model)
 BOOL IS_MODEL_A_VEHICLE(Hash model)
 void REQUEST_COLLISION_AT_COORD(float x, float y, float z)
 void REQUEST_COLLISION_FOR_MODEL(Hash model)
 BOOL HAS_COLLISION_FOR_MODEL_LOADED(Hash model)
 void REQUEST_ADDITIONAL_COLLISION_AT_COORD(float x, float y, float z)
 BOOL DOES_ANIM_DICT_EXIST(const char* animDict)
 void REQUEST_ANIM_DICT(const char* animDict)
 BOOL HAS_ANIM_DICT_LOADED(const char* animDict)
 void REMOVE_ANIM_DICT(const char* animDict)
 void REQUEST_ANIM_SET(const char* animSet)
 BOOL HAS_ANIM_SET_LOADED(const char* animSet)
 void REMOVE_ANIM_SET(const char* animSet)
 void REQUEST_CLIP_SET(const char* clipSet)
 BOOL HAS_CLIP_SET_LOADED(const char* clipSet)
 void REMOVE_CLIP_SET(const char* clipSet)
 void REQUEST_IPL(const char* iplName)
 void REMOVE_IPL(const char* iplName)
 BOOL IS_IPL_ACTIVE(const char* iplName)
 void SET_STREAMING(BOOL toggle)
 void SET_GAME_PAUSES_FOR_STREAMING(BOOL toggle)
 void SET_REDUCE_PED_MODEL_BUDGET(BOOL toggle)
 void SET_REDUCE_VEHICLE_MODEL_BUDGET(BOOL toggle)
 void SET_DITCH_POLICE_MODELS(BOOL toggle)
 int GET_NUMBER_OF_STREAMING_REQUESTS()
 void REQUEST_PTFX_ASSET()
 BOOL HAS_PTFX_ASSET_LOADED()
 void REMOVE_PTFX_ASSET()
 void REQUEST_NAMED_PTFX_ASSET(const char* fxName)
 BOOL HAS_NAMED_PTFX_ASSET_LOADED(const char* fxName)
 void REMOVE_NAMED_PTFX_ASSET(const char* fxName)
 void SET_VEHICLE_POPULATION_BUDGET(int p0)
 void SET_PED_POPULATION_BUDGET(int p0)
 void CLEAR_FOCUS()
 void SET_FOCUS_POS_AND_VEL(float x, float y, float z, float offsetX, float offsetY, float offsetZ)
 void SET_FOCUS_ENTITY(Entity entity)
 BOOL IS_ENTITY_FOCUS(Entity entity)
 void _0x0811381EF5062FEC(Entity p0)
 void SET_MAPDATACULLBOX_ENABLED(const char* name, BOOL toggle)
 void _0x4E52E752C76E7E7A(Any p0)
 Any FORMAT_FOCUS_HEADING(float x, float y, float z, float rad, Any p4, Any p5)
 Any _0x1F3F018BC3AFA77C(float p0, float p1, float p2, float p3, float p4, float p5, float p6, Any p7, Any p8)
 Any _0x0AD9710CEE2F590F(float p0, float p1, float p2, float p3, float p4, float p5, Any p6)
 void _0x1EE7D8DF4425F053(Any p0)
 Any _0x7D41E9D2D17C5B2D(Any p0)
 Any _0x07C313F94746702C(Any p0)
 Any _0xBC9823AB80A3DCAC()
 BOOL NEW_LOAD_SCENE_START(float p0, float p1, float p2, float p3, float p4, float p5, float p6, Any p7)
 BOOL NEW_LOAD_SCENE_START_SPHERE(float x, float y, float z, float radius, Any p4)
 void NEW_LOAD_SCENE_STOP()
 BOOL IS_NEW_LOAD_SCENE_ACTIVE()
 BOOL IS_NEW_LOAD_SCENE_LOADED()
 Any _0x71E7B2E657449AAD()
 void START_PLAYER_SWITCH(Ped from, Ped to, int flags, int switchType)
 void STOP_PLAYER_SWITCH()
 BOOL IS_PLAYER_SWITCH_IN_PROGRESS()
 int GET_PLAYER_SWITCH_TYPE()
 int GET_IDEAL_PLAYER_SWITCH_TYPE(float x1, float y1, float z1, float x2, float y2, float z2)
 int GET_PLAYER_SWITCH_STATE()
 int GET_PLAYER_SHORT_SWITCH_STATE()
 void _0x5F2013F8BC24EE69(int p0)
 int GET_PLAYER_SWITCH_JUMP_CUT_INDEX()
 void SET_PLAYER_SWITCH_OUTRO(float p0, float p1, float p2, float p3, float p4, float p5, float p6, float p7, Any p8)
 void SET_PLAYER_SWITCH_ESTABLISHING_SHOT(const char* name)
 void _0x43D1680C6D19A8E9()
 void _0x74DE2E8739086740()
 void _0x8E2A065ABDAE6994()
 void _0xAD5FDF34B81BFE79()
 BOOL IS_SWITCH_READY_FOR_DESCENT()
 void ENABLE_SWITCH_PAUSE_BEFORE_DESCENT()
 void DISABLE_SWITCH_OUTRO_FX()
 void _SWITCH_OUT_PLAYER(Ped ped, int flags, int unknown)
 void _SWITCH_IN_PLAYER(Ped ped)
 BOOL _0x933BBEEB8C61B5F4()
 int GET_PLAYER_SWITCH_INTERP_OUT_DURATION()
 Any _0x5B48A06DD0E792A5()
 BOOL IS_SWITCH_SKIPPING_DESCENT()
 void _0x1E9057A74FD73E23()
 float _0x0C15B0E443B2349D()
 void _0xA76359FC80B2438E(float p0)
 void _0xBED8CA5FF5E04113(float p0, float p1, float p2, float p3)
 void _0x472397322E92A856()
 void _0x40AEFD1A244741F2(BOOL p0)
 void _0x03F1A106BDA7DD3E()
 void _0x95A7DABDDBB78AE7(const char* iplName1, const char* iplName2)
 void _0x63EB2B972A218CAC()
 BOOL _0xFB199266061F820A()
 void _0xF4A0DADB70F57FA6()
 Any _0x5068F488DDB54DD8()
 void PREFETCH_SRL(const char* srl)
 BOOL IS_SRL_LOADED()
 void BEGIN_SRL()
 void END_SRL()
 void SET_SRL_TIME(float p0)
 void _0xEF39EE20C537E98C(Any p0, Any p1, Any p2, Any p3, Any p4, Any p5)
 void _0xBEB2D9A1D9A8F55A(Any p0, Any p1, Any p2, Any p3)
 void _0x20C6C7E4EB082A7F(BOOL p0)
 void _0xF8155A7F03DDFC8E(Any p0)
 void SET_HD_AREA(float x, float y, float z, float radius)
 void CLEAR_HD_AREA()
 void INIT_CREATOR_BUDGET()
 void SHUTDOWN_CREATOR_BUDGET()
 BOOL ADD_MODEL_TO_CREATOR_BUDGET(Hash modelHash)
 void REMOVE_MODEL_FROM_CREATOR_BUDGET(Hash modelHash)
 float _GET_USED_CREATOR_MODEL_MEMORY_PERCENTAGE()
}

namespace TASK
{
 void TASK_PAUSE(Ped ped, int ms)
 void TASK_STAND_STILL(Ped ped, int time)
 void TASK_JUMP(Ped ped, BOOL unused, Any p2, Any p3)
 void TASK_COWER(Ped ped, int duration)
 void TASK_HANDS_UP(Ped ped, int duration, Ped facingPed, int p3, BOOL p4)
 void UPDATE_TASK_HANDS_UP_DURATION(Ped ped, int duration)
 void TASK_OPEN_VEHICLE_DOOR(Ped ped, Vehicle vehicle, int timeOut, int doorIndex, float speed)
 void TASK_ENTER_VEHICLE(Ped ped, Vehicle vehicle, int timeout, int seat, float speed, int flag, Any p6)
 void TASK_LEAVE_VEHICLE(Ped ped, Vehicle vehicle, int flags)
 void TASK_GET_OFF_BOAT(Ped ped, Vehicle boat)
 void TASK_SKY_DIVE(Ped ped, BOOL p1)
 void TASK_PARACHUTE(Ped ped, BOOL p1, BOOL p2)
 void TASK_PARACHUTE_TO_TARGET(Ped ped, float x, float y, float z)
 void SET_PARACHUTE_TASK_TARGET(Ped ped, float x, float y, float z)
 void SET_PARACHUTE_TASK_THRUST(Ped ped, float thrust)
 void TASK_RAPPEL_FROM_HELI(Ped ped, float p1)
 void TASK_VEHICLE_DRIVE_TO_COORD(Ped ped, Vehicle vehicle, float x, float y, float z, float speed, Any p6, Hash vehicleModel, int drivingMode, float stopRange, float p10)
 void TASK_VEHICLE_DRIVE_TO_COORD_LONGRANGE(Ped ped, Vehicle vehicle, float x, float y, float z, float speed, int driveMode, float stopRange)
 void TASK_VEHICLE_DRIVE_WANDER(Ped ped, Vehicle vehicle, float speed, int drivingStyle)
 void TASK_FOLLOW_TO_OFFSET_OF_ENTITY(Ped ped, Entity entity, float offsetX, float offsetY, float offsetZ, float movementSpeed, int timeout, float stoppingRange, BOOL persistFollowing)
 void TASK_GO_STRAIGHT_TO_COORD(Ped ped, float x, float y, float z, float speed, int timeout, float targetHeading, float distanceToSlide)
 void TASK_GO_STRAIGHT_TO_COORD_RELATIVE_TO_ENTITY(Entity entity1, Entity entity2, float p2, float p3, float p4, float p5, Any p6)
 void TASK_ACHIEVE_HEADING(Ped ped, float heading, int timeout)
 void TASK_FLUSH_ROUTE()
 void TASK_EXTEND_ROUTE(float x, float y, float z)
 void TASK_FOLLOW_POINT_ROUTE(Ped ped, float speed, int unknown)
 void TASK_GO_TO_ENTITY(Entity entity, Entity target, int duration, float distance, float speed, float p5, int p6)
 void TASK_SMART_FLEE_COORD(Ped ped, float x, float y, float z, float distance, int time, BOOL p6, BOOL p7)
 void TASK_SMART_FLEE_PED(Ped ped, Ped fleeTarget, float distance, Any fleeTime, BOOL p4, BOOL p5)
 void TASK_REACT_AND_FLEE_PED(Ped ped, Ped fleeTarget)
 void TASK_SHOCKING_EVENT_REACT(Ped ped, int eventHandle)
 void TASK_WANDER_IN_AREA(Ped ped, float x, float y, float z, float radius, float minimalLength, float timeBetweenWalks)
 void TASK_WANDER_STANDARD(Ped ped, float p1, int p2)
 void TASK_VEHICLE_PARK(Ped ped, Vehicle vehicle, float x, float y, float z, float heading, int mode, float radius, BOOL keepEngineOn)
 void TASK_STEALTH_KILL(Ped killer, Ped target, Hash actionType, float p3, Any p4)
 void TASK_PLANT_BOMB(Ped ped, float x, float y, float z, float heading)
 void TASK_FOLLOW_NAV_MESH_TO_COORD(Ped ped, float x, float y, float z, float speed, int timeout, float stoppingRange, BOOL persistFollowing, float unk)
 void TASK_FOLLOW_NAV_MESH_TO_COORD_ADVANCED(Ped ped, float x, float y, float z, float speed, int timeout, float unkFloat, int unkInt, float unkX, float unkY, float unkZ, float unk_40000f)
 void SET_PED_PATH_CAN_USE_CLIMBOVERS(Ped ped, BOOL Toggle)
 void SET_PED_PATH_CAN_USE_LADDERS(Ped ped, BOOL Toggle)
 void SET_PED_PATH_CAN_DROP_FROM_HEIGHT(Ped ped, BOOL Toggle)
 void _0x88E32DB8C1A4AA4B(Ped ped, float p1)
 void SET_PED_PATH_MAY_ENTER_WATER(Ped ped, BOOL mayEnterWater)
 void SET_PED_PATH_PREFER_TO_AVOID_WATER(Ped ped, BOOL avoidWater)
 void SET_PED_PATH_AVOID_FIRE(Ped ped, BOOL avoidFire)
 void SET_GLOBAL_MIN_BIRD_FLIGHT_HEIGHT(float height)
 Any GET_NAVMESH_ROUTE_DISTANCE_REMAINING(Ped ped, Any* p1, Any* p2)
 int GET_NAVMESH_ROUTE_RESULT(Ped ped)
 BOOL _0x3E38E28A1D80DDF6(Ped ped)
 void TASK_GO_TO_COORD_ANY_MEANS(Ped ped, float x, float y, float z, float speed, Any p5, BOOL p6, int walkingStyle, float p8)
 void TASK_GO_TO_COORD_ANY_MEANS_EXTRA_PARAMS(Ped ped, float x, float y, float z, float speed, Any p5, BOOL p6, int walkingStyle, float p8, Any p9, Any p10, Any p11, Any p12)
 void TASK_GO_TO_COORD_ANY_MEANS_EXTRA_PARAMS_WITH_CRUISE_SPEED(Ped ped, float x, float y, float z, float speed, Any p5, BOOL p6, int walkingStyle, float p8, Any p9, Any p10, Any p11, Any p12, Any p13)
 void TASK_PLAY_ANIM(Ped ped, const char* animDictionary, const char* animationName, float speed, float speedMultiplier, int duration, int flag, float playbackRate, BOOL lockX, BOOL lockY, BOOL lockZ)
 void TASK_PLAY_ANIM_ADVANCED(Ped ped, const char* animDict, const char* animName, float posX, float posY, float posZ, float rotX, float rotY, float rotZ, float speed, float speedMultiplier, int duration, Any flag, float animTime, Any p14, Any p15)
 void STOP_ANIM_TASK(Ped ped, const char* animDictionary, const char* animationName, float p3)
 void TASK_SCRIPTED_ANIMATION(Ped ped, Any* p1, Any* p2, Any* p3, float p4, float p5)
 void PLAY_ENTITY_SCRIPTED_ANIM(Any p0, Any* p1, Any* p2, Any* p3, float p4, float p5)
 void STOP_ANIM_PLAYBACK(Ped ped, int p1, BOOL p2)
 void SET_ANIM_WEIGHT(Any p0, float p1, Any p2, Any p3, BOOL p4)
 void SET_ANIM_RATE(Any p0, float p1, Any p2, BOOL p3)
 void SET_ANIM_LOOPED(Any p0, BOOL p1, Any p2, BOOL p3)
 void TASK_PLAY_PHONE_GESTURE_ANIMATION(Ped ped, const char* animDict, const char* animation, const char* boneMaskType, float p4, float p5, BOOL p6, BOOL p7)
 void TASK_STOP_PHONE_GESTURE_ANIMATION(Ped ped, Any p1)
 BOOL IS_PLAYING_PHONE_GESTURE_ANIM(Ped ped)
 float GET_PHONE_GESTURE_ANIM_CURRENT_TIME(Ped ped)
 float GET_PHONE_GESTURE_ANIM_TOTAL_TIME(Ped ped)
 void TASK_VEHICLE_PLAY_ANIM(Vehicle vehicle, const char* animation_set, const char* animation_name)
 void TASK_LOOK_AT_COORD(Entity entity, float x, float y, float z, float duration, Any p5, Any p6)
 void TASK_LOOK_AT_ENTITY(Ped ped, Entity lookAt, int duration, int unknown1, int unknown2)
 void TASK_CLEAR_LOOK_AT(Ped ped)
 void OPEN_SEQUENCE_TASK(int* taskSequenceId)
 void CLOSE_SEQUENCE_TASK(int taskSequenceId)
 void TASK_PERFORM_SEQUENCE(Ped ped, int taskSequenceId)
 void TASK_PERFORM_SEQUENCE_LOCALLY(Ped ped, int taskSequenceId)
 void CLEAR_SEQUENCE_TASK(int* taskSequenceId)
 void SET_SEQUENCE_TO_REPEAT(int taskSequenceId, BOOL repeat)
 int GET_SEQUENCE_PROGRESS(Ped ped)
 BOOL GET_IS_TASK_ACTIVE(Ped ped, int taskIndex)
 int GET_SCRIPT_TASK_STATUS(Ped targetPed, Hash taskHash)
 int GET_ACTIVE_VEHICLE_MISSION_TYPE(Vehicle vehicle)
 void TASK_LEAVE_ANY_VEHICLE(Ped ped, int p1, int p2)
 void TASK_AIM_GUN_SCRIPTED(Ped ped, Hash scriptTask, BOOL p2, BOOL p3)
 void TASK_AIM_GUN_SCRIPTED_WITH_TARGET(Any p0, Any p1, float p2, float p3, float p4, Any p5, BOOL p6, BOOL p7)
 void UPDATE_TASK_AIM_GUN_SCRIPTED_TARGET(Ped p0, Ped p1, float p2, float p3, float p4, BOOL p5)
 const char* GET_CLIP_SET_FOR_SCRIPTED_GUN_TASK(int p0)
 void TASK_AIM_GUN_AT_ENTITY(Ped ped, Entity entity, int duration, BOOL p3)
 void TASK_TURN_PED_TO_FACE_ENTITY(Ped ped, Entity entity, int duration)
 void TASK_AIM_GUN_AT_COORD(Ped ped, float x, float y, float z, int time, BOOL p5, BOOL p6)
 void TASK_SHOOT_AT_COORD(Ped ped, float x, float y, float z, int duration, Hash firingPattern)
 void TASK_SHUFFLE_TO_NEXT_VEHICLE_SEAT(Ped ped, Vehicle vehicle, Any p2)
 void CLEAR_PED_TASKS(Ped ped)
 void CLEAR_PED_SECONDARY_TASK(Ped ped)
 void TASK_EVERYONE_LEAVE_VEHICLE(Vehicle vehicle)
 void TASK_GOTO_ENTITY_OFFSET(Ped ped, Any p1, Any p2, float x, float y, float z, int duration)
 void TASK_GOTO_ENTITY_OFFSET_XY(int p0, Ped oed, int duration, float p3, float p4, float p5, float p6, BOOL p7)
 void TASK_TURN_PED_TO_FACE_COORD(Ped ped, float x, float y, float z, int duration)
 void TASK_VEHICLE_TEMP_ACTION(Ped driver, Vehicle vehicle, int action, int time)
 void TASK_VEHICLE_MISSION(int p0, int p1, Vehicle veh, Any p3, float p4, Any p5, float p6, float p7, BOOL p8)
 void TASK_VEHICLE_MISSION_PED_TARGET(Ped ped, Vehicle vehicle, Ped pedTarget, int mode, float maxSpeed, int drivingStyle, float minDistance, float p7, BOOL p8)
 void TASK_VEHICLE_MISSION_COORS_TARGET(Ped ped, Vehicle vehicle, float x, float y, float z, int p5, int p6, int p7, float p8, float p9, BOOL p10)
 void TASK_VEHICLE_ESCORT(Ped ped, Vehicle vehicle, Vehicle targetVehicle, int mode, float speed, int drivingStyle, float minDistance, int p7, float noRoadsDistance)
 void TASK_VEHICLE_FOLLOW(Ped driver, Vehicle vehicle, Entity targetEntity, float speed, int drivingStyle, int minDistance)
 void TASK_VEHICLE_CHASE(Ped driver, Entity targetEnt)
 void TASK_VEHICLE_HELI_PROTECT(Ped pilot, Vehicle vehicle, Entity entityToFollow, float targetSpeed, int p4, float radius, int altitude, int p7)
 void SET_TASK_VEHICLE_CHASE_BEHAVIOR_FLAG(Ped ped, int flag, BOOL set)
 void SET_TASK_VEHICLE_CHASE_IDEAL_PURSUIT_DISTANCE(Ped ped, float distance)
 void TASK_HELI_CHASE(Ped pilot, Entity entityToFollow, float x, float y, float z)
 void TASK_PLANE_CHASE(Ped pilot, Entity entityToFollow, float x, float y, float z)
 void TASK_PLANE_LAND(Ped pilot, Vehicle plane, float runwayStartX, float runwayStartY, float runwayStartZ, float runwayEndX, float runwayEndY, float runwayEndZ)
 void _0xDBBC7A2432524127(Vehicle vehicle)
 void _0x53DDC75BC3AC0A90(Vehicle vehicle)
 void TASK_PLANE_GOTO_PRECISE_VTOL(Any p0, Any p1, Any p2, Any p3, Any p4, Any p5, Any p6, Any p7, Any p8, Any p9)
 void TASK_HELI_MISSION(Ped pilot, Vehicle aircraft, Vehicle targetVehicle, Ped targetPed, float destinationX, float destinationY, float destinationZ, int missionFlag, float maxSpeed, float landingRadius, float targetHeading, int unk1, int unk2, Hash unk3, int landingFlags)
 void TASK_HELI_ESCORT_HELI(Ped pilot, Vehicle heli1, Vehicle heli2, float p3, float p4, float p5)
 void TASK_PLANE_MISSION(Ped pilot, Vehicle aircraft, Vehicle targetVehicle, Ped targetPed, float destinationX, float destinationY, float destinationZ, int missionFlag, float angularDrag, float unk, float targetHeading, float maxZ, float minZ, Any p13)
 void TASK_PLANE_TAXI(Any p0, Any p1, Any p2, Any p3, Any p4, Any p5, Any p6)
 void TASK_BOAT_MISSION(Ped pedDriver, Vehicle boat, Any p2, Any p3, float x, float y, float z, Any p7, float maxSpeed, int drivingStyle, float p10, Any p11)
 void TASK_DRIVE_BY(Ped driverPed, Ped targetPed, Vehicle targetVehicle, float targetX, float targetY, float targetZ, float distanceToShoot, int pedAccuracy, BOOL p8, Hash firingPattern)
 void SET_DRIVEBY_TASK_TARGET(Ped shootingPed, Ped targetPed, Vehicle targetVehicle, float x, float y, float z)
 void CLEAR_DRIVEBY_TASK_UNDERNEATH_DRIVING_TASK(Ped ped)
 BOOL IS_DRIVEBY_TASK_UNDERNEATH_DRIVING_TASK(Ped ped)
 BOOL CONTROL_MOUNTED_WEAPON(Ped ped)
 void SET_MOUNTED_WEAPON_TARGET(Ped shootingPed, Ped targetPed, Vehicle targetVehicle, float x, float y, float z, Any p6, Any p7)
 BOOL IS_MOUNTED_WEAPON_TASK_UNDERNEATH_DRIVING_TASK(Ped ped)
 void TASK_USE_MOBILE_PHONE(Ped ped, int p1, Any p2)
 void TASK_USE_MOBILE_PHONE_TIMED(Ped ped, int duration)
 void TASK_CHAT_TO_PED(Ped ped, Ped target, Any p2, float p3, float p4, float p5, float p6, float p7)
 void TASK_WARP_PED_INTO_VEHICLE(Ped ped, Vehicle vehicle, int seat)
 void TASK_SHOOT_AT_ENTITY(Entity entity, Entity target, int duration, Hash firingPattern)
 void TASK_CLIMB(Ped ped, BOOL unused)
 void TASK_CLIMB_LADDER(Ped ped, int p1)
 void CLEAR_PED_TASKS_IMMEDIATELY(Ped ped)
 void TASK_PERFORM_SEQUENCE_FROM_PROGRESS(Any p0, Any p1, Any p2, Any p3)
 void SET_NEXT_DESIRED_MOVE_STATE(float p0)
 void SET_PED_DESIRED_MOVE_BLEND_RATIO(Ped ped, float p1)
 float GET_PED_DESIRED_MOVE_BLEND_RATIO(Ped ped)
 void TASK_GOTO_ENTITY_AIMING(Ped ped, Entity target, float distanceToStopAt, float StartAimingDist)
 void TASK_SET_DECISION_MAKER(Ped ped, Hash p1)
 void TASK_SET_SPHERE_DEFENSIVE_AREA(Any p0, float p1, float p2, float p3, float p4)
 void TASK_CLEAR_DEFENSIVE_AREA(Any p0)
 void TASK_PED_SLIDE_TO_COORD(Ped ped, float x, float y, float z, float heading, float p5)
 void TASK_PED_SLIDE_TO_COORD_HDG_RATE(Ped ped, float x, float y, float z, float heading, float p5, float p6)
 ScrHandle ADD_COVER_POINT(float p0, float p1, float p2, float p3, Any p4, Any p5, Any p6, BOOL p7)
 void REMOVE_COVER_POINT(ScrHandle coverpoint)
 BOOL DOES_SCRIPTED_COVER_POINT_EXIST_AT_COORDS(float x, float y, float z)
 Vector3 GET_SCRIPTED_COVER_POINT_COORDS(ScrHandle coverpoint)
 void TASK_COMBAT_PED(Ped ped, Ped targetPed, int p2, int p3)
 void TASK_COMBAT_PED_TIMED(Any p0, Ped ped, int p2, Any p3)
 void TASK_SEEK_COVER_FROM_POS(Ped ped, float x, float y, float z, int duration, BOOL p5)
 void TASK_SEEK_COVER_FROM_PED(Ped ped, Ped target, int duration, BOOL p3)
 void TASK_SEEK_COVER_TO_COVER_POINT(Any p0, Any p1, float p2, float p3, float p4, Any p5, BOOL p6)
 void TASK_SEEK_COVER_TO_COORDS(Ped ped, float x1, float y1, float z1, float x2, float y2, float z2, Any p7, BOOL p8)
 void TASK_PUT_PED_DIRECTLY_INTO_COVER(Ped ped, float x, float y, float z, Any timeout, BOOL p5, float p6, BOOL p7, BOOL p8, Any p9, BOOL p10)
 void TASK_EXIT_COVER(Any p0, Any p1, float p2, float p3, float p4)
 void TASK_PUT_PED_DIRECTLY_INTO_MELEE(Ped ped, Ped meleeTarget, float p2, float p3, float p4, BOOL p5)
 void TASK_TOGGLE_DUCK(BOOL p0, BOOL p1)
 void TASK_GUARD_CURRENT_POSITION(Ped p0, float p1, float p2, BOOL p3)
 void TASK_GUARD_ASSIGNED_DEFENSIVE_AREA(Any p0, float p1, float p2, float p3, float p4, float p5, Any p6)
 void TASK_GUARD_SPHERE_DEFENSIVE_AREA(Ped p0, float p1, float p2, float p3, float p4, float p5, Any p6, float p7, float p8, float p9, float p10)
 void TASK_STAND_GUARD(Ped ped, float x, float y, float z, float heading, const char* scenarioName)
 void SET_DRIVE_TASK_CRUISE_SPEED(Ped driver, float cruiseSpeed)
 void SET_DRIVE_TASK_MAX_CRUISE_SPEED(Any p0, float p1)
 void SET_DRIVE_TASK_DRIVING_STYLE(Ped ped, int drivingStyle)
 void ADD_COVER_BLOCKING_AREA(float playerX, float playerY, float playerZ, float radiusX, float radiusY, float radiusZ, BOOL p6, BOOL p7, BOOL p8, BOOL p9)
 void REMOVE_ALL_COVER_BLOCKING_AREAS()
 void _0xFA83CA6776038F64(float x, float y, float z)
 void _0x1F351CF1C6475734(Any p0, Any p1, Any p2, Any p3, Any p4, Any p5, Any p6, Any p7, Any p8, Any p9)
 void TASK_START_SCENARIO_IN_PLACE(Ped ped, const char* scenarioName, int unkDelay, BOOL playEnterAnim)
 void TASK_START_SCENARIO_AT_POSITION(Ped ped, const char* scenarioName, float x, float y, float z, float heading, int duration, BOOL sittingScenario, BOOL teleport)
 void TASK_USE_NEAREST_SCENARIO_TO_COORD(Ped ped, float x, float y, float z, float distance, int duration)
 void TASK_USE_NEAREST_SCENARIO_TO_COORD_WARP(Ped ped, float x, float y, float z, float radius, Any p5)
 void TASK_USE_NEAREST_SCENARIO_CHAIN_TO_COORD(Any p0, float p1, float p2, float p3, float p4, Any p5)
 void TASK_USE_NEAREST_SCENARIO_CHAIN_TO_COORD_WARP(Any p0, float p1, float p2, float p3, float p4, Any p5)
 BOOL DOES_SCENARIO_EXIST_IN_AREA(float x, float y, float z, float radius, BOOL b)
 BOOL DOES_SCENARIO_OF_TYPE_EXIST_IN_AREA(float p0, float p1, float p2, Any* p3, float p4, BOOL p5)
 BOOL IS_SCENARIO_OCCUPIED(float p0, float p1, float p2, float p3, BOOL p4)
 BOOL PED_HAS_USE_SCENARIO_TASK(Ped ped)
 void PLAY_ANIM_ON_RUNNING_SCENARIO(Ped ped, const char* animDict, const char* animName)
 BOOL DOES_SCENARIO_GROUP_EXIST(const char* scenarioGroup)
 BOOL IS_SCENARIO_GROUP_ENABLED(const char* scenarioGroup)
 void SET_SCENARIO_GROUP_ENABLED(const char* scenarioGroup, BOOL p1)
 void RESET_SCENARIO_GROUPS_ENABLED()
 void SET_EXCLUSIVE_SCENARIO_GROUP(const char* scenarioGroup)
 void RESET_EXCLUSIVE_SCENARIO_GROUP()
 BOOL IS_SCENARIO_TYPE_ENABLED(const char* scenarioType)
 void SET_SCENARIO_TYPE_ENABLED(const char* scenarioType, BOOL toggle)
 void RESET_SCENARIO_TYPES_ENABLED()
 BOOL IS_PED_ACTIVE_IN_SCENARIO(Ped ped)
 BOOL _0x621C6E4729388E41(Ped ped)
 void SET_PED_CAN_PLAY_AMBIENT_IDLES(Ped ped, BOOL p1, BOOL p2)
 void TASK_COMBAT_HATED_TARGETS_IN_AREA(Ped ped, float x, float y, float z, float radius, Any p5)
 void TASK_COMBAT_HATED_TARGETS_AROUND_PED(Ped ped, float radius, int p2)
 void TASK_COMBAT_HATED_TARGETS_AROUND_PED_TIMED(Any p0, float p1, Any p2, Any p3)
 void TASK_THROW_PROJECTILE(Ped ped, float x, float y, float z, Any p4, Any p5)
 void TASK_SWAP_WEAPON(Ped ped, BOOL p1)
 void TASK_RELOAD_WEAPON(Ped ped, BOOL unused)
 BOOL IS_PED_GETTING_UP(Ped ped)
 void TASK_WRITHE(Ped ped, Ped target, int time, int p3, Any p4, Any p5)
 BOOL IS_PED_IN_WRITHE(Ped ped)
 void OPEN_PATROL_ROUTE(const char* patrolRoute)
 void CLOSE_PATROL_ROUTE()
 void ADD_PATROL_ROUTE_NODE(int p0, const char* p1, float x1, float y1, float z1, float x2, float y2, float z2, int p8)
 void ADD_PATROL_ROUTE_LINK(Any p0, Any p1)
 void CREATE_PATROL_ROUTE()
 void DELETE_PATROL_ROUTE(const char* patrolRoute)
 void TASK_PATROL(Ped ped, const char* p1, Any p2, BOOL p3, BOOL p4)
 void TASK_STAY_IN_COVER(Ped ped)
 void ADD_VEHICLE_SUBTASK_ATTACK_COORD(Ped ped, float x, float y, float z)
 void ADD_VEHICLE_SUBTASK_ATTACK_PED(Ped ped, Ped ped2)
 void TASK_VEHICLE_SHOOT_AT_PED(Ped ped, Ped target, float p2)
 void TASK_VEHICLE_AIM_AT_PED(Ped ped, Ped target)
 void TASK_VEHICLE_SHOOT_AT_COORD(Ped ped, float x, float y, float z, float p4)
 void TASK_VEHICLE_AIM_AT_COORD(Ped ped, float x, float y, float z)
 void TASK_VEHICLE_GOTO_NAVMESH(Ped ped, Vehicle vehicle, float x, float y, float z, float speed, int behaviorFlag, float stoppingRange)
 void TASK_GO_TO_COORD_WHILE_AIMING_AT_COORD(Ped ped, float x, float y, float z, float aimAtX, float aimAtY, float aimAtZ, float moveSpeed, BOOL p8, float p9, float p10, BOOL p11, Any flags, BOOL p13, Hash firingPattern)
 void TASK_GO_TO_COORD_WHILE_AIMING_AT_ENTITY(Any p0, float p1, float p2, float p3, Any p4, float p5, BOOL p6, float p7, float p8, BOOL p9, Any p10, BOOL p11, Any p12, Any p13)
 void TASK_GO_TO_COORD_AND_AIM_AT_HATED_ENTITIES_NEAR_COORD(Ped pedHandle, float goToLocationX, float goToLocationY, float goToLocationZ, float focusLocationX, float focusLocationY, float focusLocationZ, float speed, BOOL shootAtEnemies, float distanceToStopAt, float noRoadsDistance, BOOL unkTrue, int unkFlag, int aimingFlag, Hash firingPattern)
 void TASK_GO_TO_ENTITY_WHILE_AIMING_AT_COORD(Any p0, Any p1, float p2, float p3, float p4, float p5, BOOL p6, float p7, float p8, BOOL p9, BOOL p10, Any p11)
 void TASK_GO_TO_ENTITY_WHILE_AIMING_AT_ENTITY(Ped ped, Entity entityToWalkTo, Entity entityToAimAt, float speed, BOOL shootatEntity, float p5, float p6, BOOL p7, BOOL p8, Hash firingPattern)
 void SET_HIGH_FALL_TASK(Ped ped, Any p1, Any p2, Any p3)
 void REQUEST_WAYPOINT_RECORDING(const char* name)
 BOOL GET_IS_WAYPOINT_RECORDING_LOADED(const char* name)
 void REMOVE_WAYPOINT_RECORDING(const char* name)
 BOOL WAYPOINT_RECORDING_GET_NUM_POINTS(const char* name, int* points)
 BOOL WAYPOINT_RECORDING_GET_COORD(const char* name, int point, Vector3* coord)
 float WAYPOINT_RECORDING_GET_SPEED_AT_POINT(const char* name, int point)
 BOOL WAYPOINT_RECORDING_GET_CLOSEST_WAYPOINT(const char* name, float x, float y, float z, int* point)
 void TASK_FOLLOW_WAYPOINT_RECORDING(Any p0, Any p1, Any p2, Any p3, Any p4)
 BOOL IS_WAYPOINT_PLAYBACK_GOING_ON_FOR_PED(Any p0)
 int GET_PED_WAYPOINT_PROGRESS(Ped ped)
 float GET_PED_WAYPOINT_DISTANCE(Any p0)
 Any SET_PED_WAYPOINT_ROUTE_OFFSET(Any p0, Any p1, Any p2, Any p3)
 float GET_WAYPOINT_DISTANCE_ALONG_ROUTE(const char* p0, int p1)
 BOOL WAYPOINT_PLAYBACK_GET_IS_PAUSED(Any p0)
 void WAYPOINT_PLAYBACK_PAUSE(Any p0, BOOL p1, BOOL p2)
 void WAYPOINT_PLAYBACK_RESUME(Any p0, BOOL p1, Any p2, Any p3)
 void WAYPOINT_PLAYBACK_OVERRIDE_SPEED(Any p0, float p1, BOOL p2)
 void WAYPOINT_PLAYBACK_USE_DEFAULT_SPEED(Any p0)
 void USE_WAYPOINT_RECORDING_AS_ASSISTED_MOVEMENT_ROUTE(Any* p0, BOOL p1, float p2, float p3)
 void WAYPOINT_PLAYBACK_START_AIMING_AT_PED(Any p0, Any p1, BOOL p2)
 void WAYPOINT_PLAYBACK_START_AIMING_AT_COORD(Any p0, float p1, float p2, float p3, BOOL p4)
 void WAYPOINT_PLAYBACK_START_SHOOTING_AT_PED(Any p0, Any p1, BOOL p2, Any p3)
 void WAYPOINT_PLAYBACK_START_SHOOTING_AT_COORD(Any p0, float p1, float p2, float p3, BOOL p4, Any p5)
 void WAYPOINT_PLAYBACK_STOP_AIMING_OR_SHOOTING(Any p0)
 void ASSISTED_MOVEMENT_REQUEST_ROUTE(const char* route)
 void ASSISTED_MOVEMENT_REMOVE_ROUTE(const char* route)
 BOOL ASSISTED_MOVEMENT_IS_ROUTE_LOADED(const char* route)
 void ASSISTED_MOVEMENT_SET_ROUTE_PROPERTIES(const char* route, int props)
 void ASSISTED_MOVEMENT_OVERRIDE_LOAD_DISTANCE_THIS_FRAME(float dist)
 void TASK_VEHICLE_FOLLOW_WAYPOINT_RECORDING(Ped ped, Vehicle vehicle, const char* WPRecording, int p3, int p4, int p5, int p6, float p7, BOOL p8, float p9)
 BOOL IS_WAYPOINT_PLAYBACK_GOING_ON_FOR_VEHICLE(Vehicle vehicle)
 int GET_VEHICLE_WAYPOINT_PROGRESS(Vehicle vehicle)
 int GET_VEHICLE_WAYPOINT_TARGET_POINT(Vehicle vehicle)
 void VEHICLE_WAYPOINT_PLAYBACK_PAUSE(Vehicle vehicle)
 void VEHICLE_WAYPOINT_PLAYBACK_RESUME(Vehicle vehicle)
 void VEHICLE_WAYPOINT_PLAYBACK_USE_DEFAULT_SPEED(Vehicle vehicle)
 void VEHICLE_WAYPOINT_PLAYBACK_OVERRIDE_SPEED(Vehicle vehicle, float speed)
 void TASK_SET_BLOCKING_OF_NON_TEMPORARY_EVENTS(Ped ped, BOOL toggle)
 void TASK_FORCE_MOTION_STATE(Ped ped, Hash state, BOOL p2)
 void TASK_MOVE_NETWORK_BY_NAME(Ped ped, const char* task, float multiplier, BOOL p3, const char* animDict, int flags)
 void TASK_MOVE_NETWORK_ADVANCED_BY_NAME(Ped ped, const char* p1, float p2, float p3, float p4, float p5, float p6, float p7, Any p8, float p9, BOOL p10, const char* animDict, int flags)
 void _TASK_MOVE_NETWORK_BY_NAME_WITH_INIT_PARAMS(Ped ped, const char* p1, Any* data, float p3, BOOL p4, const char* animDict, int flags)
 BOOL IS_TASK_MOVE_NETWORK_ACTIVE(Ped ped)
 BOOL IS_TASK_MOVE_NETWORK_READY_FOR_TRANSITION(Ped ped)
 BOOL REQUEST_TASK_MOVE_NETWORK_STATE_TRANSITION(Ped ped, const char* name)
 Any _0xAB13A5565480B6D9(Ped ped, const char* p1)
 const char* GET_TASK_MOVE_NETWORK_STATE(Ped ped)
 void _0x8423541E8B3A1589(Any p0, Any p1, Any p2)
 void SET_TASK_MOVE_NETWORK_SIGNAL_FLOAT(Ped ped, const char* signalName, float value)
 void _SET_TASK_MOVE_NETWORK_SIGNAL_FLOAT_2(Ped ped, const char* signalName, float value)
 void _0x8634CEF2522D987B(Ped ped, const char* p1, float value)
 void SET_TASK_MOVE_NETWORK_SIGNAL_BOOL(Ped ped, const char* signalName, BOOL value)
 float _GET_TASK_MOVE_NETWORK_SIGNAL_FLOAT(Ped ped, const char* signalName)
 BOOL GET_TASK_MOVE_NETWORK_SIGNAL_BOOL(Ped ped, const char* signalName)
 BOOL GET_TASK_MOVE_NETWORK_EVENT(Ped ped, const char* eventName)
 BOOL IS_MOVE_BLEND_RATIO_STILL(Ped ped)
 BOOL IS_MOVE_BLEND_RATIO_WALKING(Ped ped)
 BOOL IS_MOVE_BLEND_RATIO_RUNNING(Ped ped)
 BOOL IS_MOVE_BLEND_RATIO_SPRINTING(Ped ped)
 BOOL IS_PED_STILL(Ped ped)
 BOOL IS_PED_WALKING(Ped ped)
 BOOL IS_PED_RUNNING(Ped ped)
 BOOL IS_PED_SPRINTING(Ped ped)
 BOOL IS_PED_STRAFING(Ped ped)
 void TASK_SYNCHRONIZED_SCENE(Ped ped, int scene, const char* animDictionary, const char* animationName, float speed, float speedMultiplier, int duration, int flag, float playbackRate, Any p9)
 void TASK_AGITATED_ACTION(Ped ped, Ped ped2)
 void TASK_SWEEP_AIM_ENTITY(Ped ped, const char* anim, const char* p2, const char* p3, const char* p4, int p5, Vehicle vehicle, float p7, float p8)
 void UPDATE_TASK_SWEEP_AIM_ENTITY(Ped ped, Entity entity)
 void TASK_SWEEP_AIM_POSITION(Any p0, Any* p1, Any* p2, Any* p3, Any* p4, Any p5, float p6, float p7, float p8, float p9, float p10)
 void UPDATE_TASK_SWEEP_AIM_POSITION(Any p0, float p1, float p2, float p3)
 void TASK_ARREST_PED(Ped ped, Ped target)
 BOOL IS_PED_RUNNING_ARREST_TASK(Ped ped)
 BOOL IS_PED_BEING_ARRESTED(Ped ped)
 void UNCUFF_PED(Ped ped)
 BOOL IS_PED_CUFFED(Ped ped)
}

namespace VEHICLE
{
 Vehicle CREATE_VEHICLE(Hash modelHash, float x, float y, float z, float heading, BOOL isNetwork, BOOL thisScriptCheck, BOOL p7)
 void DELETE_VEHICLE(Vehicle* vehicle)
 void _0x7D6F9A3EF26136A0(Vehicle vehicle, BOOL toggle, BOOL p2)
 void _SET_VEHICLE_CAN_BE_LOCKED_ON(Vehicle vehicle, BOOL canBeLockedOn, BOOL unk)
 void SET_VEHICLE_ALLOW_NO_PASSENGERS_LOCKON(Vehicle veh, BOOL toggle)
 int _0xE6B0E8CFC3633BF0(Vehicle vehicle)
 Any _0x6EAAEFC76ACC311F(Any p0)
 void _0x407DC5E97DB1A4D3(Any p0, Any p1)
 BOOL IS_VEHICLE_MODEL(Vehicle vehicle, Hash model)
 BOOL DOES_SCRIPT_VEHICLE_GENERATOR_EXIST(int vehicleGenerator)
 int CREATE_SCRIPT_VEHICLE_GENERATOR(float x, float y, float z, float heading, float p4, float p5, Hash modelHash, int p7, int p8, int p9, int p10, BOOL p11, BOOL p12, BOOL p13, BOOL p14, BOOL p15, int p16)
 void DELETE_SCRIPT_VEHICLE_GENERATOR(int vehicleGenerator)
 void SET_SCRIPT_VEHICLE_GENERATOR(int vehicleGenerator, BOOL enabled)
 void SET_ALL_VEHICLE_GENERATORS_ACTIVE_IN_AREA(float x1, float y1, float z1, float x2, float y2, float z2, BOOL p6, BOOL p7)
 void SET_ALL_VEHICLE_GENERATORS_ACTIVE()
 void SET_ALL_LOW_PRIORITY_VEHICLE_GENERATORS_ACTIVE(BOOL active)
 void _0x9A75585FB2E54FAD(float x, float y, float z, float p3)
 void _0x0A436B8643716D14()
 BOOL SET_VEHICLE_ON_GROUND_PROPERLY(Vehicle vehicle, float p1)
 Any SET_VEHICLE_USE_CUTSCENE_WHEEL_COMPRESSION(Vehicle p0, BOOL p1, BOOL p2, BOOL p3)
 BOOL IS_VEHICLE_STUCK_ON_ROOF(Vehicle vehicle)
 void ADD_VEHICLE_UPSIDEDOWN_CHECK(Vehicle vehicle)
 void REMOVE_VEHICLE_UPSIDEDOWN_CHECK(Vehicle vehicle)
 BOOL IS_VEHICLE_STOPPED(Vehicle vehicle)
 int GET_VEHICLE_NUMBER_OF_PASSENGERS(Vehicle vehicle)
 int GET_VEHICLE_MAX_NUMBER_OF_PASSENGERS(Vehicle vehicle)
 int GET_VEHICLE_MODEL_NUMBER_OF_SEATS(Hash modelHash)
 BOOL IS_SEAT_WARP_ONLY(Vehicle vehicle, int seatIndex)
 BOOL IS_TURRET_SEAT(Vehicle vehicle, int seatIndex)
 BOOL _DOES_VEHICLE_ALLOW_RAPPEL(Vehicle vehicle)
 void SET_VEHICLE_DENSITY_MULTIPLIER_THIS_FRAME(float multiplier)
 void SET_RANDOM_VEHICLE_DENSITY_MULTIPLIER_THIS_FRAME(float multiplier)
 void SET_PARKED_VEHICLE_DENSITY_MULTIPLIER_THIS_FRAME(float multiplier)
 void SET_DISABLE_RANDOM_TRAINS_THIS_FRAME(BOOL toggle)
 void SET_AMBIENT_VEHICLE_RANGE_MULTIPLIER_THIS_FRAME(float value)
 void SET_FAR_DRAW_VEHICLES(BOOL toggle)
 void SET_NUMBER_OF_PARKED_VEHICLES(int value)
 void SET_VEHICLE_DOORS_LOCKED(Vehicle vehicle, int doorLockStatus)
 void _SET_VEHICLE_DOOR_DESTROY_TYPE(Vehicle vehicle, int doorIndex, int destroyType)
 void SET_VEHICLE_HAS_MUTED_SIRENS(Vehicle vehicle, BOOL toggle)
 void SET_VEHICLE_DOORS_LOCKED_FOR_PLAYER(Vehicle vehicle, Player player, BOOL toggle)
 BOOL GET_VEHICLE_DOORS_LOCKED_FOR_PLAYER(Vehicle vehicle, Player player)
 void SET_VEHICLE_DOORS_LOCKED_FOR_ALL_PLAYERS(Vehicle vehicle, BOOL toggle)
 void SET_VEHICLE_DOORS_LOCKED_FOR_NON_SCRIPT_PLAYERS(Vehicle vehicle, BOOL toggle)
 void SET_VEHICLE_DOORS_LOCKED_FOR_TEAM(Vehicle vehicle, int team, BOOL toggle)
 void _SET_VEHICLE_DOORS_LOCKED_FOR_UNK(Vehicle vehicle, BOOL toggle)
 void _0x76D26A22750E849E(Vehicle vehicle)
 void EXPLODE_VEHICLE(Vehicle vehicle, BOOL isAudible, BOOL isInvisible)
 void SET_VEHICLE_OUT_OF_CONTROL(Vehicle vehicle, BOOL killDriver, BOOL explodeOnImpact)
 void SET_VEHICLE_TIMED_EXPLOSION(Vehicle vehicle, Ped ped, BOOL toggle)
 void ADD_VEHICLE_PHONE_EXPLOSIVE_DEVICE(Vehicle vehicle)
 void _CLEAR_VEHICLE_PHONE_EXPLOSIVE_DEVICE()
 BOOL HAS_VEHICLE_PHONE_EXPLOSIVE_DEVICE()
 void DETONATE_VEHICLE_PHONE_EXPLOSIVE_DEVICE()
 void SET_TAXI_LIGHTS(Vehicle vehicle, BOOL state)
 BOOL IS_TAXI_LIGHT_ON(Vehicle vehicle)
 BOOL IS_VEHICLE_IN_GARAGE_AREA(const char* garageName, Vehicle vehicle)
 void SET_VEHICLE_COLOURS(Vehicle vehicle, int colorPrimary, int colorSecondary)
 void SET_VEHICLE_FULLBEAM(Vehicle vehicle, BOOL toggle)
 void SET_VEHICLE_IS_RACING(Vehicle vehicle, BOOL toggle)
 void SET_VEHICLE_CUSTOM_PRIMARY_COLOUR(Vehicle vehicle, int r, int g, int b)
 void GET_VEHICLE_CUSTOM_PRIMARY_COLOUR(Vehicle vehicle, int* r, int* g, int* b)
 void CLEAR_VEHICLE_CUSTOM_PRIMARY_COLOUR(Vehicle vehicle)
 BOOL GET_IS_VEHICLE_PRIMARY_COLOUR_CUSTOM(Vehicle vehicle)
 void SET_VEHICLE_CUSTOM_SECONDARY_COLOUR(Vehicle vehicle, int r, int g, int b)
 void GET_VEHICLE_CUSTOM_SECONDARY_COLOUR(Vehicle vehicle, int* r, int* g, int* b)
 void CLEAR_VEHICLE_CUSTOM_SECONDARY_COLOUR(Vehicle vehicle)
 BOOL GET_IS_VEHICLE_SECONDARY_COLOUR_CUSTOM(Vehicle vehicle)
 void SET_VEHICLE_ENVEFF_SCALE(Vehicle vehicle, float fade)
 float GET_VEHICLE_ENVEFF_SCALE(Vehicle vehicle)
 void SET_CAN_RESPRAY_VEHICLE(Vehicle vehicle, BOOL state)
 void _0xAB31EF4DE6800CE9(Any p0, Any p1)
 void _0x1B212B26DD3C04DF(Vehicle vehicle, BOOL toggle)
 void FORCE_SUBMARINE_SURFACE_MODE(Vehicle vehicle, BOOL toggle)
 void SET_SUBMARINE_CRUSH_DEPTHS(Vehicle vehicle, BOOL p1, float depth1, float depth2, float depth3)
 void _0xED5EDE9E676643C9(Any p0, Any p1)
 void SET_BOAT_ANCHOR(Vehicle vehicle, BOOL toggle)
 BOOL CAN_ANCHOR_BOAT_HERE(Vehicle vehicle)
 BOOL _CAN_ANCHOR_BOAT_HERE_2(Vehicle vehicle)
 void _SET_BOAT_FROZEN_WHEN_ANCHORED(Vehicle vehicle, BOOL toggle)
 void _0xB28B1FE5BFADD7F5(Vehicle vehicle, BOOL p1)
 void _SET_BOAT_MOVEMENT_RESISTANCE(Vehicle vehicle, float value)
 BOOL _IS_BOAT_ANCHORED_AND_FROZEN(Vehicle vehicle)
 void SET_BOAT_SINKS_WHEN_WRECKED(Vehicle vehicle, BOOL toggle)
 void _SET_BOAT_IS_SINKING(Any p0)
 void SET_VEHICLE_SIREN(Vehicle vehicle, BOOL toggle)
 BOOL IS_VEHICLE_SIREN_ON(Vehicle vehicle)
 BOOL IS_VEHICLE_SIREN_AUDIO_ON(Vehicle vehicle)
 void SET_VEHICLE_STRONG(Vehicle vehicle, BOOL toggle)
 void REMOVE_VEHICLE_STUCK_CHECK(Vehicle vehicle)
 void GET_VEHICLE_COLOURS(Vehicle vehicle, int* colorPrimary, int* colorSecondary)
 BOOL IS_VEHICLE_SEAT_FREE(Vehicle vehicle, int seatIndex, BOOL p2)
 Ped GET_PED_IN_VEHICLE_SEAT(Vehicle vehicle, int index, Any p2)
 Ped GET_LAST_PED_IN_VEHICLE_SEAT(Vehicle vehicle, int seatIndex)
 BOOL GET_VEHICLE_LIGHTS_STATE(Vehicle vehicle, BOOL* lightsOn, BOOL* highbeamsOn)
 BOOL IS_VEHICLE_TYRE_BURST(Vehicle vehicle, int wheelID, BOOL completely)
 void SET_VEHICLE_FORWARD_SPEED(Vehicle vehicle, float speed)
 void _0x6501129C9E0FFA05(Any p0, Any p1)
 void BRING_VEHICLE_TO_HALT(Vehicle vehicle, float distance, int duration, BOOL unknown)
 void _0xDCE97BDF8A0EABC8(Any p0, Any p1)
 void _0x9849DE24FCF23CCC(Any p0, Any p1)
 void _0x7C06330BFDDA182E(Any p0)
 Any _0xC69BB1D832A710EF(Any p0)
 void SET_FORKLIFT_FORK_HEIGHT(Vehicle vehicle, float height)
 BOOL IS_ENTITY_ATTACHED_TO_HANDLER_FRAME(Vehicle vehicle, Entity entity)
 BOOL _0x62CA17B74C435651(Vehicle vehicle)
 Vehicle _FIND_VEHICLE_CARRYING_THIS_ENTITY(Entity entity)
 BOOL _IS_HANDLER_FRAME_ABOVE_CONTAINER(Vehicle vehicle, Entity entity)
 void _0x6A98C2ECF57FA5D4(Vehicle vehicle, Entity entity)
 void DETACH_CONTAINER_FROM_HANDLER_FRAME(Vehicle vehicle)
 void _0x8AA9180DE2FEDD45(Vehicle vehicle, BOOL p1)
 void SET_BOAT_DISABLE_AVOIDANCE(Vehicle vehicle, BOOL p1)
 BOOL IS_HELI_LANDING_AREA_BLOCKED(Vehicle vehicle)
 void _0x107A473D7A6647A9(Any p0)
 void SET_HELI_TURBULENCE_SCALAR(Vehicle vehicle, float p1)
 void SET_CAR_BOOT_OPEN(Vehicle vehicle)
 void SET_VEHICLE_TYRE_BURST(Vehicle vehicle, int index, BOOL onRim, float p3)
 void SET_VEHICLE_DOORS_SHUT(Vehicle vehicle, BOOL closeInstantly)
 void SET_VEHICLE_TYRES_CAN_BURST(Vehicle vehicle, BOOL toggle)
 BOOL GET_VEHICLE_TYRES_CAN_BURST(Vehicle vehicle)
 void SET_VEHICLE_WHEELS_CAN_BREAK(Vehicle vehicle, BOOL enabled)
 void SET_VEHICLE_DOOR_OPEN(Vehicle vehicle, int doorIndex, BOOL loose, BOOL openInstantly)
 void _0x3B458DDB57038F08(Any p0, Any p1, Any p2)
 void _0xA247F9EF01D8082E(Any p0)
 void REMOVE_VEHICLE_WINDOW(Vehicle vehicle, int windowIndex)
 void ROLL_DOWN_WINDOWS(Vehicle vehicle)
 void ROLL_DOWN_WINDOW(Vehicle vehicle, int windowIndex)
 void ROLL_UP_WINDOW(Vehicle vehicle, int windowIndex)
 void SMASH_VEHICLE_WINDOW(Vehicle vehicle, int index)
 void FIX_VEHICLE_WINDOW(Vehicle vehicle, int index)
 void _DETACH_VEHICLE_WINDSCREEN(Vehicle vehicle)
 void _EJECT_JB700_ROOF(Vehicle vehicle, float x, float y, float z)
 void SET_VEHICLE_LIGHTS(Vehicle vehicle, int state)
 void _SET_VEHICLE_USE_PLAYER_LIGHT_SETTINGS(Vehicle vehicle, BOOL p1)
 void _SET_VEHICLE_LIGHTS_MODE(Vehicle vehicle, int p1)
 void SET_VEHICLE_ALARM(Vehicle vehicle, BOOL state)
 void START_VEHICLE_ALARM(Vehicle vehicle)
 BOOL IS_VEHICLE_ALARM_ACTIVATED(Vehicle vehicle)
 void SET_VEHICLE_INTERIORLIGHT(Vehicle vehicle, BOOL toggle)
 void _0x8821196D91FA2DE5(Any p0, Any p1)
 void SET_VEHICLE_LIGHT_MULTIPLIER(Vehicle vehicle, float multiplier)
 void ATTACH_VEHICLE_TO_TRAILER(Vehicle vehicle, Vehicle trailer, float radius)
 void ATTACH_VEHICLE_ON_TO_TRAILER(Vehicle vehicle, Vehicle trailer, float p2, float p3, float p4, float p5, float p6, float p7, float p8, float p9, float p10, float p11)
 void STABILISE_ENTITY_ATTACHED_TO_HELI(Vehicle vehicle, Entity entity, float p2)
 void DETACH_VEHICLE_FROM_TRAILER(Vehicle vehicle)
 BOOL IS_VEHICLE_ATTACHED_TO_TRAILER(Vehicle vehicle)
 void SET_TRAILER_INVERSE_MASS_SCALE(Vehicle vehicle, float p1)
 void SET_TRAILER_LEGS_RAISED(Vehicle vehicle)
 void _SET_TRAILER_LEGS_LOWERED(Any p0)
 void SET_VEHICLE_TYRE_FIXED(Vehicle vehicle, int tyreIndex)
 void SET_VEHICLE_NUMBER_PLATE_TEXT(Vehicle vehicle, const char* plateText)
 const char* GET_VEHICLE_NUMBER_PLATE_TEXT(Vehicle vehicle)
 int GET_NUMBER_OF_VEHICLE_NUMBER_PLATES()
 void SET_VEHICLE_NUMBER_PLATE_TEXT_INDEX(Vehicle vehicle, int plateIndex)
 int GET_VEHICLE_NUMBER_PLATE_TEXT_INDEX(Vehicle vehicle)
 void SET_RANDOM_TRAINS(BOOL toggle)
 Vehicle CREATE_MISSION_TRAIN(int variation, float x, float y, float z, BOOL direction)
 void SWITCH_TRAIN_TRACK(int intersectionId, BOOL state)
 void SET_TRAIN_TRACK_SPAWN_FREQUENCY(int trackIndex, int frequency)
 void DELETE_ALL_TRAINS()
 void SET_TRAIN_SPEED(Vehicle train, float speed)
 void SET_TRAIN_CRUISE_SPEED(Vehicle train, float speed)
 void SET_RANDOM_BOATS(BOOL toggle)
 void SET_GARBAGE_TRUCKS(BOOL toggle)
 BOOL DOES_VEHICLE_HAVE_STUCK_VEHICLE_CHECK(Vehicle vehicle)
 int GET_VEHICLE_RECORDING_ID(int p0, const char* p1)
 void REQUEST_VEHICLE_RECORDING(int i, const char* name)
 BOOL HAS_VEHICLE_RECORDING_BEEN_LOADED(Any p0, Any* p1)
 void REMOVE_VEHICLE_RECORDING(Any p0, Any* p1)
 Vector3 GET_POSITION_OF_VEHICLE_RECORDING_ID_AT_TIME(int id, float time)
 Vector3 GET_POSITION_OF_VEHICLE_RECORDING_AT_TIME(int p0, float p1, const char* p2)
 Vector3 GET_ROTATION_OF_VEHICLE_RECORDING_ID_AT_TIME(int id, float time)
 Vector3 GET_ROTATION_OF_VEHICLE_RECORDING_AT_TIME(Any p0, float p1, Any* p2)
 float GET_TOTAL_DURATION_OF_VEHICLE_RECORDING_ID(Any p0)
 float GET_TOTAL_DURATION_OF_VEHICLE_RECORDING(Any p0, Any p1)
 float GET_POSITION_IN_RECORDING(Any p0)
 float GET_TIME_POSITION_IN_RECORDING(Any p0)
 void START_PLAYBACK_RECORDED_VEHICLE(Vehicle vehicle, int p1, const char* playback, BOOL p3)
 void START_PLAYBACK_RECORDED_VEHICLE_WITH_FLAGS(Vehicle vehicle, Any p1, const char* playback, Any p3, Any p4, Any p5)
 void _0x1F2E4E06DEA8992B(Vehicle vehicle, BOOL p1)
 void STOP_PLAYBACK_RECORDED_VEHICLE(Vehicle vehicle)
 void PAUSE_PLAYBACK_RECORDED_VEHICLE(Vehicle vehicle)
 void UNPAUSE_PLAYBACK_RECORDED_VEHICLE(Vehicle vehicle)
 BOOL IS_PLAYBACK_GOING_ON_FOR_VEHICLE(Vehicle vehicle)
 BOOL IS_PLAYBACK_USING_AI_GOING_ON_FOR_VEHICLE(Vehicle vehicle)
 int GET_CURRENT_PLAYBACK_FOR_VEHICLE(Vehicle vehicle)
 void SKIP_TO_END_AND_STOP_PLAYBACK_RECORDED_VEHICLE(Vehicle vehicle)
 void SET_PLAYBACK_SPEED(Vehicle vehicle, float speed)
 void START_PLAYBACK_RECORDED_VEHICLE_USING_AI(Any p0, Any p1, Any* p2, float p3, Any p4)
 void SKIP_TIME_IN_PLAYBACK_RECORDED_VEHICLE(Any p0, float p1)
 void SET_PLAYBACK_TO_USE_AI(Vehicle vehicle, int flag)
 void SET_PLAYBACK_TO_USE_AI_TRY_TO_REVERT_BACK_LATER(Any p0, Any p1, Any p2, BOOL p3)
 void _0x5845066D8A1EA7F7(Vehicle vehicle, float x, float y, float z, Any p4)
 void _0x796A877E459B99EA(Any p0, float p1, float p2, float p3)
 void _0xFAF2A78061FD9EF4(Any p0, float p1, float p2, float p3)
 void _0x063AE2B2CC273588(Any p0, BOOL p1)
 void EXPLODE_VEHICLE_IN_CUTSCENE(Vehicle vehicle, BOOL p1)
 void ADD_VEHICLE_STUCK_CHECK_WITH_WARP(Any p0, float p1, Any p2, BOOL p3, BOOL p4, BOOL p5, Any p6)
 void SET_VEHICLE_MODEL_IS_SUPPRESSED(Hash model, BOOL suppressed)
 Vehicle GET_RANDOM_VEHICLE_IN_SPHERE(float x, float y, float z, float radius, Hash modelHash, int flags)
 Vehicle GET_RANDOM_VEHICLE_FRONT_BUMPER_IN_SPHERE(float p0, float p1, float p2, float p3, int p4, int p5, int p6)
 Vehicle GET_RANDOM_VEHICLE_BACK_BUMPER_IN_SPHERE(float p0, float p1, float p2, float p3, int p4, int p5, int p6)
 Vehicle GET_CLOSEST_VEHICLE(float x, float y, float z, float radius, Hash modelHash, int flags)
 Entity GET_TRAIN_CARRIAGE(Vehicle train, int trailerNumber)
 void DELETE_MISSION_TRAIN(Vehicle* train)
 void SET_MISSION_TRAIN_AS_NO_LONGER_NEEDED(Vehicle* train, BOOL p1)
 void SET_MISSION_TRAIN_COORDS(Vehicle train, float x, float y, float z)
 BOOL IS_THIS_MODEL_A_BOAT(Hash model)
 BOOL IS_THIS_MODEL_A_JETSKI(Hash model)
 BOOL IS_THIS_MODEL_A_PLANE(Hash model)
 BOOL IS_THIS_MODEL_A_HELI(Hash model)
 BOOL IS_THIS_MODEL_A_CAR(Hash model)
 BOOL IS_THIS_MODEL_A_TRAIN(Hash model)
 BOOL IS_THIS_MODEL_A_BIKE(Hash model)
 BOOL IS_THIS_MODEL_A_BICYCLE(Hash model)
 BOOL IS_THIS_MODEL_A_QUADBIKE(Hash model)
 BOOL _IS_THIS_MODEL_AN_AMPHIBIOUS_CAR(Hash model)
 BOOL _IS_THIS_MODEL_AN_AMPHIBIOUS_QUADBIKE(Hash model)
 void SET_HELI_BLADES_FULL_SPEED(Vehicle vehicle)
 void SET_HELI_BLADES_SPEED(Vehicle vehicle, float speed)
 void _0x99CAD8E7AFDB60FA(Vehicle vehicle, float p1, float p2)
 void SET_VEHICLE_CAN_BE_TARGETTED(Vehicle vehicle, BOOL state)
 void _0xDBC631F109350B8C(Vehicle vehicle, BOOL p1)
 void SET_VEHICLE_CAN_BE_VISIBLY_DAMAGED(Vehicle vehicle, BOOL state)
 void _SET_VEHICLE_LIGHTS_CAN_BE_VISIBLY_DAMAGED(Vehicle vehicle, BOOL p1)
 void _0x2311DD7159F00582(Vehicle vehicle, BOOL p1)
 void _0x065D03A9D6B2C6B5(Any p0, Any p1)
 float GET_VEHICLE_DIRT_LEVEL(Vehicle vehicle)
 void SET_VEHICLE_DIRT_LEVEL(Vehicle vehicle, float dirtLevel)
 BOOL _IS_VEHICLE_DAMAGED(Vehicle vehicle)
 BOOL IS_VEHICLE_DOOR_FULLY_OPEN(Vehicle vehicle, int doorIndex)
 void SET_VEHICLE_ENGINE_ON(Vehicle vehicle, BOOL value, BOOL instantly, BOOL noAutoTurnOn)
 void SET_VEHICLE_UNDRIVEABLE(Vehicle vehicle, BOOL toggle)
 void SET_VEHICLE_PROVIDES_COVER(Vehicle vehicle, BOOL toggle)
 void SET_VEHICLE_DOOR_CONTROL(Vehicle vehicle, int doorIndex, int speed, float angle)
 void SET_VEHICLE_DOOR_LATCHED(Vehicle vehicle, int doorIndex, BOOL p2, BOOL p3, BOOL p4)
 float GET_VEHICLE_DOOR_ANGLE_RATIO(Vehicle vehicle, int door)
 Ped GET_PED_USING_VEHICLE_DOOR(Vehicle vehicle, int doorIndex)
 void SET_VEHICLE_DOOR_SHUT(Vehicle vehicle, int doorIndex, BOOL closeInstantly)
 void SET_VEHICLE_DOOR_BROKEN(Vehicle vehicle, int doorIndex, BOOL deleteDoor)
 void SET_VEHICLE_CAN_BREAK(Vehicle vehicle, BOOL toggle)
 BOOL DOES_VEHICLE_HAVE_ROOF(Vehicle vehicle)
 void _0xC4B3347BD68BD609(Any p0)
 void _0xD3301660A57C9272(Any p0)
 void _0xB9562064627FF9DB(Any p0, Any p1)
 BOOL IS_BIG_VEHICLE(Vehicle vehicle)
 int GET_NUMBER_OF_VEHICLE_COLOURS(Vehicle vehicle)
 void SET_VEHICLE_COLOUR_COMBINATION(Vehicle vehicle, int colorCombination)
 int GET_VEHICLE_COLOUR_COMBINATION(Vehicle vehicle)
 void _SET_VEHICLE_XENON_LIGHTS_COLOR(Vehicle vehicle, int colorIndex)
 int _GET_VEHICLE_XENON_LIGHTS_COLOR(Vehicle vehicle)
 void SET_VEHICLE_IS_CONSIDERED_BY_PLAYER(Vehicle vehicle, BOOL toggle)
 void _0xBE5C1255A1830FF5(Vehicle vehicle, BOOL toggle)
 void _0x9BECD4B9FEF3F8A6(Vehicle vehicle, BOOL p1)
 void _0x88BC673CA9E0AE99(Vehicle vehicle, BOOL p1)
 void _0xE851E480B814D4BA(Vehicle vehicle, BOOL p1)
 void GET_RANDOM_VEHICLE_MODEL_IN_MEMORY(BOOL p0, Hash* modelHash, int* successIndicator)
 int GET_VEHICLE_DOOR_LOCK_STATUS(Vehicle vehicle)
 Any _0xCA4AC3EAAE46EC7B(Any p0, Any p1)
 BOOL IS_VEHICLE_DOOR_DAMAGED(Vehicle veh, int doorID)
 void _SET_VEHICLE_DOOR_CAN_BREAK(Vehicle vehicle, int doorIndex, BOOL isBreakable)
 BOOL IS_VEHICLE_BUMPER_BOUNCING(Vehicle vehicle, BOOL frontBumper)
 BOOL IS_VEHICLE_BUMPER_BROKEN_OFF(Vehicle vehicle, BOOL front)
 BOOL IS_COP_VEHICLE_IN_AREA_3D(float x1, float x2, float y1, float y2, float z1, float z2)
 BOOL IS_VEHICLE_ON_ALL_WHEELS(Vehicle vehicle)
 Any _0x5873C14A52D74236(Any p0)
 Hash GET_VEHICLE_LAYOUT_HASH(Vehicle vehicle)
 Any _0xA01BC64DD4BFBBAC(Vehicle vehicle, int p1)
 void SET_RENDER_TRAIN_AS_DERAILED(Vehicle train, BOOL toggle)
 void SET_VEHICLE_EXTRA_COLOURS(Vehicle vehicle, int pearlescentColor, int wheelColor)
 void GET_VEHICLE_EXTRA_COLOURS(Vehicle vehicle, int* pearlescentColor, int* wheelColor)
 void _SET_VEHICLE_INTERIOR_COLOR(Vehicle vehicle, int color)
 void _GET_VEHICLE_INTERIOR_COLOR(Vehicle vehicle, int* color)
 void _SET_VEHICLE_DASHBOARD_COLOR(Vehicle vehicle, int color)
 void _GET_VEHICLE_DASHBOARD_COLOR(Vehicle vehicle, int* color)
 void STOP_ALL_GARAGE_ACTIVITY()
 void SET_VEHICLE_FIXED(Vehicle vehicle)
 void SET_VEHICLE_DEFORMATION_FIXED(Vehicle vehicle)
 void _SET_VEHICLE_CAN_ENGINE_OPERATE_ON_FIRE(Vehicle vehicle, BOOL toggle)
 void SET_VEHICLE_CAN_LEAK_OIL(Vehicle vehicle, BOOL toggle)
 void SET_VEHICLE_CAN_LEAK_PETROL(Vehicle vehicle, BOOL toggle)
 void SET_DISABLE_VEHICLE_PETROL_TANK_FIRES(Vehicle vehicle, BOOL toggle)
 void SET_DISABLE_VEHICLE_PETROL_TANK_DAMAGE(Vehicle vehicle, BOOL toggle)
 void SET_DISABLE_VEHICLE_ENGINE_FIRES(Vehicle vehicle, BOOL toggle)
 void _0xC50CE861B55EAB8B(Vehicle vehicle, BOOL p1)
 void _0x6EBFB22D646FFC18(Vehicle vehicle, BOOL p1)
 void SET_DISABLE_PRETEND_OCCUPANTS(Vehicle vehicle, BOOL toggle)
 void REMOVE_VEHICLES_FROM_GENERATORS_IN_AREA(float x1, float y1, float z1, float x2, float y2, float z2, Any unk)
 void SET_VEHICLE_STEER_BIAS(Vehicle vehicle, float value)
 BOOL IS_VEHICLE_EXTRA_TURNED_ON(Vehicle vehicle, int extraId)
 void SET_VEHICLE_EXTRA(Vehicle vehicle, int extraId, BOOL disable)
 BOOL DOES_EXTRA_EXIST(Vehicle vehicle, int extraId)
 Any _0x534E36D4DB9ECC5D(Any p0, Any p1)
 void SET_CONVERTIBLE_ROOF(Vehicle vehicle, BOOL p1)
 void LOWER_CONVERTIBLE_ROOF(Vehicle vehicle, BOOL instantlyLower)
 void RAISE_CONVERTIBLE_ROOF(Vehicle vehicle, BOOL instantlyRaise)
 int GET_CONVERTIBLE_ROOF_STATE(Vehicle vehicle)
 BOOL IS_VEHICLE_A_CONVERTIBLE(Vehicle vehicle, BOOL p1)
 void _TRANSFORM_VEHICLE_TO_SUBMARINE(Vehicle vehicle, BOOL noAnimation)
 void _TRANSFORM_SUBMARINE_TO_VEHICLE(Vehicle vehicle, BOOL noAnimation)
 BOOL _GET_IS_SUBMARINE_VEHICLE_TRANSFORMED(Vehicle vehicle)
 BOOL IS_VEHICLE_STOPPED_AT_TRAFFIC_LIGHTS(Vehicle vehicle)
 void SET_VEHICLE_DAMAGE(Vehicle vehicle, float xOffset, float yOffset, float zOffset, float damage, float radius, BOOL p6)
 void _0x35BB21DE06784373(Any p0, Any p1)
 float GET_VEHICLE_ENGINE_HEALTH(Vehicle vehicle)
 void SET_VEHICLE_ENGINE_HEALTH(Vehicle vehicle, float health)
 void _0x2A86A0475B6A1434(Any p0, Any p1)
 float GET_VEHICLE_PETROL_TANK_HEALTH(Vehicle vehicle)
 void SET_VEHICLE_PETROL_TANK_HEALTH(Vehicle vehicle, float health)
 BOOL IS_VEHICLE_STUCK_TIMER_UP(Vehicle vehicle, int p1, int p2)
 void RESET_VEHICLE_STUCK_TIMER(Vehicle vehicle, int nullAttributes)
 BOOL IS_VEHICLE_DRIVEABLE(Vehicle vehicle, BOOL isOnFireCheck)
 void SET_VEHICLE_HAS_BEEN_OWNED_BY_PLAYER(Vehicle vehicle, BOOL owned)
 void SET_VEHICLE_NEEDS_TO_BE_HOTWIRED(Vehicle vehicle, BOOL toggle)
 void _0x9F3F689B814F2599(Vehicle vehicle, BOOL p1)
 void _0x4E74E62E0A97E901(Vehicle vehicle, BOOL p1)
 void START_VEHICLE_HORN(Vehicle vehicle, int duration, Hash mode, BOOL forever)
 void _SET_VEHICLE_SILENT(Vehicle vehicle, BOOL toggle)
 void SET_VEHICLE_HAS_STRONG_AXLES(Vehicle vehicle, BOOL toggle)
 const char* GET_DISPLAY_NAME_FROM_VEHICLE_MODEL(Hash modelHash)
 Vector3 GET_VEHICLE_DEFORMATION_AT_POS(Vehicle vehicle, float offsetX, float offsetY, float offsetZ)
 void SET_VEHICLE_LIVERY(Vehicle vehicle, Hash livery)
 Vehicle GET_VEHICLE_LIVERY(Vehicle trailers2)
 int GET_VEHICLE_LIVERY_COUNT(Vehicle vehicle)
 void _SET_VEHICLE_ROOF_LIVERY(Vehicle vehicle, int livery)
 int _GET_VEHICLE_ROOF_LIVERY(Vehicle vehicle)
 int _GET_VEHICLE_ROOF_LIVERY_COUNT(Vehicle vehicle)
 BOOL IS_VEHICLE_WINDOW_INTACT(Vehicle vehicle, int windowIndex)
 BOOL ARE_ALL_VEHICLE_WINDOWS_INTACT(Vehicle vehicle)
 BOOL ARE_ANY_VEHICLE_SEATS_FREE(Vehicle vehicle)
 void RESET_VEHICLE_WHEELS(Vehicle vehicle, BOOL toggle)
 BOOL IS_HELI_PART_BROKEN(Vehicle vehicle, BOOL p1, BOOL p2, BOOL p3)
 float GET_HELI_MAIN_ROTOR_HEALTH(Vehicle vehicle)
 float GET_HELI_TAIL_ROTOR_HEALTH(Vehicle vehicle)
 float GET_HELI_TAIL_BOOM_HEALTH(Vehicle vehicle)
 void _0x4056EA1105F5ABD7(Any p0, Any p1)
 void _SET_HELI_TAIL_ROTOR_HEALTH(Any p0, Any p1)
 void SET_HELI_TAIL_EXPLODE_THROW_DASHBOARD(Vehicle vehicle, BOOL p1)
 void SET_VEHICLE_NAME_DEBUG(Vehicle vehicle, const char* name)
 void SET_VEHICLE_EXPLODES_ON_HIGH_EXPLOSION_DAMAGE(Vehicle vehicle, BOOL toggle)
 void _0xD565F438137F0E10(Any p0, Any p1)
 void _0x3441CAD2F2231923(Vehicle vehicle, BOOL p1)
 void SET_VEHICLE_DISABLE_TOWING(Vehicle vehicle, BOOL toggle)
 BOOL _DOES_VEHICLE_HAVE_LANDING_GEAR(Vehicle vehicle)
 void CONTROL_LANDING_GEAR(Vehicle vehicle, int state)
 int GET_LANDING_GEAR_STATE(Vehicle vehicle)
 BOOL IS_ANY_VEHICLE_NEAR_POINT(float x, float y, float z, float radius)
 void REQUEST_VEHICLE_HIGH_DETAIL_MODEL(Vehicle vehicle)
 void REMOVE_VEHICLE_HIGH_DETAIL_MODEL(Vehicle vehicle)
 BOOL IS_VEHICLE_HIGH_DETAIL(Vehicle vehicle)
 void REQUEST_VEHICLE_ASSET(Hash vehicleHash, int vehicleAsset)
 BOOL HAS_VEHICLE_ASSET_LOADED(int vehicleAsset)
 void REMOVE_VEHICLE_ASSET(int vehicleAsset)
 void SET_VEHICLE_TOW_TRUCK_ARM_POSITION(Vehicle vehicle, float position)
 void ATTACH_VEHICLE_TO_TOW_TRUCK(Vehicle towTruck, Vehicle vehicle, BOOL rear, float hookOffsetX, float hookOffsetY, float hookOffsetZ)
 void DETACH_VEHICLE_FROM_TOW_TRUCK(Vehicle towTruck, Vehicle vehicle)
 BOOL DETACH_VEHICLE_FROM_ANY_TOW_TRUCK(Vehicle vehicle)
 BOOL IS_VEHICLE_ATTACHED_TO_TOW_TRUCK(Vehicle towTruck, Vehicle vehicle)
 Entity GET_ENTITY_ATTACHED_TO_TOW_TRUCK(Vehicle towTruck)
 Any SET_VEHICLE_AUTOMATICALLY_ATTACHES(Vehicle vehicle, BOOL p1, Any p2)
 void SET_VEHICLE_BULLDOZER_ARM_POSITION(Vehicle vehicle, float position, BOOL p2)
 void SET_VEHICLE_TANK_TURRET_POSITION(Vehicle vehicle, float position, BOOL p2)
 void _0x0581730AB9380412(Any p0, Any p1, Any p2, Any p3, Any p4, Any p5)
 void _0x737E398138550FFF(Any p0, Any p1)
 void _0x1093408B4B9D1146(Any p0, float p1)
 void _DISABLE_VEHICLE_TURRET_MOVEMENT_THIS_FRAME(Any p0)
 void SET_VEHICLE_FLIGHT_NOZZLE_POSITION(Vehicle vehicle, float angleRatio)
 void SET_VEHICLE_FLIGHT_NOZZLE_POSITION_IMMEDIATE(Vehicle vehicle, float angle)
 float _GET_VEHICLE_FLIGHT_NOZZLE_POSITION(Vehicle plane)
 void _SET_DISABLE_VEHICLE_FLIGHT_NOZZLE_POSITION(Any p0, Any p1)
 BOOL _0xA4822F1CF23F4810(Vector3* outVec, Any p1, Vector3* outVec1, Any p3, Any p4, Any p5, Any p6, Any p7, Any p8)
 void SET_VEHICLE_BURNOUT(Vehicle vehicle, BOOL toggle)
 BOOL IS_VEHICLE_IN_BURNOUT(Vehicle vehicle)
 void SET_VEHICLE_REDUCE_GRIP(Vehicle vehicle, BOOL toggle)
 void _0x6DEE944E1EE90CFB(Any p0, Any p1)
 void SET_VEHICLE_INDICATOR_LIGHTS(Vehicle vehicle, int turnSignal, BOOL toggle)
 void SET_VEHICLE_BRAKE_LIGHTS(Vehicle vehicle, BOOL toggle)
 void SET_VEHICLE_HANDBRAKE(Vehicle vehicle, BOOL toggle)
 void SET_VEHICLE_BRAKE(Vehicle vehicle, BOOL toggle)
 void _0x48ADC8A773564670()
 BOOL _0x91D6DD290888CBAB()
 void _0x51DB102F4A3BA5E0(BOOL toggle)
 void _0xA4A9A4C40E615885(Any p0)
 BOOL GET_VEHICLE_TRAILER_VEHICLE(Vehicle vehicle, Vehicle* trailer)
 void _0xCAC66558B944DA67(Vehicle vehicle, BOOL toggle)
 void SET_VEHICLE_RUDDER_BROKEN(Vehicle vehicle, BOOL toggle)
 void SET_CONVERTIBLE_ROOF_LATCH_STATE(Vehicle vehicle, BOOL state)
 float GET_VEHICLE_ESTIMATED_MAX_SPEED(Vehicle vehicle)
 float GET_VEHICLE_MAX_BRAKING(Vehicle vehicle)
 float GET_VEHICLE_MAX_TRACTION(Vehicle vehicle)
 float GET_VEHICLE_ACCELERATION(Vehicle vehicle)
 float GET_VEHICLE_MODEL_ESTIMATED_MAX_SPEED(Hash modelHash)
 float GET_VEHICLE_MODEL_MAX_BRAKING(Hash modelHash)
 float GET_VEHICLE_MODEL_MAX_BRAKING_MAX_MODS(Hash modelHash)
 float GET_VEHICLE_MODEL_MAX_TRACTION(Hash modelHash)
 float GET_VEHICLE_MODEL_ACCELERATION(Hash modelHash)
 float _GET_VEHICLE_MODEL_ESTIMATED_AGILITY(Hash modelHash)
 float _GET_VEHICLE_MODEL_MAX_KNOTS(Hash modelHash)
 float _GET_VEHICLE_MODEL_MOVE_RESISTANCE(Hash modelHash)
 float GET_VEHICLE_CLASS_ESTIMATED_MAX_SPEED(int vehicleClass)
 float GET_VEHICLE_CLASS_MAX_TRACTION(int vehicleClass)
 float GET_VEHICLE_CLASS_MAX_AGILITY(int vehicleClass)
 float GET_VEHICLE_CLASS_MAX_ACCELERATION(int vehicleClass)
 float GET_VEHICLE_CLASS_MAX_BRAKING(int vehicleClass)
 int _ADD_SPEED_ZONE_FOR_COORD(float x, float y, float z, float radius, float speed, BOOL p5)
 BOOL _REMOVE_SPEED_ZONE(int speedzone)
 void OPEN_BOMB_BAY_DOORS(Vehicle vehicle)
 void CLOSE_BOMB_BAY_DOORS(Vehicle vehicle)
 BOOL _ARE_BOMB_BAY_DOORS_OPEN(Vehicle aircraft)
 BOOL IS_VEHICLE_SEARCHLIGHT_ON(Vehicle vehicle)
 void SET_VEHICLE_SEARCHLIGHT(Vehicle heli, BOOL toggle, BOOL canBeUsedByAI)
 BOOL _0x639431E895B9AA57(Ped ped, Vehicle vehicle, BOOL p2, BOOL p3, BOOL p4)
 Vector3 _GET_ENTRY_POSITION_OF_DOOR(Vehicle vehicle, int doorIndex)
 BOOL CAN_SHUFFLE_SEAT(Vehicle vehicle, Any p1)
 int GET_NUM_MOD_KITS(Vehicle vehicle)
 void SET_VEHICLE_MOD_KIT(Vehicle vehicle, int modKit)
 int GET_VEHICLE_MOD_KIT(Vehicle vehicle)
 int GET_VEHICLE_MOD_KIT_TYPE(Vehicle vehicle)
 int GET_VEHICLE_WHEEL_TYPE(Vehicle vehicle)
 void SET_VEHICLE_WHEEL_TYPE(Vehicle vehicle, int WheelType)
 int GET_NUM_MOD_COLORS(int p0, BOOL p1)
 void SET_VEHICLE_MOD_COLOR_1(Vehicle vehicle, int paintType, int color, int p3)
 void SET_VEHICLE_MOD_COLOR_2(Vehicle vehicle, int paintType, int color)
 void GET_VEHICLE_MOD_COLOR_1(Vehicle vehicle, int* paintType, int* color, int* p3)
 void GET_VEHICLE_MOD_COLOR_2(Vehicle vehicle, int* paintType, int* color)
 const char* GET_VEHICLE_MOD_COLOR_1_NAME(Vehicle vehicle, BOOL p1)
 const char* GET_VEHICLE_MOD_COLOR_2_NAME(Vehicle vehicle)
 BOOL _IS_VEHICLE_MOD_LOAD_DONE(Vehicle vehicle)
 void SET_VEHICLE_MOD(Vehicle vehicle, int modType, int modIndex, BOOL customTires)
 int GET_VEHICLE_MOD(Vehicle vehicle, int modType)
 BOOL GET_VEHICLE_MOD_VARIATION(Vehicle vehicle, int modType)
 int GET_NUM_VEHICLE_MODS(Vehicle vehicle, int modType)
 void REMOVE_VEHICLE_MOD(Vehicle vehicle, int modType)
 void TOGGLE_VEHICLE_MOD(Vehicle vehicle, int modType, BOOL toggle)
 BOOL IS_TOGGLE_MOD_ON(Vehicle vehicle, int modType)
 const char* GET_MOD_TEXT_LABEL(Vehicle vehicle, int modType, int modValue)
 const char* GET_MOD_SLOT_NAME(Vehicle vehicle, int modType)
 const char* GET_LIVERY_NAME(Vehicle vehicle, int liveryIndex)
 float GET_VEHICLE_MOD_MODIFIER_VALUE(Vehicle vehicle, int modType, int modIndex)
 Hash GET_VEHICLE_MOD_IDENTIFIER_HASH(Vehicle vehicle, int modType, int modIndex)
 void PRELOAD_VEHICLE_MOD(Any p0, int modType, Any p2)
 BOOL HAS_PRELOAD_MODS_FINISHED(Any p0)
 void RELEASE_PRELOAD_MODS(Vehicle vehicle)
 void SET_VEHICLE_TYRE_SMOKE_COLOR(Vehicle vehicle, int r, int g, int b)
 void GET_VEHICLE_TYRE_SMOKE_COLOR(Vehicle vehicle, int* r, int* g, int* b)
 void SET_VEHICLE_WINDOW_TINT(Vehicle vehicle, int tint)
 int GET_VEHICLE_WINDOW_TINT(Vehicle vehicle)
 int GET_NUM_VEHICLE_WINDOW_TINTS()
 void GET_VEHICLE_COLOR(Vehicle vehicle, int* r, int* g, int* b)
 int _0xEEBFC7A7EFDC35B4(Vehicle vehicle)
 Hash GET_VEHICLE_CAUSE_OF_DESTRUCTION(Vehicle vehicle)
 void _0x5EE5632F47AE9695(Vehicle vehicle, float health)
 BOOL GET_IS_LEFT_VEHICLE_HEADLIGHT_DAMAGED(Vehicle vehicle)
 BOOL GET_IS_RIGHT_VEHICLE_HEADLIGHT_DAMAGED(Vehicle vehicle)
 BOOL _IS_VEHICLE_ENGINE_ON_FIRE(Vehicle vehicle)
 void MODIFY_VEHICLE_TOP_SPEED(Vehicle vehicle, float value)
 void _SET_VEHICLE_MAX_SPEED(Vehicle vehicle, float speed)
 void _0x1CF38D529D7441D9(Vehicle vehicle, BOOL toggle)
 void _0x1F9FB66F3A3842D2(Vehicle vehicle, BOOL p1)
 void _0x59C3757B3B7408E8(Any p0, Any p1, Any p2)
 Any ADD_VEHICLE_COMBAT_ANGLED_AVOIDANCE_AREA(float p0, float p1, float p2, float p3, float p4, float p5, float p6)
 void REMOVE_VEHICLE_COMBAT_AVOIDANCE_AREA(Any p0)
 BOOL _IS_ANY_PASSENGER_RAPPELING_FROM_VEHICLE(Vehicle vehicle)
 void SET_VEHICLE_CHEAT_POWER_INCREASE(Vehicle vehicle, float value)
 void _0x0AD9E8F87FF7C16F(Any p0, BOOL p1)
 void SET_VEHICLE_IS_WANTED(Vehicle vehicle, BOOL state)
 void _0xF488C566413B4232(Any p0, float p1)
)
 void _0x0F3B4D4E43177236(Any p0, BOOL p1)
)
 void DISABLE_PLANE_AILERON(Vehicle vehicle, BOOL p1, BOOL p2)
 BOOL GET_IS_VEHICLE_ENGINE_RUNNING(Vehicle vehicle)
 void SET_VEHICLE_USE_ALTERNATE_HANDLING(Vehicle vehicle, BOOL toggle)
 void SET_BIKE_ON_STAND(Vehicle vehicle, float x, float y)
 void _0xAB04325045427AAE(Vehicle vehicle, BOOL p1)
 void _0xCFD778E7904C255E(Vehicle vehicle)
 void SET_LAST_DRIVEN_VEHICLE(Vehicle vehicle)
 Vehicle GET_LAST_DRIVEN_VEHICLE()
 void CLEAR_LAST_DRIVEN_VEHICLE()
 void SET_VEHICLE_HAS_BEEN_DRIVEN_FLAG(Vehicle vehicle, BOOL toggle)
 void SET_TASK_VEHICLE_GOTO_PLANE_MIN_HEIGHT_ABOVE_TERRAIN(Vehicle plane, int height)
 void SET_VEHICLE_LOD_MULTIPLIER(Vehicle vehicle, float multiplier)
 void SET_VEHICLE_CAN_SAVE_IN_GARAGE(Vehicle vehicle, BOOL toggle)
 int _GET_VEHICLE_NUMBER_OF_BROKEN_OFF_BONES(Vehicle vehicle)
 int _GET_VEHICLE_NUMBER_OF_BROKEN_BONES(Vehicle vehicle)
 void _0x4D9D109F63FEE1D4(Any p0, BOOL p1)
 void _0x279D50DE5652D935(Vehicle vehicle, BOOL toggle)
 void COPY_VEHICLE_DAMAGES(Vehicle sourceVehicle, Vehicle targetVehicle)
 void _0xF25E02CB9C5818F8()
 void SET_LIGHTS_CUTOFF_DISTANCE_TWEAK(float distance)
 void SET_VEHICLE_SHOOT_AT_TARGET(Ped driver, Entity entity, float xTarget, float yTarget, float zTarget)
 BOOL GET_VEHICLE_LOCK_ON_TARGET(Vehicle vehicle, Entity* entity)
 void SET_FORCE_HD_VEHICLE(Vehicle vehicle, BOOL toggle)
 void _0x182F266C2D9E2BEB(Vehicle vehicle, float p1)
 int GET_VEHICLE_PLATE_TYPE(Vehicle vehicle)
 void TRACK_VEHICLE_VISIBILITY(Vehicle vehicle)
 BOOL IS_VEHICLE_VISIBLE(Vehicle vehicle)
 void SET_VEHICLE_GRAVITY(Vehicle vehicle, BOOL toggle)
 void _0xE6C0C80B8C867537(BOOL p0)
 void _0xF051D9BFB6BA39C0(Any p0)
 float _0x36492C2F0D134C56(Vehicle vehicle)
 BOOL _0x48C633E94A8142A7(Vehicle vehicle)
 void SET_VEHICLE_INACTIVE_DURING_PLAYBACK(Vehicle vehicle, BOOL toggle)
 void SET_VEHICLE_ACTIVE_DURING_PLAYBACK(Any p0, BOOL p1)
 BOOL IS_VEHICLE_SPRAYABLE(Vehicle vehicle)
 void SET_VEHICLE_ENGINE_CAN_DEGRADE(Vehicle vehicle, BOOL toggle)
 void _0xF0E4BA16D1DB546C(Vehicle vehicle, int p1, int p2)
 void _0xF87D9F2301F7D206(Vehicle vehicle)
 BOOL IS_PLANE_LANDING_GEAR_INTACT(Vehicle plane)
 BOOL ARE_PLANE_PROPELLERS_INTACT(Vehicle plane)
 Any _0x4C815EB175086F84(Any p0, Any p1)
 void SET_VEHICLE_CAN_DEFORM_WHEELS(Vehicle vehicle, BOOL toggle)
 BOOL IS_VEHICLE_STOLEN(Vehicle vehicle)
 void SET_VEHICLE_IS_STOLEN(Vehicle vehicle, BOOL isStolen)
 void SET_PLANE_TURBULENCE_MULTIPLIER(Vehicle vehicle, float value)
 BOOL _ARE_PLANE_WINGS_INTACT(Vehicle plane)
 void _0xB264C4D2F2B0A78B(Vehicle vehicle)
 void DETACH_VEHICLE_FROM_CARGOBOB(Vehicle vehicle, Vehicle cargobob)
 BOOL DETACH_VEHICLE_FROM_ANY_CARGOBOB(Vehicle vehicle)
 Any _DETACH_ENTITY_FROM_CARGOBOB(Vehicle cargobob, Entity entity)
 BOOL IS_VEHICLE_ATTACHED_TO_CARGOBOB(Vehicle cargobob, Vehicle vehicleAttached)
 Vehicle GET_VEHICLE_ATTACHED_TO_CARGOBOB(Vehicle cargobob)
 Any _GET_ENTITY_ATTACHED_TO_CARGOBOB(Any p0)
 void ATTACH_VEHICLE_TO_CARGOBOB(Vehicle vehicle, Vehicle cargobob, int p2, float x, float y, float z)
 void _ATTACH_ENTITY_TO_CARGOBOB(Any p0, Any p1, Any p2, Any p3, Any p4, Any p5)
 void _0x571FEB383F629926(Vehicle cargobob, BOOL p1)
 void _0x1F34B0626C594380(Any p0, Any p1)
 Any _0x2C1D8B3B19E517CC(Any p0, Any p1)
 Vector3 _GET_CARGOBOB_HOOK_POSITION(Vehicle cargobob)
 BOOL DOES_CARGOBOB_HAVE_PICK_UP_ROPE(Vehicle cargobob)
 void CREATE_PICK_UP_ROPE_FOR_CARGOBOB(Vehicle cargobob, int state)
 void REMOVE_PICK_UP_ROPE_FOR_CARGOBOB(Vehicle cargobob)
 void _SET_CARGOBOB_HOOK_POSITION(Any p0, float p1, float p2, int state)
 void _0xC0ED6438E6D39BA8(Any p0, Any p1, Any p2)
 void SET_CARGOBOB_PICKUP_ROPE_DAMPING_MULTIPLIER(Any p0, Any p1)
 void SET_CARGOBOB_PICKUP_ROPE_TYPE(Any p0, Any p1)
 BOOL DOES_CARGOBOB_HAVE_PICKUP_MAGNET(Vehicle cargobob)
 void SET_CARGOBOB_PICKUP_MAGNET_ACTIVE(Vehicle cargobob, BOOL isActive)
 void SET_CARGOBOB_PICKUP_MAGNET_STRENGTH(Vehicle cargobob, float strength)
 void SET_CARGOBOB_PICKUP_MAGNET_EFFECT_RADIUS(Vehicle cargobob, float p1)
 void SET_CARGOBOB_PICKUP_MAGNET_REDUCED_FALLOFF(Vehicle cargobob, float p1)
 void SET_CARGOBOB_PICKUP_MAGNET_PULL_ROPE_LENGTH(Vehicle cargobob, float p1)
 void SET_CARGOBOB_PICKUP_MAGNET_PULL_STRENGTH(Vehicle cargobob, float p1)
 void SET_CARGOBOB_PICKUP_MAGNET_FALLOFF(Vehicle vehicle, float p1)
 void SET_CARGOBOB_PICKUP_MAGNET_REDUCED_STRENGTH(Vehicle vehicle, Vehicle cargobob)
 void _0x9BDDC73CC6A115D4(Vehicle vehicle, BOOL p1, BOOL p2)
 void _0x56EB5E94318D3FB6(Vehicle vehicle, BOOL p1)
 BOOL DOES_VEHICLE_HAVE_WEAPONS(Vehicle vehicle)
 void _0x2C4A1590ABF43E8B(Vehicle vehicle, BOOL p1)
 void DISABLE_VEHICLE_WEAPON(BOOL disabled, Hash weaponHash, Vehicle vehicle, Ped owner)
 Any _IS_VEHICLE_WEAPON_DISABLED(Any p0, Any p1, Any p2)
 void _0xE05DD0E9707003A3(Any p0, BOOL p1)
 void _SET_VEHICLE_CLOSE_DOOR_DEFERED_ACTION(Any p0, BOOL p1)
 int GET_VEHICLE_CLASS(Vehicle vehicle)
 int GET_VEHICLE_CLASS_FROM_NAME(Hash modelHash)
 void SET_PLAYERS_LAST_VEHICLE(Vehicle vehicle)
 void SET_VEHICLE_CAN_BE_USED_BY_FLEEING_PEDS(Vehicle vehicle, BOOL toggle)
 void _0xE5810AC70602F2F5(Vehicle vehicle, float p1)
 void SET_VEHICLE_DROPS_MONEY_WHEN_BLOWN_UP(Vehicle vehicle, BOOL toggle)
 void _SET_VEHICLE_JET_ENGINE_ON(Vehicle vehicle, BOOL toggle)
 void _0x6A973569BA094650(Any p0, Any p1)
 void _SET_VEHICLE_HANDLING_HASH_FOR_AI(Vehicle vehicle, Hash hash)
 void SET_VEHICLE_EXTENDED_REMOVAL_RANGE(Vehicle vehicle, int range)
 void SET_VEHICLE_STEERING_BIAS_SCALAR(Any p0, float p1)
 void _SET_HELICOPTER_ROLL_PITCH_YAW_MULT(Vehicle helicopter, float multiplier)
 void SET_VEHICLE_FRICTION_OVERRIDE(Vehicle vehicle, float friction)
 void SET_VEHICLE_WHEELS_CAN_BREAK_OFF_WHEN_BLOW_UP(Vehicle vehicle, BOOL toggle)
 BOOL _0xF78F94D60248C737(Vehicle vehicle, BOOL p1)
 void SET_VEHICLE_CEILING_HEIGHT(Vehicle vehicle, float height)
 void _0x5E569EC46EC21CAE(Vehicle vehicle, BOOL toggle)
 void CLEAR_VEHICLE_ROUTE_HISTORY(Vehicle vehicle)
 BOOL DOES_VEHICLE_EXIST_WITH_DECORATOR(const char* decorator)
 void SET_VEHICLE_EXCLUSIVE_DRIVER(Vehicle vehicle, BOOL toggle)
 void _SET_VEHICLE_EXCLUSIVE_DRIVER_2(Vehicle vehicle, Ped ped, int index)
 Any _0xB09D25E77C33EB3F(Any p0, Any p1, Any p2)
 void _DISABLE_PLANE_PROPELLER(Vehicle vehicle, Any p1)
 void SET_VEHICLE_FORCE_AFTERBURNER(Vehicle vehicle, BOOL toggle)
 void _SET_DISABLE_VEHICLE_WINDOW_COLLISIONS(Any p0, Any p1)
 void _0xB68CFAF83A02768D(Any p0, Any p1)
 void _0x0205F5365292D2EB(Any p0, Any p1)
 void _0xCF9159024555488C(Any p0)
 void SET_DISTANT_CARS_ENABLED(BOOL toggle)
 void _SET_VEHICLE_NEON_LIGHTS_COLOUR(Vehicle vehicle, int r, int g, int b)
 void _0xB93B2867F7B479D1(Any p0, Any p1)
 void _GET_VEHICLE_NEON_LIGHTS_COLOUR(Vehicle vehicle, int* r, int* g, int* b)
 void _SET_VEHICLE_NEON_LIGHT_ENABLED(Vehicle vehicle, int index, BOOL toggle)
 BOOL _IS_VEHICLE_NEON_LIGHT_ENABLED(Vehicle vehicle, int index)
 void _0x35E0654F4BAD7971(BOOL p0)
 void _DISABLE_VEHICLE_NEON_LIGHTS(Vehicle vehicle, BOOL toggle)
 void _0xB088E9A47AE6EDD5(Vehicle vehicle, BOOL p1)
 void _REQUEST_VEHICLE_DASHBOARD_SCALEFORM_MOVIE(Vehicle vehicle)
 float GET_VEHICLE_BODY_HEALTH(Vehicle vehicle)
 void SET_VEHICLE_BODY_HEALTH(Vehicle vehicle, float value)
 void _GET_VEHICLE_SUSPENSION_BOUNDS(Vehicle vehicle, Vector3* out1, Vector3* out2)
 float _GET_VEHICLE_SUSPENSION_HEIGHT(Vehicle vehicle)
 void _SET_CAR_HIGH_SPEED_BUMP_SEVERITY_MULTIPLIER(float multiplier)
 int _GET_NUMBER_OF_VEHICLE_DOORS(Vehicle vehicle)
 void _SET_HYDRAULIC_RAISED(Any p0, Any p1)
 void _0xA7DCDF4DED40A8F4(Vehicle vehicle, BOOL p1)
 float _GET_VEHICLE_BODY_HEALTH_2(Vehicle vehicle, Any p1, Any p2, Any p3, Any p4, Any p5, Any p6)
 BOOL _0xD4C4642CB7F50B5D(Vehicle vehicle)
 void _0xC361AA040D6637A8(Vehicle vehicle, BOOL p1)
 void SET_VEHICLE_KERS_ALLOWED(Vehicle vehicle, BOOL toggle)
 BOOL GET_VEHICLE_HAS_KERS(Vehicle vehicle)
 void _0xE16142B94664DEFD(Vehicle vehicle, BOOL p1)
 void _0x26D99D5A82FD18E8(Any p0)
 void _SET_HYDRAULIC_STATE(Any p0, Any p1, Any p2)
 void _SET_CAMBERED_WHEELS_DISABLED(Any p0, Any p1)
 void _SET_HYDRAULIC_WHEEL_STATE(Any p0, Any p1)
 void _SET_HYDRAULIC_WHEEL_STATE_TRANSITION(Any p0, Any p1, Any p2, Any p3, Any p4)
 Any _0x5BA68A0840D546AC(Any p0, Any p1)
 void _0x4419966C9936071A(Vehicle vehicle)
 void _0x870B8B7A766615C8(Any p0, Any p1, Any p2)
 Any _0x8533CAFDE1F0F336(Any p0)
 Any _SET_VEHICLE_DAMAGE_MODIFIER(Vehicle vehicle, float p1)
 void _SET_VEHICLE_UNK_DAMAGE_MULTIPLIER(Vehicle vehicle, float multiplier)
 Any _0xD4196117AF7BB974(Any p0, Any p1)
 void _0xBB2333BB87DDD87F(Any p0, Any p1)
 void _0x73561D4425A021A2(Any p0, Any p1)
 void _0x5B91B229243351A8(Any p0, Any p1)
 void _0x7BBE7FF626A591FE(Any p0)
 void _0x65B080555EA48149(Any p0)
 void _0x428AD3E26C8D9EB0(Vehicle vehicle, float x, float y, float z, float p4)
 void _0xE2F53F172B45EDE1()
 BOOL _0xBA91D045575699AD(Vehicle vehicle)
 void _0x80E3357FDEF45C21(Any p0, Any p1)
 void _SET_VEHICLE_RAMP_LAUNCH_MODIFIER(Any p0, Any p1)
 BOOL _GET_IS_DOOR_VALID(Vehicle vehicle, int doorIndex)
 void _SET_VEHICLE_ROCKET_BOOST_REFILL_TIME(Vehicle vehicle, float seconds)
 BOOL _GET_HAS_ROCKET_BOOST(Vehicle vehicle)
 BOOL _IS_VEHICLE_ROCKET_BOOST_ACTIVE(Vehicle vehicle)
 void _SET_VEHICLE_ROCKET_BOOST_ACTIVE(Vehicle vehicle, BOOL active)
 BOOL _GET_HAS_RETRACTABLE_WHEELS(Vehicle vehicle)
 BOOL _GET_IS_WHEELS_LOWERED_STATE_ACTIVE(Vehicle vehicle)
 void _RAISE_RETRACTABLE_WHEELS(Vehicle vehicle)
 void _LOWER_RETRACTABLE_WHEELS(Vehicle vehicle)
 BOOL _GET_CAN_VEHICLE_JUMP(Vehicle vehicle)
 void _SET_USE_HIGHER_VEHICLE_JUMP_FORCE(Vehicle vehicle, BOOL toggle)
 void _0xB2E0C0D6922D31F2(Vehicle vehicle, BOOL toggle)
 void _SET_VEHICLE_WEAPON_CAPACITY(Vehicle vehicle, int weaponIndex, int capacity)
 int _GET_VEHICLE_WEAPON_CAPACITY(Vehicle vehicle, int weaponIndex)
 BOOL _GET_VEHICLE_HAS_PARACHUTE(Vehicle vehicle)
 BOOL _GET_VEHICLE_CAN_ACTIVATE_PARACHUTE(Vehicle vehicle)
 void _SET_VEHICLE_PARACHUTE_ACTIVE(Vehicle vehicle, BOOL active)
 Any _0x3DE51E9C80B116CF(Any p0)
 void _SET_VEHICLE_RECEIVES_RAMP_DAMAGE(Vehicle vehicle, BOOL toggle)
 void _SET_VEHICLE_RAMP_SIDEWAYS_LAUNCH_MOTION(Any p0, Any p1)
 void _SET_VEHICLE_RAMP_UPWARDS_LAUNCH_MOTION(Any p0, Any p1)
 void _0x9D30687C57BAA0BB(Any p0)
 void _SET_VEHICLE_WEAPONS_DISABLED(Any p0, Any p1)
 void _0x41290B40FA63E6DA(Any p0)
 void _SET_VEHICLE_PARACHUTE_MODEL(Vehicle vehicle, Hash modelHash)
 void _SET_VEHICLE_PARACHUTE_TEXTURE_VARIATIION(Vehicle vehicle, int textureVariation)
 Any _0x0419B167EE128F33(Any p0, Any p1)
 Any _0xF3B0E0AED097A3F5(Any p0, Any p1)
 Any _0xD3E51C0AB8C26EEE(Any p0, Any p1)
 int _GET_ALL_VEHICLES(int* vehsStruct)
 void _0x72BECCF4B829522E(Any p0, Any p1)
 void _0x66E3AAFACE2D1EB8(Any p0, Any p1, Any p2)
 void _0x1312DDD8385AEE4E(Any p0, Any p1)
 void _0xEDBC8405B3895CC9(Any p0, Any p1)
 void _0x26E13D440E7F6064(Vehicle vehicle, float value)
 void _0x2FA2494B47FDD009(Any p0, Any p1)
 void _SET_VEHICLE_ROCKET_BOOST_PERCENTAGE(Vehicle vehicle, float percentage)
 void _0x544996C0081ABDEB(Any p0, Any p1)
 void _0x78CEEE41F49F421F(Any p0, Any p1)
 void _0xAF60E6A2936F982A(Any p0, Any p1)
 void _0x430A7631A84C9BE7(Any p0)
 void _0x75627043C6AA90AD(Any p0)
 void _0x8235F1BEAD557629(Any p0, Any p1)
 void _0x9640E30A7F395E4B(Any p0, Any p1, Any p2, Any p3, Any p4)
 void _0x0BBB9A7A8FFE931B(Any p0, Any p1, Any p2)
 void _0x94A68DA412C4007D(Any p0, Any p1)
 void _SET_VEHICLE_BOMB_COUNT(Vehicle vehicle, int bombCount)
 int _GET_VEHICLE_BOMB_COUNT(Vehicle vehicle)
 void _SET_VEHICLE_COUNTERMEASURE_COUNT(Vehicle vehicle, int counterMeasureCount)
 int _GET_VEHICLE_COUNTERMEASURE_COUNT(Vehicle vehicle)
 void _0x0A3F820A9A9A9AC5(Any p0, Any p1, Any p2, Any p3)
 Any _0x51F30DB60626A20E(Any p0, Any p1, Any p2, Any p3, Any p4, Any p5, Any p6, Any p7, Any p8)
 void _0x97841634EF7DF1D6(Any p0, Any p1)
 void _SET_VEHICLE_HOVER_TRANSFORM_RATIO(Vehicle vehicle, float ratio)
 void _SET_VEHICLE_HOVER_TRANSFORM_PERCENTAGE(Vehicle vehicle, float percentage)
 void _SET_VEHICLE_HOVER_TRANSFORM_ENABLED(Any p0, Any p1)
 void _SET_VEHICLE_HOVER_TRANSFORM_ACTIVE(Vehicle vehicle, BOOL toggle)
 Any _0x3A9128352EAC9E85(Any p0)
 Any _0x8DC9675797123522(Any p0)
 void _0xB251E0B33E58B424(Any p0, Any p1, Any p2)
 Any _0xAEF12960FA943792(Any p0)
 void _0xAA653AE61924B0A0(Any p0, Any p1)
 void _0xC60060EB0D8AC7B1(Any p0, Any p1, Any p2)
 void _SET_SPECIALFLIGHT_WING_RATIO(Vehicle vehicle, float ratio)
 void _0xE615BB7A7752C76A(Any p0, Any p1)
 void _0x887FA38787DE8C72(Any p0)
 void _SET_UNK_FLOAT_0x104_FOR_SUBMARINE_VEHICLE_TASK(Vehicle vehicle, float value)
 void _SET_UNK_BOOL_0x102_FOR_SUBMARINE_VEHICLE_TASK(Vehicle vehicle, BOOL value)
 void _0x36DE109527A2C0C4(BOOL toggle)
 void _0x82E0AC411E41A5B4(BOOL toggle)
 void _0x99A05839C46CE316(BOOL toggle)
 BOOL _GET_IS_VEHICLE_SHUNT_BOOST_ACTIVE(Vehicle vehicle)
 BOOL _0xE8718FAF591FD224(Vehicle vehicle)
 Vehicle _GET_LAST_RAMMED_VEHICLE(Vehicle vehicle)
 void _SET_DISABLE_VEHICLE_UNK(BOOL toggle)
 void _SET_VEHICLE_NITRO_ENABLED(Vehicle vehicle, BOOL toggle)
 void _SET_VEHICLE_WHEELS_DEAL_DAMAGE(Vehicle vehicle, BOOL toggle)
 void _SET_DISABLE_VEHICLE_UNK_2(BOOL toggle)
 void _0x5BBCF35BF6E456F7(BOOL toggle)
 BOOL _GET_DOES_VEHICLE_HAVE_TOMBSTONE(Vehicle vehicle)
 void _HIDE_VEHICLE_TOMBSTONE(Vehicle vehicle, BOOL toggle)
 BOOL _GET_IS_VEHICLE_EMP_DISABLED(Vehicle vehicle)
 void _0x8F0D5BA1C2CC91D7(BOOL toggle)
}

namespace WATER
{
 BOOL GET_WATER_HEIGHT(float x, float y, float z, float* height)
 BOOL GET_WATER_HEIGHT_NO_WAVES(float x, float y, float z, float* height)
 BOOL TEST_PROBE_AGAINST_WATER(float x1, float y1, float z1, float x2, float y2, float z2, Vector3* result)
 BOOL TEST_PROBE_AGAINST_ALL_WATER(Any p0, Any p1, Any p2, Any p3, Any p4, Any p5, Any p6, Any p7)
 BOOL TEST_VERTICAL_PROBE_AGAINST_ALL_WATER(float x, float y, float z, Any p3, float* height)
 void MODIFY_WATER(float x, float y, float radius, float height)
 int _ADD_CURRENT_RISE(float x, float y, float z, float radius, float unk)
 void _REMOVE_CURRENT_RISE(int p0)
 void SET_DEEP_OCEAN_SCALER(float intensity)
 float GET_DEEP_OCEAN_SCALER()
 void _0x547237AA71AB44DE(float p0)
 void RESET_DEEP_OCEAN_SCALER()
}

namespace WEAPON
{
 void ENABLE_LASER_SIGHT_RENDERING(BOOL toggle)
 Hash GET_WEAPON_COMPONENT_TYPE_MODEL(Hash componentHash)
 Hash GET_WEAPONTYPE_MODEL(Hash weaponHash)
 Hash GET_WEAPONTYPE_SLOT(Hash weaponHash)
 Hash GET_WEAPONTYPE_GROUP(Hash weaponHash)
 int _GET_WEAPON_COMPONENT_VARIANT_EXTRA_COMPONENT_COUNT(Hash componentHash)
 Hash _GET_WEAPON_COMPONENT_VARIANT_EXTRA_COMPONENT_MODEL(Hash componentHash, int extraComponentIndex)
 void SET_CURRENT_PED_WEAPON(Ped ped, Hash weaponHash, BOOL equipNow)
 BOOL GET_CURRENT_PED_WEAPON(Ped ped, Hash* weaponHash, BOOL p2)
 Entity GET_CURRENT_PED_WEAPON_ENTITY_INDEX(Ped ped)
 Hash GET_BEST_PED_WEAPON(Ped ped, BOOL p1)
 BOOL SET_CURRENT_PED_VEHICLE_WEAPON(Ped ped, Hash weaponHash)
 BOOL GET_CURRENT_PED_VEHICLE_WEAPON(Ped ped, Hash* weaponHash)
 void _0x50276EF8172F5F12(Ped ped)
 BOOL IS_PED_ARMED(Ped ped, int p1)
 BOOL IS_WEAPON_VALID(Hash weaponHash)
 BOOL HAS_PED_GOT_WEAPON(Ped ped, Hash weaponHash, BOOL p2)
 BOOL IS_PED_WEAPON_READY_TO_SHOOT(Ped ped)
 Hash GET_PED_WEAPONTYPE_IN_SLOT(Ped ped, Hash weaponSlot)
 int GET_AMMO_IN_PED_WEAPON(Ped ped, Hash weaponhash)
 void ADD_AMMO_TO_PED(Ped ped, Hash weaponHash, int ammo)
 void SET_PED_AMMO(Ped ped, Hash weaponHash, int ammo, BOOL p3)
 void SET_PED_INFINITE_AMMO(Ped ped, BOOL toggle, Hash weaponHash)
 void SET_PED_INFINITE_AMMO_CLIP(Ped ped, BOOL toggle)
 void GIVE_WEAPON_TO_PED(Ped ped, Hash weaponHash, int ammoCount, BOOL isHidden, BOOL equipNow)
 void GIVE_DELAYED_WEAPON_TO_PED(Ped ped, Hash weaponHash, int ammoCount, BOOL equipNow)
 void REMOVE_ALL_PED_WEAPONS(Ped ped, BOOL p1)
 void REMOVE_WEAPON_FROM_PED(Ped ped, Hash weaponHash)
 void HIDE_PED_WEAPON_FOR_SCRIPTED_CUTSCENE(Ped ped, BOOL toggle)
 void SET_PED_CURRENT_WEAPON_VISIBLE(Ped ped, BOOL visible, BOOL deselectWeapon, BOOL p3, BOOL p4)
 void SET_PED_DROPS_WEAPONS_WHEN_DEAD(Ped ped, BOOL toggle)
 BOOL HAS_PED_BEEN_DAMAGED_BY_WEAPON(Ped ped, Hash weaponHash, int weaponType)
 void CLEAR_PED_LAST_WEAPON_DAMAGE(Ped ped)
 BOOL HAS_ENTITY_BEEN_DAMAGED_BY_WEAPON(Entity entity, Hash weaponHash, int weaponType)
 void CLEAR_ENTITY_LAST_WEAPON_DAMAGE(Entity entity)
 void SET_PED_DROPS_WEAPON(Ped ped)
 void SET_PED_DROPS_INVENTORY_WEAPON(Ped ped, Hash weaponHash, float xOffset, float yOffset, float zOffset, int ammoCount)
 int GET_MAX_AMMO_IN_CLIP(Ped ped, Hash weaponHash, BOOL p2)
 BOOL GET_AMMO_IN_CLIP(Ped ped, Hash weaponHash, int* ammo)
 BOOL SET_AMMO_IN_CLIP(Ped ped, Hash weaponHash, int ammo)
 BOOL GET_MAX_AMMO(Ped ped, Hash weaponHash, int* ammo)
 BOOL _GET_MAX_AMMO_2(Ped ped, Hash weaponHash, int* ammo)
 void _ADD_PED_AMMO(Ped ped, Hash weaponHash, int ammo)
 void SET_PED_AMMO_BY_TYPE(Ped ped, Any ammoType, int ammo)
 int GET_PED_AMMO_BY_TYPE(Ped ped, Any ammoType)
 void SET_PED_AMMO_TO_DROP(Ped ped, int p1)
 void _0xE620FD3512A04F18(float p0)
 Hash GET_PED_AMMO_TYPE_FROM_WEAPON(Ped ped, Hash weaponHash)
 Hash _GET_PED_AMMO_TYPE_FROM_WEAPON_2(Ped ped, Hash weaponHash)
 BOOL GET_PED_LAST_WEAPON_IMPACT_COORD(Ped ped, Vector3* coords)
 void SET_PED_GADGET(Ped ped, Hash gadgetHash, BOOL p2)
 BOOL GET_IS_PED_GADGET_EQUIPPED(Ped ped, Hash gadgetHash)
 Hash GET_SELECTED_PED_WEAPON(Ped ped)
 void EXPLODE_PROJECTILES(Ped ped, Hash weaponHash, BOOL p2)
 void REMOVE_ALL_PROJECTILES_OF_TYPE(Hash weaponHash, BOOL p1)
 float GET_LOCKON_DISTANCE_OF_CURRENT_PED_WEAPON(Ped ped)
 float GET_MAX_RANGE_OF_CURRENT_PED_WEAPON(Ped ped)
 BOOL HAS_VEHICLE_GOT_PROJECTILE_ATTACHED(Ped driver, Vehicle vehicle, Hash weaponHash, Any p3)
 void GIVE_WEAPON_COMPONENT_TO_PED(Ped ped, Hash weaponHash, Hash componentHash)
 void REMOVE_WEAPON_COMPONENT_FROM_PED(Ped ped, Hash weaponHash, Hash componentHash)
 BOOL HAS_PED_GOT_WEAPON_COMPONENT(Ped ped, Hash weaponHash, Hash componentHash)
 BOOL IS_PED_WEAPON_COMPONENT_ACTIVE(Ped ped, Hash weaponHash, Hash componentHash)
 BOOL _PED_SKIP_NEXT_RELOADING(Ped ped)
 BOOL MAKE_PED_RELOAD(Ped ped)
 void REQUEST_WEAPON_ASSET(Hash weaponHash, int p1, int p2)
 BOOL HAS_WEAPON_ASSET_LOADED(Hash weaponHash)
 void REMOVE_WEAPON_ASSET(Hash weaponHash)
 Object CREATE_WEAPON_OBJECT(Hash weaponHash, int ammoCount, float x, float y, float z, BOOL showWorldModel, float heading, Any p7, Any p8, Any p9)
 void GIVE_WEAPON_COMPONENT_TO_WEAPON_OBJECT(Object weaponObject, Hash addonHash)
 void REMOVE_WEAPON_COMPONENT_FROM_WEAPON_OBJECT(Any p0, Any p1)
 BOOL HAS_WEAPON_GOT_WEAPON_COMPONENT(Object weapon, Hash addonHash)
 void GIVE_WEAPON_OBJECT_TO_PED(Object weaponObject, Ped ped)
 BOOL DOES_WEAPON_TAKE_WEAPON_COMPONENT(Hash weaponHash, Hash componentHash)
 Object GET_WEAPON_OBJECT_FROM_PED(Ped ped, BOOL p1)
 void _GIVE_LOADOUT_TO_PED(Ped ped, Hash loadoutHash)
 void SET_PED_WEAPON_TINT_INDEX(Ped ped, Hash weaponHash, int tintIndex)
 int GET_PED_WEAPON_TINT_INDEX(Ped ped, Hash weaponHash)
 void SET_WEAPON_OBJECT_TINT_INDEX(Object weapon, int tintIndex)
 int GET_WEAPON_OBJECT_TINT_INDEX(Object weapon)
 int GET_WEAPON_TINT_COUNT(Hash weaponHash)
 void _SET_PED_WEAPON_LIVERY_COLOR(Ped ped, Hash weaponHash, Hash camoComponentHash, int colorIndex)
 int _GET_PED_WEAPON_LIVERY_COLOR(Ped ped, Hash weaponHash, Hash camoComponentHash)
 void _SET_WEAPON_OBJECT_LIVERY_COLOR(Object weaponObject, Hash camoComponentHash, int colorIndex)
 int _GET_WEAPON_OBJECT_LIVERY_COLOR(Object weaponObject, Hash camoComponentHash)
 int _0xA2C9AC24B4061285(Ped ped, Hash weaponHash)
 void _0x977CA98939E82E4B(Object weaponObject, int p1)
 BOOL GET_WEAPON_HUD_STATS(Hash weaponHash, Any* outData)
 BOOL GET_WEAPON_COMPONENT_HUD_STATS(Hash componentHash, int* outData)
 float GET_WEAPON_DAMAGE(Hash weaponHash, Hash componentHash)
 int GET_WEAPON_CLIP_SIZE(Hash weaponHash)
 float _GET_WEAPON_TIME_BETWEEN_SHOTS(Hash weaponHash)
 void SET_PED_CHANCE_OF_FIRING_BLANKS(Ped ped, float xBias, float yBias)
 Object SET_PED_SHOOT_ORDNANCE_WEAPON(Ped ped, float p1)
 void REQUEST_WEAPON_HIGH_DETAIL_MODEL(Entity weaponObject)
 void _SET_WEAPON_DAMAGE_MODIFIER(Hash weaponHash, float damageAmount)
 BOOL IS_PED_CURRENT_WEAPON_SILENCED(Ped ped)
 BOOL IS_FLASH_LIGHT_ON(Ped ped)
 Any SET_FLASH_LIGHT_FADE_DISTANCE(float distance)
 void SET_WEAPON_ANIMATION_OVERRIDE(Ped ped, Hash animStyle)
 int GET_WEAPON_DAMAGE_TYPE(Hash weaponHash)
 void _0xE4DCEC7FD5B739A5(Ped ped)
 BOOL CAN_USE_WEAPON_ON_PARACHUTE(Hash weaponHash)
 int _CREATE_AIR_DEFENSE_SPHERE(float p0, float p1, float p2, float radius, float p4, float p5, float p6, Hash weaponHash)
 int _CREATE_AIR_DEFENSE_AREA(float p0, float p1, float p2, float p3, float p4, float p5, float p6, float p7, float p8, float p9, Hash weaponHash)
 BOOL _REMOVE_AIR_DEFENSE_ZONE(int zoneId)
 void _REMOVE_ALL_AIR_DEFENSE_ZONES()
 void _SET_PLAYER_AIR_DEFENSE_ZONE_FLAG(Player player, int zoneId, BOOL enable)
 BOOL _IS_AIR_DEFENSE_ZONE_INSIDE_SPHERE(float x, float y, float z, float radius, int zoneId)
 void _FIRE_AIR_DEFENSE_WEAPON(int zoneId, float x, float y, float z)
 BOOL _DOES_AIR_DEFENSE_ZONE_EXIST(int zoneId)
 void _SET_CAN_PED_EQUIP_WEAPON(Ped ped, Hash weaponHash, BOOL toggle)
 void _SET_CAN_PED_EQUIP_ALL_WEAPONS(Ped ped, BOOL toggle)
}

namespace ZONE
{
 int GET_ZONE_AT_COORDS(float x, float y, float z)
 int GET_ZONE_FROM_NAME_ID(const char* zoneName)
 int GET_ZONE_POPSCHEDULE(int zoneId)
 const char* GET_NAME_OF_ZONE(float x, float y, float z)
 void SET_ZONE_ENABLED(int zoneId, BOOL toggle)
 int GET_ZONE_SCUMMINESS(int zoneId)
 void OVERRIDE_POPSCHEDULE_VEHICLE_MODEL(int scheduleId, Hash vehicleHash)
 void CLEAR_POPSCHEDULE_OVERRIDE_VEHICLE_MODEL(int scheduleId)
 Hash GET_HASH_OF_MAP_AREA_AT_COORDS(float x, float y, float z)
}
