{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome For queries beyond the scope of this site, please do not hesitate to contact us on dicsord .","title":"Welcome"},{"location":"#welcome","text":"For queries beyond the scope of this site, please do not hesitate to contact us on dicsord .","title":"Welcome"},{"location":"installation/","text":"Installation Guide How to inject Upon purchase, you will receive a license key via email. You should receive it immediately. Register your new account here . Enter your license key and desired username and password. Switch your antivirus off, click download and extract xcheats.exe from the launcher.zip . Run xcheats.exe . For the first launch you may need to enter your username and password. Load fully into GTAV Story or Online, then click load xcheats in the launcher. You can use INS / INSERT on your keyboard to open XCheats and DEL + END at the same time to uninject at any time. If you have any problems please open a support ticket on our discord server or use the contact form on our website. Antivirus Flag XCheats is completely safe. Windows Defender or other antivirus may flag XCheats, this is because it is an injector / known game hack. XCheats injects code into a running process, this process is GTA. You can stop notifications popping up by either switching your AV off or adding an exception to xcheats.exe . Discord Server Verification If you own the menu visit #verification on our discord server and follow the instructions to access user only channels (e.g. support, bugs). If you would like to talk or need guidance, visit #support-tickets or #faq . XCheats Community Discord Server","title":"Installation Guide"},{"location":"installation/#installation-guide","text":"","title":"Installation Guide"},{"location":"installation/#how-to-inject","text":"Upon purchase, you will receive a license key via email. You should receive it immediately. Register your new account here . Enter your license key and desired username and password. Switch your antivirus off, click download and extract xcheats.exe from the launcher.zip . Run xcheats.exe . For the first launch you may need to enter your username and password. Load fully into GTAV Story or Online, then click load xcheats in the launcher. You can use INS / INSERT on your keyboard to open XCheats and DEL + END at the same time to uninject at any time.","title":"How to inject"},{"location":"installation/#if-you-have-any-problems-please-open-a-support-ticket-on-our-discord-server-or-use-the-contact-form-on-our-website","text":"","title":"If you have any problems please open a support ticket on our discord server or use the contact form on our website."},{"location":"installation/#antivirus-flag","text":"XCheats is completely safe. Windows Defender or other antivirus may flag XCheats, this is because it is an injector / known game hack. XCheats injects code into a running process, this process is GTA. You can stop notifications popping up by either switching your AV off or adding an exception to xcheats.exe .","title":"Antivirus Flag"},{"location":"installation/#discord-server-verification","text":"If you own the menu visit #verification on our discord server and follow the instructions to access user only channels (e.g. support, bugs). If you would like to talk or need guidance, visit #support-tickets or #faq . XCheats Community Discord Server","title":"Discord Server Verification"},{"location":"lua/","text":"Lua API XCheats offers a robust lua API which allows semi-arbitrary interaction with the RAGE engine via a set of \"natives\" declared below in addition to several helper functions also shown below. Usage Every lua script must contain the following functions: Function Usage Initialise Called once when the script is loaded. This is where you add options to be drawn in list mode and perform other initialisation functions. This is not called from a script thread. OnGameTick This is called once per frame from a script thread. Here you may call natives or anything that requires a script context. OnD3dTick This is called one per frame from the DX hook. Here you may call ImGui functions. Any natives called here must be passed to queue_job to be executed in a script context. See this example script: local suicide_loop = false function OnD3dTick() if (ImGui.Begin(\"Demo\", 0)) then if (ImGui.Button(\"Suicide\", ImGui.ImVec2(0, 0))) then xc.queue_job(function() entity.SET_ENTITY_HEALTH(player.PLAYER_PED_ID(), 0, 0) end) end ImGui.End() end end function OnGameTick() if (suicide_loop) then entity.SET_ENTITY_HEALTH(player.PLAYER_PED_ID(), 0, 0) end end function Initialise() xc.add_feature(\"Suicide\", \"action\", 0, function() entity.SET_ENTITY_HEALTH(player.PLAYER_PED_ID(), 0, 0) end) xc.add_feature(\"Suicide loop\", \"toggle\", 0, function(on) suicide_loop = on end) end Natives As many natives have been exposed to the lua API as possible. However, due to some natives taking pointers as parameters or returning pointers, some have been modified to either take different parameters or return a dereferenced result. This is due to the lua language being a (far) higher level than c++. For native functions that take pointers as non-output parameters, they have been edited to instead take a value where there would otherwise be a pointer. entity.DELETE_ENTITY instead takes an entity as a parameter rather than a pointer to an entity which would be impossible to get via lua (currently). For functions which take pointers as output parameters, such as graphics.GET_SCREEN_COORD_FROM_WORLD_COORD which would usually take the parameters (float worldX, float worldY, float worldZ, float* screenX, float* screenY) have all been modified to take only the parameters which are not pointers in contigous order. Now the function exposed to lua takes these parameters (float worldX, float worldY, float worldZ) . For functions which take an array as a parameter in the form of a pointer of type T and and int of the array size, the lua API abstracts this in a similar way as shown above. Instead, the native will take the standard lua vector container as a parameter. For example see script.TRIGGER_SCRIPT_EVENT(int eventId, Player target, Vector parameters) in use: //Kick from vehicle takes no additional parameters script.TRIGGER_SCRIPT_EVENT(-1333236192, player.PLAYER_ID(), {}) For return values of a function taking pointer output parameters, a tuple is returned in the order of native result followed by the output parameters in their original order: local coords = entity.GET_ENTITY_COORDS(player.PLAYER_PED_ID(), 1) local result, x, y = graphics.GET_SCREEN_COORD_FROM_WORLD_COORD(coords.x, coords.y, coords.z) - Unaltered Natives are natives that are ready to use without additional consideration - \"Pointer Natives\" are the aforementioned natives with modified return values and/or parameters Structures v3 Returned by natives, often representing coordinates or rotation. float x float y float z constructor (x, y, z) ImVec2 Used by ImGui functions to represent sizes or coordinates. float x float y constructor (x, y) ImVec4 A more versatile structure used by ImGui functions to represent paths, colours, etc. float x float y float z float w constructor (x, y, z, w) List Mode XCheats has two separate user interfaces, one is a traditional \"list\" ui that is drawn with natives and operable with controller and/or keyboard, the other using the mouse and keyboard using the popular library ImGui. The lua API allows deep integration with list mode. There are a few key functions for list mode integration: add_feature(String name, String type, Int parent, Function callback) name is the left text to be drawn in the option entry, parent is an integer representing the submenu that owns the option You may pass 0 to parent for the option to be drawn in the scripts submenu . callback is a function called with different parameters depending on the option type. See below type may be any of the following: action This is a standard option, when the enter key is pressed over this option the callback is executed in a script thread. The callback takes no parameters in an action option submenu This creates a new submenu with the parent parameter being a unique number. Once you create the submenu, you may draw options with this submenu as the parent building your own custom hierarchy. The callback is discarded. You should not create multiple submenus with the same id. player_action This is the same as action but is shown under the selected player submenu alongside XCheats' own options toggle This is a togglable (boolean) option with a special callback. This option is the same as action other than the callback takes a boolean parameter containing the state of the option when it is updated. For example if the option is toggled on then the callback is executed with the parameter being false. See usage of this option in the example script above. player_toggle This is the same as toggle but is shown under the selected player submenu alongside XCheats' own options add_int_feature(String name, Int parent, Int min, Int max, Int step, Int value, Function(Int value) callback) This displays an option containing an integer value that is incremented or decremented and is a specialised form of add_feature of toggle type instead guarding an integer rather than a boolean. Each time the integer is incremented or decremented or if the option is entered, the callback function is called with the current value as a paremeter. Step is the amount the option is changed by on a horizontal action. add_float_feature(String name, Int parent, Float min, Float max, Float step, Float value, Function(Float value) callback) This option is identical to add_int_feature but instead guards a signed floating point number rather than an integer. add_sub_feature(String name, Int parent, Int target, Function() callback) This is identical to a regular action but instead jumps to the target submenu when the option is executed. This is a key function for building your own custom hierarchy of options and submenus. ImGui Mode This mode is less flexible in terms of integration with the XCheats lua API and the existing gui. You cannot interact with ImGui submenus but you may create windows, draw buttons etc. outside of the XCheats window. See the ImGui Documentation for more info about the library and functions exposed by the lua API. These options belong to the ImGui namespace, see the example script above for demo usage. These bindings are not to be confused with other ImGui->lua bindings and are unique to XCheats . bool Begin(String name, int options) void End() bool Button(String label, ImVec2 colour = ImVec2(0, 0)) void Text(String text) void TextWrapped(String text) bool Selectable(String label, bool selected, int flags, ImVec2 size) bool, int SliderInt(String label, int v, int min, int max) - the bool is true if the int has changed, the int is the value. bool, float SliderFloat(String label, float v, float min, float max) - the bool is true if the float has changed, the float is the value. bool TreeNode(String label) void TreePop() int Combo(String label, int current, Vector options) returns the current option index bool ListBoxHeader(String label, ImVec2 size) void ListBoxFooter() bool IsItemHovered() void BeginGroup() void EndGroup() bool BeginChild(String label, ImVec2 size) void EndChild() bool CollapsingHeader(String label, int flags) bool, bool Checkbox(String label, bool toggle) . First bool is true if the checkbox has been toggled this frame, second bool is the state of the toggle variable ImVec2 GetCursorPos() void SetCursorPos(ImVec2 pos) XCheats Functions XCheats offers a limited set of functionality that is not acheivable through natives alone. The number of helper functions is always growing and new ones may be added on request. queue_job(Function callback()) schedules the passed function for execution within a script thread / context immediately. It does not guarantee real time or immediate execution. wait(int milliseconds) is a blocking function that yields the script thread for N milliseconds. It must only be called from within OnGameTick or from within a function passed to queue_job . In other words, it can only be executed from within a script thread. log(String message) outputs the message to the XCheats console & Log file.","title":"Lua API"},{"location":"lua/#lua-api","text":"XCheats offers a robust lua API which allows semi-arbitrary interaction with the RAGE engine via a set of \"natives\" declared below in addition to several helper functions also shown below.","title":"Lua API"},{"location":"lua/#usage","text":"Every lua script must contain the following functions: Function Usage Initialise Called once when the script is loaded. This is where you add options to be drawn in list mode and perform other initialisation functions. This is not called from a script thread. OnGameTick This is called once per frame from a script thread. Here you may call natives or anything that requires a script context. OnD3dTick This is called one per frame from the DX hook. Here you may call ImGui functions. Any natives called here must be passed to queue_job to be executed in a script context. See this example script: local suicide_loop = false function OnD3dTick() if (ImGui.Begin(\"Demo\", 0)) then if (ImGui.Button(\"Suicide\", ImGui.ImVec2(0, 0))) then xc.queue_job(function() entity.SET_ENTITY_HEALTH(player.PLAYER_PED_ID(), 0, 0) end) end ImGui.End() end end function OnGameTick() if (suicide_loop) then entity.SET_ENTITY_HEALTH(player.PLAYER_PED_ID(), 0, 0) end end function Initialise() xc.add_feature(\"Suicide\", \"action\", 0, function() entity.SET_ENTITY_HEALTH(player.PLAYER_PED_ID(), 0, 0) end) xc.add_feature(\"Suicide loop\", \"toggle\", 0, function(on) suicide_loop = on end) end","title":"Usage"},{"location":"lua/#natives","text":"As many natives have been exposed to the lua API as possible. However, due to some natives taking pointers as parameters or returning pointers, some have been modified to either take different parameters or return a dereferenced result. This is due to the lua language being a (far) higher level than c++. For native functions that take pointers as non-output parameters, they have been edited to instead take a value where there would otherwise be a pointer. entity.DELETE_ENTITY instead takes an entity as a parameter rather than a pointer to an entity which would be impossible to get via lua (currently). For functions which take pointers as output parameters, such as graphics.GET_SCREEN_COORD_FROM_WORLD_COORD which would usually take the parameters (float worldX, float worldY, float worldZ, float* screenX, float* screenY) have all been modified to take only the parameters which are not pointers in contigous order. Now the function exposed to lua takes these parameters (float worldX, float worldY, float worldZ) . For functions which take an array as a parameter in the form of a pointer of type T and and int of the array size, the lua API abstracts this in a similar way as shown above. Instead, the native will take the standard lua vector container as a parameter. For example see script.TRIGGER_SCRIPT_EVENT(int eventId, Player target, Vector parameters) in use: //Kick from vehicle takes no additional parameters script.TRIGGER_SCRIPT_EVENT(-1333236192, player.PLAYER_ID(), {}) For return values of a function taking pointer output parameters, a tuple is returned in the order of native result followed by the output parameters in their original order: local coords = entity.GET_ENTITY_COORDS(player.PLAYER_PED_ID(), 1) local result, x, y = graphics.GET_SCREEN_COORD_FROM_WORLD_COORD(coords.x, coords.y, coords.z)","title":"Natives"},{"location":"lua/#-unaltered-natives","text":"are natives that are ready to use without additional consideration","title":"- Unaltered Natives"},{"location":"lua/#-pointer-natives","text":"are the aforementioned natives with modified return values and/or parameters","title":"- \"Pointer Natives\""},{"location":"lua/#structures","text":"","title":"Structures"},{"location":"lua/#v3","text":"Returned by natives, often representing coordinates or rotation. float x float y float z constructor (x, y, z)","title":"v3"},{"location":"lua/#imvec2","text":"Used by ImGui functions to represent sizes or coordinates. float x float y constructor (x, y)","title":"ImVec2"},{"location":"lua/#imvec4","text":"A more versatile structure used by ImGui functions to represent paths, colours, etc. float x float y float z float w constructor (x, y, z, w)","title":"ImVec4"},{"location":"lua/#list-mode","text":"XCheats has two separate user interfaces, one is a traditional \"list\" ui that is drawn with natives and operable with controller and/or keyboard, the other using the mouse and keyboard using the popular library ImGui. The lua API allows deep integration with list mode. There are a few key functions for list mode integration: add_feature(String name, String type, Int parent, Function callback) name is the left text to be drawn in the option entry, parent is an integer representing the submenu that owns the option You may pass 0 to parent for the option to be drawn in the scripts submenu . callback is a function called with different parameters depending on the option type. See below type may be any of the following: action This is a standard option, when the enter key is pressed over this option the callback is executed in a script thread. The callback takes no parameters in an action option submenu This creates a new submenu with the parent parameter being a unique number. Once you create the submenu, you may draw options with this submenu as the parent building your own custom hierarchy. The callback is discarded. You should not create multiple submenus with the same id. player_action This is the same as action but is shown under the selected player submenu alongside XCheats' own options toggle This is a togglable (boolean) option with a special callback. This option is the same as action other than the callback takes a boolean parameter containing the state of the option when it is updated. For example if the option is toggled on then the callback is executed with the parameter being false. See usage of this option in the example script above. player_toggle This is the same as toggle but is shown under the selected player submenu alongside XCheats' own options add_int_feature(String name, Int parent, Int min, Int max, Int step, Int value, Function(Int value) callback) This displays an option containing an integer value that is incremented or decremented and is a specialised form of add_feature of toggle type instead guarding an integer rather than a boolean. Each time the integer is incremented or decremented or if the option is entered, the callback function is called with the current value as a paremeter. Step is the amount the option is changed by on a horizontal action. add_float_feature(String name, Int parent, Float min, Float max, Float step, Float value, Function(Float value) callback) This option is identical to add_int_feature but instead guards a signed floating point number rather than an integer. add_sub_feature(String name, Int parent, Int target, Function() callback) This is identical to a regular action but instead jumps to the target submenu when the option is executed. This is a key function for building your own custom hierarchy of options and submenus.","title":"List Mode"},{"location":"lua/#imgui-mode","text":"This mode is less flexible in terms of integration with the XCheats lua API and the existing gui. You cannot interact with ImGui submenus but you may create windows, draw buttons etc. outside of the XCheats window. See the ImGui Documentation for more info about the library and functions exposed by the lua API. These options belong to the ImGui namespace, see the example script above for demo usage. These bindings are not to be confused with other ImGui->lua bindings and are unique to XCheats . bool Begin(String name, int options) void End() bool Button(String label, ImVec2 colour = ImVec2(0, 0)) void Text(String text) void TextWrapped(String text) bool Selectable(String label, bool selected, int flags, ImVec2 size) bool, int SliderInt(String label, int v, int min, int max) - the bool is true if the int has changed, the int is the value. bool, float SliderFloat(String label, float v, float min, float max) - the bool is true if the float has changed, the float is the value. bool TreeNode(String label) void TreePop() int Combo(String label, int current, Vector options) returns the current option index bool ListBoxHeader(String label, ImVec2 size) void ListBoxFooter() bool IsItemHovered() void BeginGroup() void EndGroup() bool BeginChild(String label, ImVec2 size) void EndChild() bool CollapsingHeader(String label, int flags) bool, bool Checkbox(String label, bool toggle) . First bool is true if the checkbox has been toggled this frame, second bool is the state of the toggle variable ImVec2 GetCursorPos() void SetCursorPos(ImVec2 pos)","title":"ImGui Mode"},{"location":"lua/#xcheats-functions","text":"XCheats offers a limited set of functionality that is not acheivable through natives alone. The number of helper functions is always growing and new ones may be added on request. queue_job(Function callback()) schedules the passed function for execution within a script thread / context immediately. It does not guarantee real time or immediate execution. wait(int milliseconds) is a blocking function that yields the script thread for N milliseconds. It must only be called from within OnGameTick or from within a function passed to queue_job . In other words, it can only be executed from within a script thread. log(String message) outputs the message to the XCheats console & Log file.","title":"XCheats Functions"}]}